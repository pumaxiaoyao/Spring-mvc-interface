package com.cn.tianxia.controller;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentLinkedQueue;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.cn.tianxia.bg.api.util.HashUtil;
import com.cn.tianxia.common.PayConstant;
import com.cn.tianxia.json.JSONUtils;
import com.cn.tianxia.pay.dc.util.MerchSdkSign;
import com.cn.tianxia.pay.gst.util.StringUtils;
import com.cn.tianxia.pay.impl.*;
import com.cn.tianxia.pay.jfk.util.Base64Local;
import com.cn.tianxia.pay.jfk.util.GsonUtil;
import com.cn.tianxia.pay.jfk.util.SecurityRSAPay;
import com.cn.tianxia.pay.mjf.util.MJFToolKit;
import com.cn.tianxia.pay.service.PayService;
import com.cn.tianxia.pay.sl.util.Base64;
import com.cn.tianxia.pay.sl.util.Tools;
import com.cn.tianxia.pay.sl.util.XmlUtil;
import com.cn.tianxia.pay.syf.util.ToolKit;
import com.cn.tianxia.pay.utils.DESUtils;
import com.cn.tianxia.pay.utils.ParamsUtils;
import com.cn.tianxia.pay.utils.YEEUtils;
import com.cn.tianxia.pay.xf.util.RsaUtil;
import com.cn.tianxia.pay.xyz.util.HttpUtil;
import com.cn.tianxia.pay.xyz.util.XMLUtils;
import com.cn.tianxia.pay.yj.util.XmlUtils;
import com.cn.tianxia.po.ResultResponse;
import com.cn.tianxia.service.NotifyService;
import com.cn.tianxia.service.UserService;
import com.cn.tianxia.util.FileLog;
import com.cn.tianxia.util.IPTools;
import com.cn.tianxia.util.JDBCTools;
import com.cn.tianxia.util.RequestUtil;
import com.cn.tianxia.vo.CagentYespayVO;
import com.cn.tianxia.vo.RechargeOrderVO;

import net.sf.json.JSONObject;
import sun.misc.BASE64Decoder;

/**
 * @ClassName NotifyController
 * @Description 支付回调接口
 * @author Hardy
 * @Date 2018年9月30日 上午11:03:56
 * @version 1.1.0
 */
@RequestMapping("Notify")
@Controller
@Scope("prototype")
public class NotifyController extends BaseController {

    @Autowired
    private UserService userService;

    @Autowired
    private NotifyService notifyService;
    
    private String ret_str_success = "success";
    private String ret_str_failed = "fail";
    private String t_trade_status; // 商户交易状态

    /**
     * 
     * @Description 小熊宝回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XXBNotify.do")
    @ResponseBody
    public String XXBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "200";// 成功返回success
        String clazz_name = "XXBNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("merchantOrderNo");// 平台订单号
        String trade_no = request.getParameter("orderNo");// 平台订单号
        String trade_status ="SUCCESS";
        String t_trade_status = "SUCCESS";// 表示成功状态
        String order_amount = infoMap.get("payAmount");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));//实际支付金额
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XXB)) {
                XXBPayServiceImpl xxb = new XXBPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 珊瑚支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/CORALNotify.do")
    @ResponseBody
    public String CORALNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";// 成功返回success
        String clazz_name = "CORALNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid");// 平台订单号
        String trade_no = infoMap.get("transaction_id");// 支付商订单号
        String trade_status = infoMap.get("returncode");// 处理结果
        String t_trade_status = "00";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_CORAL)) {
                CORALPayServiceImpl xxb = new CORALPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    
    @RequestMapping("/DQNotify.do")
    @ResponseBody
    public String DQNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "DQNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("memberOrderId");// 平台订单号
        String trade_no = infoMap.get("orderId");// 支付商订单号
        String trade_status = infoMap.get("stateCode");// 处理结果
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_DQ)) {
                DQPayServiceImpl xxb = new DQPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 功能描述: TYC太阳城接入首信易支付回调
     *
     * @Author: Elephone
     * @Date: 2018年08月23日 14:13:31
     * @param request
     * @param response
     * @param session
     * @return: java.lang.String
     **/
    @RequestMapping("/SXYNotify.do")
    @ResponseBody
    public String SXYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "sent";// 成功返回success
        String clazz_name = "SXYNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("v_oid");// 平台订单号
        String trade_no = System.currentTimeMillis()+"";//自定义流水号
        String trade_status = infoMap.get("v_pstatus");// 处理结果
        String t_trade_status = "20";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SXY)) {
                SXYPayServiceImpl xxb = new SXYPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * @Description 溢发支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YFFNotify.do")
    @ResponseBody
    public String YFFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "YFFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String, String> infoMap = new HashMap<String, String>();
        try {
            for (Entry<String, String[]> entry : request.getParameterMap().entrySet()) {
                if (entry.getValue() != null && entry.getValue().length > 0) {
                    infoMap = JSONUtils.toHashMap(entry.getKey());
                }
            }
            logger.info(clazz_name+"支付回调请求参数:{}" + infoMap.toString());
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("解析json参数异常");
            return ret__success;
        }
        
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderNo");// 平台订单号
        String trade_no = infoMap.get("orderNo");// 支付商订单号
        String trade_status = infoMap.get("resultStatus");// 处理结果
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YFF)) {
                YFFPayServiceImpl xxb = new YFFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 功能描述: 鑫发支付异步回调
     * 
     * @Author: Elephone
     * @Date: 2018年08月18日 16:04:24
     * @param request
     *             * @param response  * @param session
     * @return: java.lang.String
     **/
    @RequestMapping("/XINFAPAYNotify.do")
    @ResponseBody
    public String XINFAPAYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        logger.info("[XINFAPAYNotify]鑫发支付异步回调开始----------------------------- XINFAPAYNotify.do start ------------------------------");
        String data = request.getParameter("data");
        logger.info("[XINFAPAYNotify]鑫发支付异步回调请求参数:{}",data);
        String order_no = request.getParameter("orderNo");
        logger.info("[XINFAPAYNotify]鑫发支付异步回调请求参数订单号:{}",order_no);
        String clazz_name = "XINFAPAYNotify";
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            byte[] bytes = ToolKit.decryptByPrivateKey(new BASE64Decoder().decodeBuffer(data),
                    pmapsconfig.get("MECHA_PRIVATE_KEY"));
            String resultData = new String(bytes, ToolKit.CHARSET);// 解密数据
            JSONObject jsonObj = JSONObject.fromObject(resultData);
            Map<String, String> infoMap = new TreeMap<String, String>();
            infoMap.put("merchNo", jsonObj.getString("merchNo"));
            infoMap.put("payType", jsonObj.getString("payType"));
            infoMap.put("orderNo", jsonObj.getString("orderNo"));
            infoMap.put("amount", jsonObj.getString("amount"));
            infoMap.put("goodsName", jsonObj.getString("goodsName"));
            infoMap.put("payStateCode", jsonObj.getString("payStateCode"));// 支付状态
            infoMap.put("payDate", jsonObj.getString("payDate"));// yyyyMMddHHmmss
            infoMap.put("sign", jsonObj.getString("sign"));//
            //=================================获取回调基本参数结果--START===========================//
            String trade_no = System.currentTimeMillis()+"";
            String trade_status = jsonObj.getString("payStateCode");// 处理结果
            String t_trade_status = "00";// 表示成功状态
            String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
            //=================================获取回调基本参数结果--END===========================//
            // 保存文件记录
            savePayFile("XINFAPAYNotify", infoMap, IPTools.getIp(request));
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XINFA)) {
                XINFAPayServiceImpl payService = new XINFAPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    
    /**
     * 
     * @Description (TODO这里用一句话描述这个方法的作用)
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XPAYNotify.do")
    @ResponseBody
    public String XPAYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "XPAYNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("orderid");// 平台订单号
        String trade_no = request.getParameter("orderid");// 支付商订单号
        String trade_status = request.getParameter("returncode");// 处理结果
        String t_trade_status = "2";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XPAY)) {
                XPAYPayServiceImpl payService = new XPAYPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    
    
    @RequestMapping("/DFNotify.do")
    @ResponseBody
    public String DFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        JSONObject jsonResult = new JSONObject();// 成功返回success
        jsonResult.put("code", "00");
        String ret__success = JSONObject.fromObject(jsonResult).toString();
        String clazz_name = "DFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("outOrderId");// 平台订单号
        String trade_no = request.getParameter("instructCode");// 支付商订单号
        String trade_status = "SUCCESS"; // request.getParameter("tradeStatus");//
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_DF)) {
                DFPayServiceImpl payService = new DFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    
    @RequestMapping("/XFNotify.do")
    @ResponseBody
    public Object XFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "XPAYNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = String.valueOf(infoMap.get("orderNum"));// 平台订单号
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            String merId = String.valueOf(infoMap.get("pl_groupId"));
            JSONObject obj = getPublicKey(merId, "XF");
            String publicKey_str = obj.getString("publicKey_str");
            for (Entry<String, String> entry : infoMap.entrySet()) {
                logger.info("返回的参数明细：" + entry.getKey() + "=" + entry.getValue());
            }
            String respData_pl_sign = String.valueOf(infoMap.get("pl_sign")).replaceAll(" ", "+");
            logger.info("解密前数据：" + respData_pl_sign);

            String respData_pl_sign_str = new String(
                    RsaUtil.verify(publicKey_str, XFPayServiceImpl.base64Decode(respData_pl_sign)), "UTF-8");
            logger.info("解密后数据：" + respData_pl_sign_str);
            infoMap.clear();
            infoMap = XFPayServiceImpl.paramToMap(respData_pl_sign_str);
            //=================================获取回调基本参数结果--START===========================//
            String trade_no = String.valueOf(infoMap.get("pl_orderNum"));// 平台订单号
            String trade_status = String.valueOf(infoMap.get("pl_payState"));// 处理结果
            String t_trade_status = "4";// 表示成功状态
            String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
            //=================================获取回调基本参数结果--END===========================//
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            if (paymentName.equals(PayConstant.CONSTANT_XF)) {
                logger.info("==========================处理订单回调业务并修改订单状态==========================");
                String result = notifyService.processNotifyOrder(rechargeOrderVO);
                if(ResultResponse.SUCCESS_CODE.equals(result)){
                    logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                    return ret__success;
                }
                logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
                return ret_str_failed;
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                return ret_str_failed;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    @RequestMapping("/JCZFNotify.do")
    @ResponseBody
    public Object JCZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";
        String clazz_name = "JCZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("order_id");// 平台订单号
        String trade_no = request.getParameter("order_abc");// 平台订单号
        String trade_status = request.getParameter("status");// 处理结果
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_JCZF)) {
                JCZFPayServiceImpl payService = new JCZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    @RequestMapping("/QYZFNotify.do")
    @ResponseBody
    public String QYZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "QYZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("orderNo");// 平台订单号
        String trade_no = request.getParameter("trxNo");// 平台订单号
        String trade_status = request.getParameter("tradeStatus");// 处理结果
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_QYZF)) {
                QYZFPayServiceImpl payService = new QYZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    
    @RequestMapping("/TXPNotify.do")
    @ResponseBody
    public String TXPNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "ok";// 成功返回success
        String clazz_name = "TXPNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("orderid");// 平台订单号
        String trade_no = request.getParameter("transaction_id");// 平台订单号
        String trade_status = request.getParameter("returncode");// 处理结果\
        String t_trade_status = "00";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TXP)) {
                TXPPayServiceImpl payService = new TXPPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 威尼斯娱乐城，智能云支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/ZNYNotify.do")
    @ResponseBody
    public String ZNYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "ZNYNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid");// 商户订单号
        String trade_no = infoMap.get("ordno");// 平台订单号
        String trade_status = "success";// 处理结果
        String t_trade_status = "success";// 表示成功状态
        String money_order = String.valueOf(infoMap.get("realprice"));
        if(StringUtils.isNullOrEmpty(money_order)){
            logger.info(clazz_name+"回到通知实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            //修改订单金额为实际支付金额
            rechargeOrderVO.setOrderAmount(Double.parseDouble(money_order));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TXP)) {
                TXPPayServiceImpl payService = new TXPPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 天下支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/TXZFNotify.do")
    @ResponseBody
    public String TXZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "TXZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("outTradeNo");// 商户订单号
        String trade_no = infoMap.get("trxNo");// 平台订单号
        String trade_status = infoMap.get("tradeStatus");// 处理结果
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TXZF)) {
                TXZFPayServiceImpl payService = new TXZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    
    /**
     * 华菱盛业支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/HLSYNotify.do")
    @ResponseBody
    public String HLSYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "HLSYNotify";
        logger.info(" ----------------------------- HLSYNotify.do start ------------------------------");
        byte[] decodeBase64 = HashUtil.decodeBase64(request.getParameter("message"));
        String message = new String(decodeBase64);
        String signature = request.getParameter("signature");
        logger.info("decodeBase64参数===>" + message);
        JSONObject reqJsonObj = JSONObject.fromObject(message);
        HashMap<String, String> map = JSONUtils.toHashMap(message);
        Map<String, String> infoMap = new TreeMap<String, String>();
        infoMap.putAll(map);
        infoMap.put("sign", signature);
        logger.info("请求参数===>" + infoMap.toString());
        Integer order_amount = reqJsonObj.getInt("amount");
        if(order_amount==0){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String order_no = infoMap.get("orderNo");// 商户订单号
        String trade_no = infoMap.get("trxorderNo");// 平台订单号
        String trade_status = infoMap.get("status");// 处理结果
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount.toString())/100);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_HLSY)) {
                HLSYPayServiceImpl payService = new HLSYPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 通宝付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/TBFNotify/bank.do")
    @ResponseBody
    public String TBFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "TBFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("order_no");// 商户订单号
        String trade_no = infoMap.get("trade_no");// 平台订单号
        String trade_status = infoMap.get("trade_status");// 处理结果
        String t_trade_status = "success";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TBF)) {
                TBFPayServiceImpl payService = new TBFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    
    /**
     * 速汇支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SHZFNotify.do")
    @ResponseBody
    public String SHZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "SHZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("order_no");// 商户订单号
        String trade_no = infoMap.get("trade_no");// 平台订单号
        String trade_status = infoMap.get("trade_status");// 处理结果
        String t_trade_status = "success";// 表示成功状态
        
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SHZF)) {
                SHZFPayServiceImpl payService = new SHZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 菲娱国际扫码支付NONAME
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/NONAMENotify.do")
    @ResponseBody
    public String NONAMENotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "{\"code\":\"00\"}";// 成功返回success
        String clazz_name = "NONAMENotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("outOrderId");// 商户订单号
        String trade_no = request.getParameter("instructCode");// 平台订单号
         String trade_status = "00";// 处理结果
        String t_trade_status = "00";// 表示成功状态
        String money_order = String.valueOf(infoMap.get("totalAmount"));
        if(StringUtils.isNullOrEmpty(money_order)){
            logger.info(clazz_name+"支付回调通知实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            //修改订单金额为实际支付金额
            rechargeOrderVO.setOrderAmount(Double.parseDouble(money_order));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_NONAME)) {
                NONAMEPayServiceImpl payService = new NONAMEPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 杉德支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SANDNotify.do")
    @ResponseBody
    public String SANDNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "SANDNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("orderCode");// 商户订单号
         String trade_no = System.currentTimeMillis()+"";// 平台订单号
        String trade_status = request.getParameter("orderStatus");// 处理结果
        String t_trade_status = "00";// 表示成功状态
        String money_order = String.valueOf(infoMap.get("amount"));
        if(StringUtils.isNullOrEmpty(money_order)){
            logger.info(clazz_name+"支付回调通知实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            //修改订单金额为实际支付金额
            rechargeOrderVO.setOrderAmount(Double.parseDouble(money_order));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SAND)) {
                SANDPayServiceImpl payService = new SANDPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * MO宝支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/MOBNotify.do")
    @ResponseBody
    public String MOBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";// 成功返回success
        String clazz_name = "MOBNotify";
        logger.info(" ----------------------------- MOBNotify.do start ------------------------------");
        Map<String, String> infoMap = new TreeMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数" + infoMap.toString());

        String order_no = null, trade_no = null, trade_status = null;
        String transChanlName = request.getParameter("transChanlName");
        // 银联扫码
        if ("0008".equals(transChanlName)) {
            order_no = request.getParameter("orderId");// 商户订单号
            trade_no = request.getParameter("ksPayOrderId");// 平台订单号
            trade_status = request.getParameter("refcode");// 处理结果
        }
        // 快捷
        else if ("UNIONPAY".equals(transChanlName)) {
            order_no = request.getParameter("orderId");// 商户订单号
            trade_no = request.getParameter("orderId");// 平台订单号
            trade_status = request.getParameter("payStatus");// 处理结果
        }
        String t_trade_status = "00";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_MOB)) {
                MOBPayServiceImpl payService = new MOBPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 店员通 智能云支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/DYTNotify.do")
    @ResponseBody
    public String DYTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "DYTNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("mchOrderNo");// 商户订单号
        String trade_no = request.getParameter("payOrderId");// 平台订单号
        String trade_status = request.getParameter("status");// 处理结果
        String t_trade_status = "2";// 表示成功状态
        String money_order = String.valueOf(infoMap.get("amount"));
        if(StringUtils.isNullOrEmpty(money_order)){
            logger.info(clazz_name+"支付回调通知实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            //修改订单金额为实际支付金额
            rechargeOrderVO.setOrderAmount(Double.parseDouble(money_order));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_DYT)) {
                DYTPayServiceImpl payService = new DYTPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 掌付支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/ZFZFNotify.do")
    @ResponseBody
    public String ZFZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "ZFZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("orderid");// 商户订单号
        String trade_no = System.currentTimeMillis()+"";// 平台订单号
        String trade_status = request.getParameter("result");// 处理结果
        String t_trade_status = "00";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_ZFZF)) {
                ZFZFPayServiceImpl payService = new ZFZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 免签支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/MQZFNotify.do")
    @ResponseBody
    public String MQZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";// 成功返回success
        String clazz_name = "MQZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("orderid");// 商户订单号
        String trade_no = request.getParameter("transaction_id");// 平台订单号
        String trade_status = request.getParameter("returncode");// 处理结果
        String t_trade_status = "00";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_MQZF)) {
                MQZFPayServiceImpl payService = new MQZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 闪亿付支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SYFZFNotify.do")
    @ResponseBody
    public String SYFZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "0";// 成功返回success
        String data = request.getParameter("data");
        String order_no = request.getParameter("orderNum");
        String clazz_name = "SYFZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------{}",order_no);
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            
            byte[] bytes = ToolKit.decryptByPrivateKey(HashUtil.decodeBase64(data), ToolKit.PRIVATE_KEY);
            String resultData = new String(bytes, ToolKit.CHARSET);// 解密数据
            JSONObject jsonObj = JSONObject.fromObject(resultData);
            Map<String, String> infoMap = MJFToolKit.json2Map(jsonObj);
            
            //=================================获取回调基本参数结果--START===========================//
            String trade_no = order_no;
            String trade_status = infoMap.get("payResult");
            String t_trade_status = "00";// 表示成功状态
            String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
            //=================================获取回调基本参数结果--END===========================//
            
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SYFZF)) {
                SYFZFPayServiceImpl payService = new SYFZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 全谷迪聊支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/QgdlNotify.do")
    @ResponseBody
    public String QgdlNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "QgdlNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("out_trade_no");// 商户订单号
        String trade_no = request.getParameter("out_trade_no");// 平台订单号
        String trade_status = request.getParameter("status");// 处理结果
        String t_trade_status = "0";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_QGDL)) {
                QGDLPayServiceImpl payService = new QGDLPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Description cpay支付回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/CPAYNotify.do")
    @ResponseBody
    public String CPAYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "CPAYNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("customno");// 平台订单号
        String trade_no = request.getParameter("orderno");// 平台订单号
        String trade_status = request.getParameter("status");// 处理结果
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_CPAY)) {
                CPAYPayServiceImpl payService = new CPAYPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 快捷付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/KjfNotify.do")
    @ResponseBody
    public String KjfNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "ok";// 成功返回success
        String clazz_name = "KjfNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String, String> infoMap = new TreeMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("OrderId");// 商户订单号
        String trade_no = request.getParameter("TransactionId");// 平台订单号
        String trade_status = request.getParameter("ErrCode");// 处理结果
        String t_trade_status = "0000";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_KFJ)) {
                KJFPayServiceImpl payService = new KJFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    @RequestMapping("/YHZFNotify.do")
    @ResponseBody
    public String YHZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "YHZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("order_id");// 平台订单号
        String trade_no = request.getParameter("out_transaction_id");// 平台订单号
        String trade_status = request.getParameter("pay_result");// 处理结果
        String t_trade_status = "0";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YHZF)) {
                YHZFPayServiceImpl payService = new YHZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 云付支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YFZFNotify.do")
    @ResponseBody
    public String YFZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "YFZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("orderNo");// 平台订单号
        String trade_no = request.getParameter("trxNo");// 交易平台编号
        String trade_status = request.getParameter("status");// 交易结果
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YFZF)) {
                YFZFPayServiceImpl payService = new YFZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 澳门金沙对接汇银付支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/HYFZFNotify.do")
    @ResponseBody
    public String HYFZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "HYFZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("order_no");// 平台订单号
        String trade_no = infoMap.get("trade_no");// 交易平台编号
        String trade_status = infoMap.get("trade_status");// 交易结果
        String t_trade_status = "1";// 表示成功状态
        String money_order = String.valueOf(infoMap.get("pay_amount"));
        if(StringUtils.isNullOrEmpty(money_order)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(money_order));//实际支付金额
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_HYFZF)) {
                HYFZFPayServiceImpl xxb = new HYFZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 咕啦支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/GlzfNotify.do")
    @ResponseBody
    public String GlzfNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "GlzfNotify";
        logger.info(" ----------------------------- GlzfNotify.do start ------------------------------");
        Map<String, String> infoMap = new TreeMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            String paraValue = request.getParameter(paraName).toString();
            try {
                paraValue = new String(paraValue.getBytes("ISO8859-1"), "UTF-8");
            } catch (UnsupportedEncodingException e) {
                logger.error(e.getMessage(), e);
            }

            infoMap.put(paraName, paraValue);
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("mch_order_no");// 商户订单号
        String trade_no = request.getParameter("trade_no");// 平台订单号
        String trade_status = request.getParameter("pay_status");// 处理结果
        String t_trade_status = "success";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_GLZF)) {
                GLZFPayServiceImpl payService = new GLZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 元潮支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YczfNotify.do")
    @ResponseBody
    public String YczfNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "YczfNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("TxSN");// 商户订单号
        String trade_no = request.getParameter("PlatTxSN");// 平台订单号
        String trade_status = request.getParameter("Status");// 处理结果
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YCZF)) {
                YCZFPayServiceImpl payService = new YCZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 连连支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/LLzfNotify.do")
    @ResponseBody
    public String LLzfNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String rtStr = "{\"ret_code\":\"0000\",\"ret_msg\":\"交易成功\"}";
        String ret__success = JSONObject.fromObject(rtStr).toString();// 成功返回success

        logger.info(" ----------------------------- LLzfNotify.do start ------------------------------");
        Map<String, String> infoMap = new TreeMap<String, String>();
        JSONObject jsonObject = null;
        try {
            String requestPostStr = RequestUtil.getRequestPostStr(request);
            jsonObject = JSONObject.fromObject(requestPostStr);
            infoMap = jsonObject;
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        if (jsonObject == null) {
            logger.error("连连支付回调异常请求");
            return ret__success;
        }
        logger.info("连连支付回调请求参数:{}", infoMap.toString());
        String order_no = jsonObject.getString("no_order");// 商户订单号
        String trade_no = jsonObject.getString("oid_paybill");// 平台订单号
        String trade_status = jsonObject.getString("result_pay");// 处理结果

        logger.info("LLzfNotify 连连支付回调开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("连连支付回调请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("LLzfNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("连连支付回调单据异常获取支付商信息失败!");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("连连支付回调order_no:{} 重复调用!",order_no);
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");
            String t_trade_status = "SUCCESS";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_LLZF)) {
                // 初始化数据
                logger.info("初始化参数成功:t_trade_status={}",t_trade_status);
                LLZFPayServiceImpl llzf = new LLZFPayServiceImpl(pmapsconfig);
                String rmsg = llzf.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info("LLzfNotify支付验签失败！");
                    return ret__success;
                }
                logger.info("LLzfNotify连连支付回调验签成功！");

                logger.info("连连支付回调修改订单:" + order_no + ",原金额金额为:" + String.valueOf(order.get("order_amount")) + " 修改金额为:"
                        + String.valueOf(infoMap.get("money_order")));
                // 这里以回调信息中的支付金额为准,修改订单金额;
                String money_order = String.valueOf(infoMap.get("money_order"));
                int count = userService.UpdateRechangeMoney(order_no, money_order);
                if (count < 0) {
                    return ret__success;
                }
                order.put("order_amount", money_order);
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("----------------------连连支付回调---网银支付--------------------------");
            String rt = SaveRechageProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("连连支付回调存储过程执行异常");
                return ret__success;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("[LLzfNotify]支付回调异常:{}",e.getMessage());
            return ret__success;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 融灿支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/RczfNotify.do")
    @ResponseBody
    public String RczfNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "RczfNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("orderNo");// 商户订单号
        String trade_no = request.getParameter("payOrderNo");// 平台订单号
        String trade_status = request.getParameter("orderStatus");// 处理结果
        String t_trade_status = "Success";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_RCZF)) {
                RCZFPayServiceImpl payService = new RCZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 兴付支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XfzfNotify.do")
    @ResponseBody
    public String XfzfNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "XfzfNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("outTradeNo");// 商户订单号
        String trade_no = System.currentTimeMillis()+"";// 平台订单号
        String trade_status = request.getParameter("status");// 处理结果
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XFZF)) {
                XFZFPayServiceImpl payService = new XFZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 咚咚支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/DDZFNotify.do")
    @ResponseBody
    public String DDZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "DDZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("orderNo");// 平台订单号
        String trade_no = request.getParameter("payId");// 平台订单号
        String trade_status = request.getParameter("respCode");// 处理结果
        String t_trade_status = "0000";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_DDZF)) {
                DDZFPayServiceImpl payService = new DDZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/WfzfNotify.do")
    @ResponseBody
    public String WFZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "WFZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("merchOrderId");// 平台订单号
        String trade_no = request.getParameter("orderId");// 平台订单号
        String trade_status = request.getParameter("status");// 处理结果
        String t_trade_status = "0";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_WFZF)) {
                WFZFPayServiceImpl payService = new WFZFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 轩辕支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YJNotify.do")
    @ResponseBody
    public String YJNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "YJNotify";
        Map<String, String> infoMap = new HashMap<>();
        try {
            String xmlString = XmlUtils.parseRequst(request);
            logger.info("请求的xml数据:" + xmlString);
            infoMap = XmlUtils.xmlStr2Map(xmlString);
            logger.info("请求xml2String" + infoMap.toString());
        } catch (Exception e) {
            logger.info("XML转换格式错误");
            return ret__success;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("spbillno");
        String trade_no = infoMap.get("transaction_id");
        String trade_status = infoMap.get("result");
        String t_trade_status = "1";// 1-处理成功
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YJ)) {
                YJPayServiceImpl payService = new YJPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 连云港
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/LYGNotify.do")
    @ResponseBody
    public String LYGNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "LYGNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("outTradeNo");// 平台订单号
        String trade_no = request.getParameter("trxNo");// 平台订单号
        String trade_status = request.getParameter("tradeStatus");// 处理结果
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_LYG)) {
                LYGPayServiceImpl payService = new LYGPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 明捷付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/MJFNotify.do")
    @ResponseBody
    public String MJFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "MJFNotify";
        String data = request.getParameter("data");
        String order_no = request.getParameter("orderNum");
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START==========================={}",order_no);
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            byte[] bytes = MJFToolKit.decryptByPrivateKey(new BASE64Decoder().decodeBuffer(data),
                    pmapsconfig.get("PRIVATE_KEY"));// 获取用户密钥
            String resultData = new String(bytes, MJFToolKit.CHARSET);// 解密数据
            JSONObject jsonObj = JSONObject.fromObject(resultData);
            Map<String, String> infoMap = MJFToolKit.json2Map(jsonObj);
            //=================================获取回调基本参数结果--START===========================//
            String trade_no = order_no;
            String trade_status = infoMap.get("payStateCode");
            String t_trade_status = "00";// 表示成功状态
            String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
            //=================================获取回调基本参数结果--END===========================//
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_MJF)) {
                MJFPayServiceImpl payService = new MJFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
        
    }

    /**
     * 轩辕支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XYNotify.do")
    @ResponseBody
    public String XYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "XYNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("merOrderNo");
        String trade_no = request.getParameter("payNo");
        String trade_status = request.getParameter("payStatus");
        String t_trade_status = "S";// S状态表示支付成功，B表示补单成功
        if ("S".equals(trade_status) || "B".equals(trade_status)) {
            t_trade_status = trade_status;// 表示成功状态
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XY)) {
                XYPayServiceImpl payService = new XYPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 银付支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YFNotify.do")
    @ResponseBody
    public String YFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "YFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("outerCode");
        String trade_no = request.getParameter("transactionId");
        String trade_status = request.getParameter("result");
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YF)) {
                YFPayServiceImpl payService = new YFPayServiceImpl(pmapsconfig);
                String rmsg = payService.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 天下支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/TXNotify.do")
    @ResponseBody
    public String TXHNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "TXHNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("merOrderNo");
        String trade_no = infoMap.get("payNo");
        String trade_status = infoMap.get("payStatus");
        String t_trade_status = "S";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TX)) {
                TXPayServiceImpl xxb = new TXPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 九域支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/JYNotify.do")
    @ResponseBody
    public String JYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";// 成功返回success
        String clazz_name = "JYNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
         //获取订单号
        String order_no = infoMap.get("orderid");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("transaction_id");
        String trade_status = infoMap.get("returncode");
        String t_trade_status = "00";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_JY)) {
                JYPayServiceImpl jy = new JYPayServiceImpl(pmapsconfig);
                String rmsg = jy.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 汇丰支付
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/HFNotify.do")
    @ResponseBody
    public String HFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "HFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("order_no");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("trade_no");
        String trade_status = infoMap.get("trade_status");
        String t_trade_status = "1";// 表示成功状态 1 成功 0失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_HF)) {
                HFPayServiceImpl hf = new HFPayServiceImpl(pmapsconfig);
                String rmsg = hf.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 易极付支付
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YJFNotify.do")
    @ResponseBody
    public String YJFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "{\"ret_code\":\"0000\",\"ret_msg\":\"交易成功\"}";// 成功返回json字符串
        String clazz_name = "YJFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("no_order");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("oid_paybill");
        String trade_status = infoMap.get("result_pay");
        String t_trade_status = "SUCCESS";// 表示成功状态 1 成功 0失败
        String order_amount = infoMap.get("money_order");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YJF)) {
                YJFPayServiceImpl yjf = new YJFPayServiceImpl(pmapsconfig);
                String rmsg = yjf.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 互联网支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/HLWNotify.do")
    @ResponseBody
    public String HLWNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回j
        String clazz_name = "HLWNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("prdOrdNo");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("payId");
        String trade_status = infoMap.get("orderStatus");
        String t_trade_status = "01";// 01 支付成功 00 未支付 02 支付处理中
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_HLW)) {
                HLWPayServiceImpl hlw = new HLWPayServiceImpl(pmapsconfig);
                String rmsg = hlw.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    /**
     * 金睿支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/JRZFNotify.do")
    @ResponseBody
    public String JRZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回j
        String clazz_name = "JRZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("orderNo");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("tradeSeq");
        String trade_status = infoMap.get("payResult");
        String t_trade_status = "1";// 1 支付成功
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_JRZF)) {
                JRZFPayServiceImpl jrzf = new JRZFPayServiceImpl(pmapsconfig);
                String rmsg = jrzf.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    /**
     * 发家支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/FJZFNotify.do")
    @ResponseBody
    public String FJZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回j
        String clazz_name = "FJZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("order_id");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("paysapi_id");
        String trade_status = infoMap.get("code");
        String t_trade_status = "1";// 0 未处理 1 交易成功 2 支付失败 3 关闭交易 4 支付超时
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_FJZF)) {
                FJZFPayServiceImpl fjzf = new FJZFPayServiceImpl(pmapsconfig);
                String rmsg = fjzf.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 虎云支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/HYZFNotify.do")
    @ResponseBody
    public String HYZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回
        String clazz_name = "HYZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("sdorderno");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("sdpayno");
        String trade_status = infoMap.get("status");
        String t_trade_status = "1";// 1:成功，其他失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_HYZF)) {
                HYZFPayServiceImpl hyzf = new HYZFPayServiceImpl(pmapsconfig);
                String rmsg = hyzf.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    /**
     * 踢踢支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/TITINotify.do")
    @ResponseBody
    public String TITINotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "{ code: 0, msg:\"success\"}";// 成功返回
        String clazz_name = "TITINotify";
        logger.info(clazz_name + "支付回调开始-----------------------------START------------------------------");
        Map<String, String> infoMap = ParamsUtils.getNotifyParams(request);
        if (infoMap == null || infoMap.isEmpty()) {
            logger.info(clazz_name + "支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name + "支付回调请求参数:{}", JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("tradeNo");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("dt");
        String trade_status = "1";
        String t_trade_status = "1";// 1:成功，其他失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request)) ? "127.0.0.1" : IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name + "支付回调订单号:{}重复调用", order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name + "执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if (rechargeOrderVO == null) {
                logger.info(clazz_name + "支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}", order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if (cagentYespayVO == null) {
                logger.info(clazz_name + "非法支付商ID,查询支付商信息失败,支付商ID:{}", payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String, String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name + "支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TITI)) {
                TITIPayServiceImpl titi = new TITIPayServiceImpl(pmapsconfig);
                String rmsg = titi.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name + "支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name + "支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name + "支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name + "支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if (ResultResponse.SUCCESS_CODE.equals(result)) {
                logger.info(clazz_name + "支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name + "支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name + "支付回调业务处理异常:{}", e.getMessage());
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name + "支付回调业务处理成功,删除缓存中的订单KEY:{}", order_no);
                payMap.remove(order_no);
            }
        }
    }
  /**
     * 踢踢支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/TT2Notify.do")
    @ResponseBody
    public String TT2Notify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "{ code: 0, msg:\"success\"}";// 成功返回
        String clazz_name = "TT2Notify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("tradeNo");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("dt");
        String trade_status = "1";
        String t_trade_status = "1";// 1:成功，其他失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        String order_amount = infoMap.get("money");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return "{ code: 1, msg:\"fail,money is null\"}";
        }
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TT2)) {
                TT2PayServiceImpl titi2 = new TT2PayServiceImpl(pmapsconfig);
                String rmsg = titi2.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
     /**
     * 云商支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YUNSNotify.do")
    @ResponseBody
    public String YUNSNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";// 成功返回json字符串
        String clazz_name = "YUNSNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("orderid");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("platform_trade_no");
        String trade_status = "SUCCESS";  //云商支付回调中没有表示成功状态的字段，默认成功
        String t_trade_status = "SUCCESS";// 表示成功状态 1 成功 0失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YUNS)) {
                YUNSPayServiceImpl yuns = new YUNSPayServiceImpl(pmapsconfig);
                String rmsg = yuns.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
         /**
     * 摩通支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/MTNotify.do")
    @ResponseBody
    public String MTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";// 成功返回json字符串
        String clazz_name = "MTNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("sdorderno");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("sdpayno");
        String trade_status = infoMap.get("status");
        String t_trade_status = "1";// 表示成功状态 1 成功 其他失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_MT)) {
                MTPayServiceImpl mt = new MTPayServiceImpl(pmapsconfig);
                String rmsg = mt.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 荣亿付支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/RYFNotify.do")
    @ResponseBody
    public String RYFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回json字符串
        String clazz_name = "RYFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("traceno");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("orderno");
        String trade_status = infoMap.get("status");
        String t_trade_status = "1";// 表示成功状态 1 成功 其他失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_RYF)) {
                RYFPayServiceImpl ryf = new RYFPayServiceImpl(pmapsconfig);
                String rmsg = ryf.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 爱农支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/ANNotify.do")
    @ResponseBody
    public String ANNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "ANNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("merOrderId");
        String trade_no = request.getParameter("merOrderId");
        String trade_status = request.getParameter("respCode");
        String t_trade_status = "1001";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_AN)) {
                ANPayServiceImpl xxb = new ANPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 云聚合支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YJHNotify.do")
    @ResponseBody
    public String YJHNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "YJHNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("outTradeNo");
        String trade_no = request.getParameter("payId");
        String trade_status = request.getParameter("payStatus");
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YJH)) {
                YJHPayServiceImpl xxb = new YJHPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    

    @RequestMapping("/YLXNotify.do")
    @ResponseBody
    public String YLXNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "YLXNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("mch_order_no");
        String trade_no = request.getParameter("trade_no");
        String trade_status = request.getParameter("pay_status");
        String t_trade_status = "success";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YLX)) {
                YLXPayServiceImpl xxb = new YLXPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 速付支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SFNotify.do")
    @ResponseBody
    public String SFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "SFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("order_no");
        String trade_no = request.getParameter("trade_no");
        String trade_status = request.getParameter("trade_status");
        String t_trade_status = "success";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SF)) {
                //订单支付渠道
                String payType = String.valueOf(rechargeOrderVO.getPayType());
                if(PayConstant.CHANEL_ALI.equals(payType)){
                    payType = PayConstant.CONSTANT_ALI;//支付宝
                }else if(PayConstant.CHANEL_WX.equals(payType)){
                    payType = PayConstant.CONSTANT_WX;//微信
                }else if(PayConstant.CHANEL_YL.equals(payType)){
                    payType = PayConstant.CONSTANT_YL;//银联支付
                }else if(PayConstant.CHANEL_CFT.equals(payType)){
                    payType = PayConstant.CONSTANT_CFT;//支付宝
                }else if(PayConstant.CHANEL_JD.equals(payType)){
                    payType = PayConstant.CONSTANT_JD;//支付宝
                }else if(PayConstant.CHANEL_KJ.equals(payType)){
                    payType = PayConstant.CONSTANT_WXTM;//支付宝
                }else if(PayConstant.CHANEL_WXTM.equals(payType)){
                    payType = PayConstant.CONSTANT_WXTM;//支付宝
                }else if(PayConstant.CHANEL_ALITM.equals(payType)){
                    payType = PayConstant.CONSTANT_ALITM;//支付宝
                }else if("1".equals(payType)){
                    payType = "bank"; 
                }else{
                    logger.error(clazz_name+"支付回调验签类型匹配异常");
                    return ret_str_success;
                }
                SFPayServiceImpl xxb = new SFPayServiceImpl(pmapsconfig,payType);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    
    
    
    @RequestMapping("/DDSMNotify.do")
    @ResponseBody
    public String DDSMNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "DDWAPNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("out_trade_no");
        String trade_no = request.getParameter("trade_no");
        String trade_status = request.getParameter("pay_status");
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_DD)) {
                DDPayServiceImpl xxb = new DDPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    @RequestMapping("/DDWAPNotify.do")
    @ResponseBody
    public String DDWAPNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "DDWAPNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("out_trade_no");
        String trade_no = request.getParameter("trade_no");
        String trade_status = request.getParameter("trade_result");
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_DD)) {
                DDPayServiceImpl xxb = new DDPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    @RequestMapping("/DDWYNotify.do")
    @ResponseBody
    public String DDWYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "DDWYNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("order_sn");
        String trade_no = request.getParameter("out_order_sn");
        String trade_status = request.getParameter("pay_status");
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_DD)) {
                DDPayServiceImpl xxb = new DDPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 银邦支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YBNotify.do")
    @ResponseBody
    public String YBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {

        String encParam = request.getParameter("encParam");
        String merId = request.getParameter("merId");
        String version = request.getParameter("version");
        String sign = request.getParameter("sign");
        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数:" + JSONUtils.toJSONString(infoMap));

        ret_str_success = "SUCCESS";
        String[] requesParams = new String[] {"encParam", "merId", "version", "sign" };
        for (int i = 0; i < requesParams.length; i++) {
            if (StringUtils.isNullOrEmpty(requesParams[i])) {
                logger.info("请求参数不能为空");
                return ret_str_success;
            }
        }
        Properties pro = new Properties();
        InputStream in;
        String serverPublicKey = "";
        String privateKey = "";
        boolean flag = false;
        try {
            JSONObject obj = getPublicKey(merId, "YB");
            serverPublicKey = obj.getString("serverPublicKey");
            privateKey = obj.getString("privateKey");
            // 验签
            flag = SecurityRSAPay.verify(Base64Local.decode(encParam), Base64Local.decode(serverPublicKey),
                    Base64Local.decode(sign));
        } catch (Exception e) {
            logger.info("读取属性文件错误");
        }

        if (!flag) {
            // 验签失败
            logger.info("验签失败");
            return ret_str_success;
        }
        // 解密参数
        String respData = new String(
                SecurityRSAPay.decryptByPrivateKey(Base64Local.decode(encParam), Base64Local.decode(privateKey)));

        try {
            respData = new String(respData.getBytes("gbk"), "utf-8");
        } catch (UnsupportedEncodingException e1) {
            logger.info("编码错误:" + respData);
            e1.printStackTrace();
        }
        logger.info("解密请求参数:" + respData);

        Map<String, String> map1 = new HashMap<String, String>();
        map1 = GsonUtil.fromJson(respData, Map.class);

        String respCode = map1.get("respCode"); // 返回码返回1000表示成功。当dq_code为1000时，订单状态才有效。
        String order_no = map1.get("orderId"); // 商户订单号 字符串 商户订单号
        String trade_no = map1.get("payOrderId"); // 支付订单号 字符串 支付订单号
        String trade_status = map1.get("order_state"); // 订单状态
        String money = map1.get("money"); // 交易金额
        String payReturnTime = map1.get("payReturnTime"); // 付款时间
        String selfParam = map1.get("selfParam"); // 自定义参数
        String payType = map1.get("payType");// 支付方式
        String payTypeDesc = map1.get("payTypeDesc"); // 支付方式描述
        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret_str_success;
        }
        payMap.put(order_no, "1");
        try {
            logger.info("解密业务参数:" + map1.toString());

            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request));
            fileMap.put("requestParams", JSONUtils.toJSONString(map1));
            f.setLog("YBNotify", fileMap);

            // 验证参数
            if ("".equals(order_no) || null == order_no || "".equals(trade_no) || null == trade_no) {
                logger.info("验证参数错误");
                return ret_str_success;
            }
            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("单据不存在,直接返回");
                return ret_str_success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret_str_success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId, uid);
            if (plist.size() > 0) {
            } else {
                logger.info("单据不存在,直接返回");
                return ret_str_success;
            }

            // // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // // 支付商
            String paymentName = hsConfigMap.get("payment_name").toString();
            logger.info("用户支付商为:" + paymentName);

            if (null == paymentName || "".equals(paymentName)) {
                logger.info("用户支付商不存在:" + paymentName);
                return ret_str_success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);
            //
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_YB)) {
                // 初始化数据
                t_trade_status = "1003";
                ret_str_success = "SUCCESS";
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status + "  t_trade_status" + ret_str_success);
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret_str_success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            Map<String, String[]> errorMap = new HashMap<String, String[]>();
            cmap.put("params", JSONObject.fromObject(map1).toString());
            cmap.put("ip", IPTools.getIp(request));
            cmap.put("status", ret_str_success);
            userService.InsertCallbacklog(cmap);
            logger.info("回调记录保存成功!");

            try {
                logger.info("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret_str_success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);
                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");
                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            logger.info("执行存储过程失败!");
                            return ret_str_success;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret_str_success;
                    }
                    logger.info("UID : " + uid);
                    logger.info("Username : " + jmap.getString("username"));
                    logger.info("order : " + jo);
                    logger.info("amt : " + amt);
                    logger.info("dml : " + dml);
                    logger.info("cj : " + cj);
                    logger.info("------------------订单完成----------------------");
                } else {
                    logger.info("回调成功，修改记录");
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("数据处理异常");
                return ret_str_success;

            }
            logger.info("回调成功！");
            return ret_str_success;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("[YBNotify]支付回调异常:{}",e.getMessage());
            return ret_str_success;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 智通宝支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/ZTBNotify.do")
    @ResponseBody
    public String ZTBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "ZTBNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("order_no");
        String trade_no = request.getParameter("trade_no");
        String trade_status = request.getParameter("trade_status");
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_ZTB)) {
                ZTBPayServiceImpl xxb = new ZTBPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 畅支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/CZFNotify.do")
    @ResponseBody
    public String CZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "CZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("mch_order");
        String trade_no = request.getParameter("mch_order");
        String trade_status = request.getParameter("status");
        String t_trade_status = "2";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_CZF)) {
                CZFPayServiceImpl xxb = new CZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 佰富回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/BFNotify.do")
    @ResponseBody
    public String BFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "000000";
        String clazz_name = "BFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        String data = request.getParameter("paramData");
        JSONObject jsonObj = JSONObject.fromObject(data);
        String order_no = jsonObj.getString("orderNum");// 平台订单号
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            Map<String, String> metaSignMaP = new TreeMap<String, String>();
            metaSignMaP.put("merchantNo", jsonObj.getString("merchantNo"));
            metaSignMaP.put("netwayCode", jsonObj.getString("netwayCode"));
            metaSignMaP.put("orderNum", jsonObj.getString("orderNum"));
            metaSignMaP.put("payAmount", jsonObj.getString("payAmount"));
            metaSignMaP.put("goodsName", jsonObj.getString("goodsName"));
            metaSignMaP.put("resultCode", jsonObj.getString("resultCode"));// 支付状态
            metaSignMaP.put("payDate", jsonObj.getString("payDate"));
            
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, metaSignMaP, IPTools.getIp(request));
            String trade_no = metaSignMaP.get("orderNum");// 平台订单号
            String trade_status = metaSignMaP.get("resultCode");// 处理结果
            String t_trade_status = "00";// 表示成功状态
            String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
            //=================================获取回调基本参数结果--END===========================//
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(metaSignMaP).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_BF)) {
                String jsonStr = JSONObject.fromObject(metaSignMaP).toString();
                JSONObject merchant = getPublicKey(jsonObj.getString("merchantNo"));
                logger.info("加密前字符串:" + jsonStr + merchant.getString("key"));
                String sign = ToolKit.MD5(jsonStr.toString() + merchant.getString("key"), "UTF-8");
                logger.info("本地sign:" + sign + "     服务器sign:" + jsonObj.getString("sign"));
                if (!sign.equals(jsonObj.getString("sign"))) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"签名校验成功");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 仁信支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/RXNotify.do")
    @ResponseBody
    public String RXNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "ok";// 成功返回success
        String clazz_name = "RXNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("ordernumber");
        String trade_no = request.getParameter("sysnumber");
        String trade_status = request.getParameter("orderstatus");
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_RX)) {
                RXPayServiceImpl xxb = new RXPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 天下科技支付回调
     * 
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/TXKJNotify.do")
    @ResponseBody
    public String TXKJNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "TXKJNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("mer_order_no");
        String trade_no = request.getParameter("order_no");
        String trade_status = request.getParameter("trade_result");
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TXKJ)) {
                TXKJPayServiceImpl xxb = new TXKJPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Title: WTNotify @Description: 万通支付回调 @param: @param request @param: @param response @param: @return @return:
     *         String @throws
     */
    @RequestMapping("/WTNotify.do")
    @ResponseBody
    public String WTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "WTNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid") + "";// 商户订单号
        /** 升级之前流水号为【out_order_id】 */
        // String trade_no = jsonObject.getString("out_order_id");// 平台订单号
        /** 升级之后流水号字段改为【transid】 */
        String trade_no = infoMap.get("transid") + "";// 平台订单号
        String trade_status = infoMap.get("status") + "";// 订单支付状态 1 未支付 2 已支付
        String t_trade_status = "2";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_WT)) {
                WTPayServiceImpl xxb = new WTPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Title: LXZFNotify @Description:联行支付回调 @param: @param request @param: @param response @param: @param
     *         session @param: @return @return: String @throws
     */
    @RequestMapping("/LXZFNotify.do")
    @ResponseBody
    public String LXZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "notify_success";// 成功返回success
        String clazz_name = "DAFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = request.getParameter("dealOrder");
        String trade_no = System.currentTimeMillis()+"";
        String trade_status = request.getParameter("dealState");
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_LXZF)) {
                LXZFPayServiceImpl xxb = new LXZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    @RequestMapping("/LXZFDFNotify.do")
    @ResponseBody
    public String LXZFDFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "notify_success";// 成功返回success
        // TODO 其他业务等待.....
        return ret__success;
    }

    
    /**
     * 
     * @Description BFB支付回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/BFBNotify.do")
    @ResponseBody
    public String BFBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 必付宝回调应答结果
        String clazz_name = "BFBNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("TRAN_CODE");// 商户订单号
        String trade_no = infoMap.get("SYS_CODE");// 平台订单号
        String trade_status = infoMap.get("STATUS");//支付状态
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_BFB)) {
                //订单支付渠道
                String payType = String.valueOf(rechargeOrderVO.getPayType());
                if(PayConstant.CHANEL_ALI.equals(payType)){
                    payType = PayConstant.CONSTANT_ALI;//支付宝
                }else if(PayConstant.CHANEL_WX.equals(payType)){
                    payType = PayConstant.CONSTANT_WX;//微信
                }else if(PayConstant.CHANEL_YL.equals(payType)){
                    payType = PayConstant.CONSTANT_YL;//银联支付
                }else if(PayConstant.CHANEL_CFT.equals(payType)){
                    payType = PayConstant.CONSTANT_CFT;//支付宝
                }else if(PayConstant.CHANEL_JD.equals(payType)){
                    payType = PayConstant.CONSTANT_JD;//支付宝
                }else if(PayConstant.CHANEL_KJ.equals(payType)){
                    payType = PayConstant.CONSTANT_WXTM;//支付宝
                }else if(PayConstant.CHANEL_WXTM.equals(payType)){
                    payType = PayConstant.CONSTANT_WXTM;//支付宝
                }else if(PayConstant.CHANEL_ALITM.equals(payType)){
                    payType = PayConstant.CONSTANT_ALITM;//支付宝
                }else if("1".equals(payType)){
                    payType = "bank"; 
                }else{
                    logger.error(clazz_name+"支付回调验签类型匹配异常");
                    return ret_str_success;
                }
                BFBPayServiceImpl xxb = new BFBPayServiceImpl(pmapsconfig,payType);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Title: SLNotify @Description: SL随乐支付支付回调 @param: @param request @param: @param response @param: @param
     *         session @param: @return @return: String @throws
     */
    @RequestMapping("/SLNotify.do")
    @ResponseBody
    public String SLNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        logger.info("SL随乐支付回调通知发起========================start=====================================");
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "SLNotify";
        // 从流里面过去请求参数
        InputStream is = null;
        // 取得通知信息
        String notifyXmlStr = null;
        try {
            StringBuffer sb = new StringBuffer();
            is = request.getInputStream();
            byte[] b = new byte[1024];
            int len = -1;
            while ((len = is.read(b)) != -1) {
                sb.append(new String(b, 0, len, "utf-8"));
            }
            notifyXmlStr = sb.toString();
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("{SLNotify}获取回调通知信息异常:" + e.getMessage());
            return ret_str_failed;
        }

        if (StringUtils.isNullOrEmpty(notifyXmlStr)) {
            logger.info("{SLNotify}获取回调通知信息失败!");
            return ret_str_failed;
        }

        // xml转换成支付通知响应
        Map<String, String> infoMap = null;
        try {
            String [] e = Tools.split(notifyXmlStr, "|");
            String responseSrc = e[0];
            String xmlStr = new String(Base64.decode(responseSrc),"UTF-8");
            infoMap = XmlUtil.formatXmlStr(xmlStr);
            if(infoMap == null || infoMap.isEmpty()){
                logger.info("{SLNotify}获取回调请求参数失败!");
                return ret_str_failed;
            }
            logger.info("{SLNotify}支付回调请求参数" + infoMap.toString());
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("{SLNotify}支付回调参数xml转换异常!!"+e.getMessage());
            return ret_str_failed;
        }
        
        //验单
        //获取订单号
        String order_no = null;
        if(infoMap.containsKey("merchantOrderId")){
            order_no = infoMap.get("merchantOrderId");
        }
        //流水号，第三方支付订单号
        String trade_no = null;
        String trade_status = null;
        try {
            if(infoMap.containsKey("deductList")){
                List deductList = JSONArray.parseArray(infoMap.get("deductList"),Map.class);
                if(deductList != null && deductList.size() > 0){
                    Map<String,String> deductMap = (Map<String, String>) deductList.get(0);
                    if(deductMap.containsKey("payOrderId")){
                        trade_no = deductMap.get("payOrderId");
                        trade_status = deductMap.get("payStatus");
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("{SLNotify}支付回调获取流水号,支付状态异常!"+e.getMessage());
            return ret_str_failed;
        }
        String t_trade_status = "01";// 表示成功状态
        logger.info("{SLNotify}支付回调开始调用==============================start===============================");
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SL)) {
                SLPayServiceImpl xxb = new SLPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Description 千应支付回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/QIANYINGNotify.do")
    @ResponseBody
    public String QIANYINGNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "QIANYINGNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("oid");
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("oidPay");
        String trade_status = infoMap.get("status");
        String order_amount = infoMap.get("m");
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_QIANYING)) {
                QIANYINGPayServiceImpl xxb = new QIANYINGPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Description 安稳付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/AWNotify.do")
    @ResponseBody
    public String AWNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "ok";// 成功返回success
        String clazz_name = "AWNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid");
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("transaction_id");
        String trade_status = infoMap.get("returncode");
        String t_trade_status = "00";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_AW)) {
                AWPayServiceImpl xxb = new AWPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XYFNotify.do")
    @ResponseBody
    public String XYFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK"; //成功返回success
        String clazz_name = "XYFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String, String> infoMap = new HashMap<String, String>();
        //解析异步回调参数
        try {
            String reqParams = request.getParameter("linktext");
            if(StringUtils.isNullOrEmpty(reqParams)){
                logger.error(clazz_name+"支付回调参数不能为空!");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调请求参数:"+reqParams);
            //对新易付传过来的参数进行解密
            String params = new String(new Base64().decode(reqParams),"UTF-8");
            logger.info(clazz_name+"支付回调解密之后参数:"+params);
            //分割参数字符创 
            String[] paramArr = params.split("&");
            if(paramArr!= null && paramArr.length > 0){
                for (int i = 0; i < paramArr.length; i++) {
                    String key = paramArr[i].split("=")[0].toString();
                    String val = paramArr[i].split("=")[1].toString();
                    infoMap.put(key, val);
                }
            }
            if(infoMap == null || infoMap.isEmpty()){
                logger.info(clazz_name+"支付回调参数失败!");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调解析之后的请求参数:"+JSONObject.fromObject(infoMap).toString());
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调解析请求参数异常:"+e.getMessage());
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_amount = infoMap.get("paymoney");//实际支付金额  单位：元
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String order_no = infoMap.get("usernumber");//订单号
        //流水号，第三方支付订单号
        String trade_no = "XYF"+System.currentTimeMillis();
        String trade_status = infoMap.get("orderstatus");
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XYF)) {
                XYFPayServiceImpl xxb = new XYFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * @Description 大富回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/DAFNotify.do")
    @ResponseBody
    public String DAFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK"; //成功返回success
        String clazz_name = "DAFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("transaction_id");//流水号
        String trade_status = infoMap.get("returncode");
        String t_trade_status = "00";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_DAF)) {
                DAFPayServiceImpl xxb = new DAFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Description 信付宝支付回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XFBNotify.do")
    @ResponseBody
    public String XFBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success"; //成功返回success
        String clazz_name = "XFBNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("fxddh");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("fxorder");//流水号
        String trade_status = infoMap.get("fxstatus");
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XFB)) {
                XFBPayServiceImpl xxb = new XFBPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Description 新万通回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/NWTNotify.do")
    @ResponseBody
    public String NWTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "ok"; //成功返回success
        String clazz_name = "NWTNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("Sjt_OderId");//订单号
        logger.info("{NWTNotify}订单号:[order_no="+order_no+"]");
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("Sjt_TransID");//流水号
        logger.info("{NWTNotify}流水号:[trade_no="+trade_no+"]");
        String trade_status = infoMap.get("Sjt_Return");
        logger.info("{NWTNotify}交易状态:[trade_status="+trade_status+"]");
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_NWT)) {
                NWTPayServiceImpl xxb = new NWTPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Description 百盛支付回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/BSNotify.do")
    @ResponseBody
    public String BSNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "200";// 成功返回200
        String clazz_name = "BSNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        if(infoMap.containsKey("code") || !"200".equals(infoMap.get("Code"))){
            logger.error("[BSNotify]百盛支付回调失败");
            return ret_str_failed;
        }
        
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("OutPaymentNo");// 平台订单号
        String trade_no = infoMap.get("PaymentNo");// 平台订单号
        String trade_status = infoMap.get("PaymentState");
        String t_trade_status = "S";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_BS)) {
                BSPayServiceImpl xxb = new BSPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Description 商入宝支付回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SRBNotify.do")
    @ResponseBody
    public String SRBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "200";// 成功返回200
        String clazz_name = "SRBNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid");// 平台订单号
        String trade_no = infoMap.get("paysapi_id");// 平台订单号
        String trade_status = "success";// 回调没有支付状态，能回调就是支付过的
        String t_trade_status = "success";// 表示成功状态
        String order_amount = infoMap.get("realprice");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SRB)) {
                SRBPayServiceImpl xxb = new SRBPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Description 悟空支付回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/WKNotify.do")
    @ResponseBody
    public String WKNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "true";// 成功返回true
        String clazz_name = "WKNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderNo");// 订单号
        String trade_no = System.currentTimeMillis() + "";// 流水号
        boolean status = Boolean.parseBoolean(infoMap.get("success"));// 是否支付成功(布尔型：true或false)
        String trade_status = "false";
        if (status) {
            trade_status = "true";
        }
        String t_trade_status = "true";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_WK)) {
                //订单支付渠道
                String payType = String.valueOf(rechargeOrderVO.getPayType());
                if(PayConstant.CHANEL_ALI.equals(payType)){
                    payType = PayConstant.CONSTANT_ALI;//支付宝
                }else if(PayConstant.CHANEL_WX.equals(payType)){
                    payType = PayConstant.CONSTANT_WX;//微信
                }else if(PayConstant.CHANEL_YL.equals(payType)){
                    payType = PayConstant.CONSTANT_YL;//银联支付
                }else if(PayConstant.CHANEL_CFT.equals(payType)){
                    payType = PayConstant.CONSTANT_CFT;//支付宝
                }else if(PayConstant.CHANEL_JD.equals(payType)){
                    payType = PayConstant.CONSTANT_JD;//支付宝
                }else if(PayConstant.CHANEL_KJ.equals(payType)){
                    payType = PayConstant.CONSTANT_WXTM;//支付宝
                }else if(PayConstant.CHANEL_WXTM.equals(payType)){
                    payType = PayConstant.CONSTANT_WXTM;//支付宝
                }else if(PayConstant.CHANEL_ALITM.equals(payType)){
                    payType = PayConstant.CONSTANT_ALITM;//支付宝
                }else if("1".equals(payType)){
                    payType = "bank"; 
                }else{
                    logger.error(clazz_name+"支付回调验签类型匹配异常");
                    return ret_str_success;
                }
                WKPayServiceImpl xxb = new WKPayServiceImpl(pmapsconfig,payType);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * @Description 信通支付
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XTNotify.do")
    @ResponseBody
    public String XTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "XTNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("r6_Order");// 平台订单号
        String trade_no = infoMap.get("r2_TrxId");// 平台订单号
        String trade_status = infoMap.get("r1_Code");// 支付状态码,1：成功，4：失败
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XT)) {
                XTPayServiceImpl xxb = new XTPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * @Description 91免签支付
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/NOMQNotify.do")
    @ResponseBody
    public String NOMQNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";// 成功返回success
        String clazz_name = "NOMQNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid");// 平台订单号
        String trade_no = infoMap.get("transaction_id");// 平台订单号
        String trade_status = infoMap.get("returncode");// 支付状态码,00：成功，
        String t_trade_status = "00";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_NOMQ)) {
                NOMQPayServiceImpl xxb = new NOMQPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 北京易迅支付
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/BJYXNotify.do")
    @ResponseBody
    public String BJYXNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "BJYXNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("sdorderno");// 平台订单号
        String trade_no = infoMap.get("sdpayno");// 平台订单号
        String trade_status = infoMap.get("status");// 1:成功，其他失败
        String t_trade_status = "1";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_BJYX)) {
                BJYXPayServiceImpl xxb = new BJYXPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 易支付回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YIZFNotify.do")
    @ResponseBody
    public String YIZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "YIZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("order_id");// 平台订单号
        String trade_no = infoMap.get("pay_num");// 平台订单号
        String trade_status = infoMap.get("code");// 1:成功，其他失败
        String t_trade_status = "0000";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YIZF)) {
                YIZFPayServiceImpl xxb = new YIZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 山竹支付回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SZNotify.do")
    @ResponseBody
    public String SZNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "SZNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = infoMap.get("transaction_id");// 平台订单号
        String trade_status = infoMap.get("payment_status");// SUCCESS为支付成功，CLOSED 为支付失败，NOT_PAY 为未支付，UNKNOWN 为未知错误
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SZ)) {
                SZPayServiceImpl xxb = new SZPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 宝来支付回调
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/BLNotify.do")
    @ResponseBody
    public String BLNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name="BLNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 商户订单号
        String trade_no = infoMap.get("plat_trade_no");// 宝来订单号
        String trade_status = "SUCCESS";
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_BL)) {
                BLPayServiceImpl xxb = new BLPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 兄弟支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XDNotify.do")
    @ResponseBody
    public String XDNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "00000";// 成功返回success
        String clazz_name = "XDNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderNo");// 平台订单号
        String trade_no = System.currentTimeMillis()+"";// 平台订单号
        String trade_status = infoMap.get("code");//00000:支付成功，其他支付失败
        String t_trade_status = "00000";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XD)) {
                XDPayServiceImpl xxb = new XDPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 阿里宝盒支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/ABHNotify.do")
    @ResponseBody
    public String ABHNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "FS";// 成功返回success
        String clazz_name = "ABHNotify";
        logger.info(clazz_name+"支付回调开始----------------------------START------------------------------");
        //获取回调请求参数
        String reqData = request.getParameter("data");
        if(StringUtils.isNullOrEmpty(reqData)){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调获取请求参数密文:"+reqData);
        //解密回调请求参数
        try {
            reqData = DESUtils.decryp(URLDecoder.decode(reqData, "UTF-8"));
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(clazz_name+"支付回调解密回调请求参数异常:"+e.getMessage());
            return ret_str_failed;
        }
        if(StringUtils.isNullOrEmpty(reqData)){
            logger.error(clazz_name+"支付回到解密异常!");
            return ret_str_failed;
        }
        Map<String, String> infoMap = new HashMap<>();
        //解析回调参数
        JSONObject jsonData = JSONObject.fromObject(reqData);
        //重组回调请求参数
        if(jsonData != null && !jsonData.isEmpty()){
            Iterator<String> iterator = jsonData.keys();
            while(iterator.hasNext()){
                String key = iterator.next();
                String val = jsonData.getString(key);
                infoMap.put(key, val);
            }
        }
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderId");// 平台订单号
        String trade_no = infoMap.get("flowId");// 平台订单号
        String trade_status = infoMap.get("transCode");//00表示成功FF失败其他处理中
        String t_trade_status = "00";// 表示成功状态
        String order_amount = infoMap.get("transAmt");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        double money = Double.valueOf(order_amount)/100;//回调，以 分为单位,需要除以 100
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(money);
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_ABH)) {
                ABHPayServiceImpl xxb = new ABHPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 易发支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YIFANotify.do")
    @ResponseBody
    public String YIFANotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "YIFANotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("shop_no");// 平台订单号
        String trade_no = infoMap.get("trade_no");// 平台订单号
        String trade_status = infoMap.get("status");//0:支付成功，其他支付失败
        String t_trade_status = "0";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YIFA)) {
                YIFAPayServiceImpl xxb = new YIFAPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 财富支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/CFZFNotify.do")
    @ResponseBody
    public String CFZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "CFZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("trade_out_no");// 平台订单号
        String trade_no = infoMap.get("pay_sn");// 平台订单号
        String trade_status = infoMap.get("error");//0 为成功 -1为付款失败
        String t_trade_status = "0";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_CFZF)) {
                CFZFPayServiceImpl xxb = new CFZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 财富微支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/CFWNotify.do")
    @ResponseBody
    public String CFWNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "CFWNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("shop_no");// 平台订单号
        String trade_no = infoMap.get("trade_no");// 平台订单号
        String trade_status = infoMap.get("status");//0:支付成功，其他支付失败
        String t_trade_status = "0";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_CFW)) {
                CFWPayServiceImpl xxb = new CFWPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 得到支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/DEDNotify.do")
    @ResponseBody
    public String DEDNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "DEDNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = infoMap.get("trade_no");// 平台订单号
        String trade_status = infoMap.get("result_code");//SUCCESS:支付成功，其他支付失败
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_DED)) {
                DEDPayServiceImpl xxb = new DEDPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 惠拉付支付
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/HLFNotify.do")
    @ResponseBody
    public String HLFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";// 成功返回success
        String clazz_name = "HLFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("merchant_order_number");// 平台订单号
        String trade_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_status = infoMap.get("state");//支付状态（0成功 其他失败
        String t_trade_status = "0";// 【1代表支付成功】
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_HLF)) {
                HLFPayServiceImpl xxb = new HLFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 中富通支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YBTNotify.do")
    @ResponseBody
    public String YBTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "YBTNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderNum");// 平台订单号
        String trade_no = infoMap.get("nonce_str");// 平台订单号
        String trade_status = infoMap.get("orderStatus");//订单状态，“SUCCESS”为成功，其他失败
        String t_trade_status = "SUCCESS";// 【1代表支付成功】
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YBT)) {
                YBTPayServiceImpl xxb = new YBTPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 收盈宝支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SYBNotify.do")
    @ResponseBody
    public String SYBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "SYBNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("fxddh");// 平台订单号
        String trade_no = infoMap.get("fxorder");// 平台订单号
        String trade_status = infoMap.get("fxstatus");//订单状态，“1”为成功，其他失败
        String t_trade_status = "1";// 【1代表支付成功】
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SYB)) {
                SYBPayServiceImpl xxb = new SYBPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 易智支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YIZHINotify.do")
    @ResponseBody
    public String YIZHINotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "ok";// 成功返回ok
        String clazz_name = "YIZHINotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("ordernumber");// 平台订单号
        String trade_no = infoMap.get("sysnumber");//流水号
        String trade_status = infoMap.get("orderstatus");//订单状态，1:支付成功，非1为支付失败
        String t_trade_status = "1";//1:支付成功，非1为支付失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YIZHI)) {
                YIZHIPayServiceImpl xxb = new YIZHIPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * @Description 信誉支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping(value="/XYZNotify.do",produces={"application/xml;charset=UTF-8"})
    @ResponseBody
    public String XYZNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success
        String clazz_name = "XYZNotify信誉支付回调";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = new HashMap<String,String>();
        try{
            String str = HttpUtil.getRequestBody(request);

            logger.info("回调函数获取的参数: " + str);
            infoMap = XMLUtils.formatXMlToMap(str);
        }catch(Exception e){
            e.printStackTrace();
            logger.error("[XYZNotify]信誉支付回调获取请求参数异常:{}",e.getMessage());
        }
        
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"ss");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");//商户订单号
        String trade_no = infoMap.get("transaction_id");//平台订单号
        String trade_status = infoMap.get("pay_result");// 0 表示成功
        String t_trade_status = "0";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================XYZNotifty START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XYZ)) {
                XYZPayServiceImpl xxb = new XYZPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 永付支付回调通知 YFZ
     */
    @RequestMapping("/YFZNotify.do")
    @ResponseBody
    public String YFZNotify(HttpServletRequest request, HttpServletResponse response){
        logger.info("[YFZNotify]永付支付回调-----------------------------START------------------------------");
        String ret__success = "SUCCESS";
        String clazz_name = "[YFZNotify]永付支付回调";
        Map<String,String> infoMap = new HashMap<String,String>();
        String order_no = "";
        
        try{
            infoMap = ParamsUtils.getNotifyParams(request);
            
            if(null == infoMap || infoMap.isEmpty()){
                 logger.error("[YFZNotify]永付支付回调获取请求参数为空!");
                 return ret__success;
            }
            logger.info("[YFZNotify]永付支付回调返回值:{}", infoMap);
            JSONObject json = JSONObject.fromObject(infoMap);
            order_no = json.getString("orderid");//商户订单号
            String payResult = json.getString("returncode");// 2 表示成功
            String t_trade_status = "2";// 表示成功状态
            String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
            
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo("");
            rechargeOrderVO.setTradeStatus(payResult);//成功状态
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始====================YFZNotify===START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YFZ)) {
                YFZPayServiceImpl xxb = new YFZPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {//开始签名
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        }catch(Exception e){
            e.printStackTrace();
             logger.info("[XYZNotify]永付支付回调异常:{}",e.getMessage());
             return ret__success;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 风携支付 FX
     */
    @RequestMapping("/FXNotify.do")
    @ResponseBody
    public String FXNotify(HttpServletRequest request,HttpServletResponse response){
        String ret_success = "success";//需要小写
        logger.info("[风携支付] 回调开始 ============================START========================");
        String clazz_name = "[FXNotify]风携支付回调";
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        logger.info("[风携支付] 回调返回参数:{}",infoMap);
        if(infoMap==null || infoMap.isEmpty()){
            return ret_str_failed;
        }
        String order_no = infoMap.get("fx_order_id");//商户订单号
        String trade_no = System.currentTimeMillis()+"";//流水号
        String orderAmount = infoMap.get("fx_order_amount");//需要修改的订单金额
        logger.info("原金额金额为:{}, 修改金额为:{}",infoMap.get("fx_original_amount"),infoMap.get("fx_order_amount"));
        String trade_status = infoMap.get("fx_status_code");// 200 表示成功
        String t_trade_status = "200";//0000 成功 false 失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.valueOf(orderAmount));//修改后的金额
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_FX)) {//风携支付
                FXPayServiceImpl xxb = new FXPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret_success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
        
    }
    
    /**
     * 云付宝支付 YFB
     */
    @RequestMapping("/YFBNotify.do")
    @ResponseBody
    public String YFBNotify(HttpServletRequest request, HttpServletResponse response){
        logger.info("[云付宝支付] 回调开始 ============================START========================");
        String ret_success = "success"; //需要小写
        Map<String,String> infoMap = new HashMap<String,String>();
        String order_no = "";
        String clazz_name = "云付宝支付回调";
        
        try{
            infoMap = ParamsUtils.getNotifyParams(request);
            logger.info("[云付宝支付] 回调返回参数:{}",infoMap);
            
            if(infoMap == null || infoMap.isEmpty()){//请求参数值为null
                return ret_str_failed;
            }
            logger.info("[云付宝支付] 回调函数 有返回值, 开始判断是否支付成功....");
            JSONObject json = JSONObject.fromObject(infoMap);
            order_no = json.getString("out_trade_no");//商户订单号
            String transaction_id = "";
            String payResult = json.getString("trade_status");// 200 表示成功
            String t_trade_status = "200";// 200 成功状态
            String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
            savePayFile("YFBNotify", json, IPTools.getIp(request));
            
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo("");
            rechargeOrderVO.setTradeStatus(payResult);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始==================云付宝回调=====START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YFB)) { //云付宝
                YFBPayServiceImpl xxb = new YFBPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret_success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
            
        }catch(Exception e){
            e.printStackTrace();
            logger.info("[YFBNotify]云付宝回调异常:{}",e.getMessage());
            return ret_success;
        }finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 汇鑫支付 回调函数
     * @param request
     * @param response
     */
    @RequestMapping("HXNotify")
    @ResponseBody
    public String HXNotify(HttpServletRequest request, HttpServletResponse response){
        String ret_success = "ok";//成功返回 小写 ok
        logger.info("汇鑫支付回调支付开始回调函数................................");
        String clazz_name = "汇鑫支付回调";
        Map<String,String> infoMap = new HashMap<String,String>();
        try{
            infoMap = ParamsUtils.getNotifyParams(request);//解析参数
        } catch(Exception e){
            e.printStackTrace();
            logger.info("[HXNotity]汇鑫支付接受参数出现错误:{}",e.getMessage());
        }
        
        if(null == infoMap || infoMap.isEmpty()){
            logger.info("[HXNotity]汇鑫支付 无接收参数");
            return ret_str_failed;
        }
        
        logger.info("[HXNotity]汇鑫支付回调请求参数:{}",infoMap);
        
        String order_no = infoMap.get("out_trade_no");//订单号
        String trade_no = infoMap.get("order_id");
        String trade_status = infoMap.get("status");//状态
        String t_trade_status = "1";//1:支付成功，非1为支付失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        
        try{
            savePayFile("HXNotity", infoMap, IPTools.getIp(request));//写日志
            //查询订单号
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_HX)) {//汇鑫支付
                HXPayServiceImpl xxb = new HXPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret_success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        }catch(Exception e){
            e.printStackTrace();
            logger.info("[HXNotity]汇鑫支付回调 出现错误,错误信息:{}",e.getMessage());
            return ret_str_failed;
        }
    }
    
    /**
     * 安盛支付
     */
    @RequestMapping("/ASNotify.do")
    @ResponseBody
    public String ASNotify(HttpServletRequest request, HttpServletResponse response){
        logger.info("[ASNotify]安盛支付 回调函数 开始 ---------------------------------");
        String clazz_name = "安盛支付回调";
        String ret_success = "success";
        Map<String, String> infoMap = new HashMap<>();
        try{
            infoMap = ParamsUtils.getNotifyParams(request);//获取参数
        }catch(Exception e){
            e.printStackTrace();
            logger.info("安盛支付出现问题:{}",e.getMessage());
            return ret_str_failed;
        }
        
        if(null == infoMap || infoMap.isEmpty()){
            logger.info("[ASNotify]安盛支付 无接收参数");
            return ret_str_failed;
        }
        
        savePayFile("HXNotity", infoMap, IPTools.getIp(request));//写日志
        if (!infoMap.get("status").equals("1")) {
            logger.info("[ASNotify]安盛支付回调单据异常获取支付商信息失败！");
            return ret_str_failed;
        }
        
        logger.info("[ASNotify]安盛支付回调请求参数:{}",infoMap);
        String order_no = infoMap.get("order_id");//平台订单号
        String trade_no = StringUtils.isNullOrEmpty(infoMap.get("paysapi_id"))?System.currentTimeMillis()+"":infoMap.get("paysapi_id");// 平台订单号
        String trade_status = infoMap.get("code");//订单状态判断标准：0 未处理 1 交易成功 2 支付失败 3 关闭交易 4 支付超时
        String t_trade_status = "1";
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        logger.info("[ASNotify]安盛支付回调开始调用------------");
        
        try{
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_AS)) {//安盛支付
                ASPayServiceImpl xxb = new ASPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret_success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        }catch(Exception e){
            e.printStackTrace();
            logger.error(clazz_name+"出现错误!");
            return ret_str_failed;
        }
    }
    
    /**
     * 共赢支付回调
     */
    @RequestMapping("/GYNotify.do")
    @ResponseBody
    public String GYNotify(HttpServletRequest request, HttpServletResponse response){
        logger.info("共赢支付回调函数================================");
        String ret_success= "OK";//回调成功状态
        String clazz_name = "共赢支付回调函数";
        Map<String,String> infoMap = new HashMap<String,String>();
        try{
            infoMap = ParamsUtils.getNotifyParams(request);
            logger.info("共赢支付回调返回值:{}",infoMap);
            
            //返回值为null
            if(infoMap.isEmpty() || null == infoMap){
                logger.info(clazz_name+"返回值:{}",infoMap);
                return ret_str_failed;
            }
            
        }catch(Exception e){
            e.printStackTrace();
            logger.info("共赢支付 回调函数出现错误,重新回调!");
            return ret_str_failed;
        }
        
        String order_no = infoMap.get("order_id");//平台订单号
        String trade_no = infoMap.get("platform_order_id");// 平台订单号
        String trade_status = "1";//无成功状态，只要回调就是成功
        String t_trade_status = "1"; //成功标识
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        logger.info(clazz_name+"开始查询订单");
        
        try{
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret_success;//修改为成功
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_GY)) {//共赢支付
                GYPayServiceImpl xxb = new GYPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret_success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        }catch(Exception e){
            e.printStackTrace();
            logger.error(clazz_name + "错误错误!");
            return ret_str_failed;
        }
    }
    
    /**
     * 百姓支付
     */
    @RequestMapping("/BXNotify.do")
    @ResponseBody
    public String BXNotify(HttpServletRequest request,HttpServletResponse response){
        logger.info("[百姓支付] BXNotify回调函数开始执行........");
        String clazz_name = "百姓支付回调";
        String ret_success = "OK";//成功
        Map<String,String> infoMap = new HashMap<String,String>();
        try{
            infoMap = ParamsUtils.getNotifyParams(request);
            //String str = HttpUtil.getRequestBody(request);
            //infoMap = JSONObject.fromObject(str);
            logger.info("百姓支付BXNotify回调函数 获取的参数:{}",infoMap);
        }catch(Exception e){
            e.printStackTrace();
            logger.info("[百姓支付] 回调函数出现错误,错误信息:{}",e.getMessage());
        }
        
        logger.info("[百姓支付] 回调函数 返回参数值:{}", infoMap);
        if(null == infoMap || infoMap.isEmpty()){
            return ret_str_failed;
        }
        savePayFile("BXNotify", infoMap, IPTools.getIp(request));//写日志
        if(!"2".equals(infoMap.get("state"))){
            logger.info("[百姓支付] 回调函数 支付状态是失败的,回调返回状态:{}",infoMap.get("state"));
            return ret_str_failed;
        }
        
        String order_no = infoMap.get("aorder");//平台订单号
        String trade_no = "";// 平台订单号
        String trade_status = infoMap.get("state");//订单状态判断标准：0|1支付失败    2支付成功
        String t_trade_status = "2"; //成功标识
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        logger.info("[BXNotify]百姓支付回调开始调用------------");
        
        try{
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_BX)) {//百姓支付
                BXPayServiceImpl xxb = new BXPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"ok".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret_success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        }catch(Exception e){
            e.printStackTrace();
            logger.error(clazz_name + "错误错误!");
            return ret_str_failed;
        }
    }

    /**
     * 鼎盛支付
     * @param request
     * @param response
     * @return
     */
    @RequestMapping("/DSZFNotify.do")
    @ResponseBody
    public String DSZFNotiy(HttpServletRequest request, HttpServletResponse response, HttpSession session){
        logger.info("DSZFNotify鼎盛支付回调开始.........");
        String ret_success = "success";
        String clazz_name = "DSNotify鼎盛支付";
        
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        logger.info("DSZFNotify鼎盛支付回调参数:{}",infoMap);
        
        if(infoMap.isEmpty()){
            logger.info("{}DSZFNotify 鼎盛支付 回调参数为空!",clazz_name);
            return ret_str_failed;
        }
        
        String order_no = infoMap.get("fxddh");//订单号
        String trade_no = infoMap.get("fxorder");//平台订单号
        String trade_status = infoMap.get("fxstatus");//状态
        String t_trade_status = "1";//1:支付成功
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_DSZF)) {//鼎盛支付
                DSZFPayServiceImpl xxb = new DSZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret_success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 新2万通支付
     */
    @RequestMapping("/XWTNotify.do")
    @ResponseBody
    public String XWTNotify(HttpServletRequest request, HttpServletResponse response){
        String ret_success = "OK";/// 成功标识
        String clazz_name = "XWTNotify";
        logger.info("{}新2万通支付回调函数开始回调了...............................",clazz_name);
        TreeMap<String,String> mapInfo = new TreeMap<String,String>();
        mapInfo.putAll(ParamsUtils.getNotifyParams(request));
        logger.info("新2万通支付回调参数:{}", mapInfo);

        if (mapInfo.isEmpty()) {
            return ret_str_failed;
        }

        String order_no = mapInfo.get("orderid");// 订单金额
        String trade_no = mapInfo.get("transaction_id");// 平台订单号
        String trade_status = mapInfo.get("returncode");// 状态
        String t_trade_status = "00";// 1:支付成功
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request)) ? "127.0.0.1" : IPTools.getIp(request);

        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name + "支付回调订单号:{}重复调用", order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");

        try {
            logger.info(clazz_name + "执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, mapInfo, IPTools.getIp(request));
            // 通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if (rechargeOrderVO == null) {
                logger.info(clazz_name + "支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}", order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(mapInfo).toString());
            Integer payId = rechargeOrderVO.getPayId();// 支付商ID
            // 查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if (cagentYespayVO == null) {
                logger.info(clazz_name + "非法支付商ID,查询支付商信息失败,支付商ID:{}", payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();// 支付商编码
            Map<String, String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());// 支付商配置信息
            logger.info(clazz_name + "支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XWT)) {// 新2万通
                XWTPayServiceImpl xxb = new XWTPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(mapInfo);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name + "支付回调验签失败!订单号:{}", order_no);

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name + "支付回调验签成功!订单号:{}", order_no);
            } else {
                // 异常请求
                logger.error(clazz_name + "支付回调异常请求,订单号:{}", order_no);
                return ret_str_failed;
            }
            logger.info(clazz_name + "支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if (ResultResponse.SUCCESS_CODE.equals(result)) {
                logger.info(clazz_name + "支付回调业务处理成功=======================SUCCESS====================:{}", order_no);
                return ret_success;
            }
            logger.info(clazz_name + "支付回调业务处理成功=======================FAILD====================:{}", order_no);
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name + "支付回调业务处理异常:{}", e.getMessage());
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name + "支付回调业务处理成功,删除缓存中的订单KEY:{}", order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 保诚支付回调方法
     * @param request
     * @param response
     * @return
     */
    @RequestMapping("/BCZFNotify.do")
    @ResponseBody
    public String BCZFNotify(HttpServletRequest request, HttpServletResponse response){
        String clazz_name = "BCZFNotify";
        logger.info("{}保诚支付回调函数开始................",clazz_name);
        String ret_success = "OK";
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap.isEmpty()){
            logger.info("{}保诚支付回调函数参数为空!",clazz_name);
            return ret_str_failed;
        }
        
        logger.info("{}保诚支付回调函数回调参数值:{}",clazz_name,infoMap);
        /*
         * 订单编号
         */
        String order_no = infoMap.get("orderid");
        /*
         * 系统编号
         */
        String trade_no = infoMap.get("transaction_id");
        //成功状态
        String trade_status = infoMap.get("returncode");
        String t_trade_status = "00";
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        
        if(payMap.containsKey(order_no)){
            logger.info("{}保诚支付回调订单号:{}重复调用",clazz_name,order_no);
            return ret_str_failed;
        }
        payMap.put(order_no,"1");
        
        try{
            logger.info("{}执行回调业务开始=========================START==========================={}",clazz_name,order_no);
            savePayFile(clazz_name, infoMap, ip);
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if (rechargeOrderVO == null) {
                logger.info("{}支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}", clazz_name,order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();// 支付商ID
            // 查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if (cagentYespayVO == null) {
                logger.info(clazz_name + "非法支付商ID,查询支付商信息失败,支付商ID:{}", payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();// 支付商编码
            Map<String, String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());// 支付商配置信息
            logger.info(clazz_name + "支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_BCZF)) {//保诚支付
                BCZFPayServiceImpl xxb = new BCZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name + "支付回调验签失败!订单号:{}", order_no);

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name + "支付回调验签成功!订单号:{}", order_no);
            } else {
                // 异常请求
                logger.error(clazz_name + "支付回调异常请求,订单号:{}", order_no);
                return ret_str_failed;
            }
            logger.info(clazz_name + "支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if (ResultResponse.SUCCESS_CODE.equals(result)) {
                logger.info(clazz_name + "支付回调业务处理成功=======================SUCCESS====================:{}", order_no);
                return ret_success;
            }
            logger.info(clazz_name + "支付回调业务处理成功=======================FAILD====================:{}", order_no);
            return ret_str_failed;
            
        }catch(Exception e){
            logger.info("{}保诚支付出现错误!!错误信息:{}",clazz_name,e.getMessage());
            e.printStackTrace();
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name + "支付回调业务处理成功,删除缓存中的订单KEY:{}", order_no);
                payMap.remove(order_no);
            }
        }
    }
    /**
     * FF91 支付回调函数
     * @param request
     * @param response
     */
    @RequestMapping("/FFNotify.do")
    @ResponseBody
    public String FFNotify(HttpServletRequest request, HttpServletResponse response){
        /*
         * FF91 支付回调成功
         */
        String ret_success = "ok";
        String clazz_name = "FFNotify";
        logger.info("{}支付回调函数开始....................");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info("{}支付回调函数回调参数值:{}",clazz_name,infoMap);
        /*
         * 订单编号
         */
        String order_no = infoMap.get("ordernumber");
        /*
         * 系统订单号
         */
        String trade_no = infoMap.get("sysnumber");
        String trade_status = infoMap.get("orderstatus");
        String t_trade_status = "1";
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        if(payMap.containsKey(order_no)){
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no,"1");
        
        try {
            logger.info(clazz_name + "执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            // 通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if (rechargeOrderVO == null) {
                logger.info(clazz_name + "支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}", order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();// 支付商ID
            // 查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if (cagentYespayVO == null) {
                logger.info(clazz_name + "非法支付商ID,查询支付商信息失败,支付商ID:{}", payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();// 支付商编码
            Map<String, String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());// 支付商配置信息
            logger.info(clazz_name + "支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_FF)) {// 新2万通
                FFPayServiceImpl xxb = new FFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name + "支付回调验签失败!订单号:{}", order_no);

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name + "支付回调验签成功!订单号:{}", order_no);
            } else {
                // 异常请求
                logger.error(clazz_name + "支付回调异常请求,订单号:{}", order_no);
                return ret_str_failed;
            }
            logger.info(clazz_name + "支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if (ResultResponse.SUCCESS_CODE.equals(result)) {
                logger.info(clazz_name + "支付回调业务处理成功=======================SUCCESS====================:{}", order_no);
                return ret_success;
            }
            logger.info(clazz_name + "支付回调业务处理成功=======================FAILD====================:{}", order_no);
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name + "支付回调业务处理异常:{}", e.getMessage());
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name + "支付回调业务处理成功,删除缓存中的订单KEY:{}", order_no);
                payMap.remove(order_no);
            }
        }
        
        
        
    }
    
    /**
     * 富豪支付回调函数
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/FHZFNotify.do")
    @ResponseBody
    public String FHZFNotify(HttpServletRequest request, HttpServletResponse response,HttpSession session){
        String ret_success = "success";
        String clazz_name = "FHZFNotify富豪支付";
        logger.info("{}回调函数 开始回调...............................",clazz_name);
        Map<String,String> infoMap = new TreeMap<String,String>();
        infoMap.putAll(ParamsUtils.getNotifyParams(request));
        
        logger.info("{}回调函数的参数值:{}",clazz_name,infoMap);
        if(infoMap.isEmpty()){
            logger.info("{}回调函数参数值为空", infoMap);
            return ret_str_failed;
        }
        /**
         * 订单号
         */
        String order_no = infoMap.get("out_trade_no");
        String trade_no = infoMap.get("trade_id");
        String trade_status = infoMap.get("status");
        String t_trade_status = "1";//1:支付成功，非1为支付失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        logger.info("获取基本参数结束...................");
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_FHZF)) {//富豪支付
                FHZFPayServiceImpl xxb = new FHZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret_success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 新免签支付
     */
    @RequestMapping("/XMQZFNotify")
    @ResponseBody
    public String XMQZFNotify(HttpServletRequest request,HttpServletResponse response){
        String ret_success = "success";
        String clazz_name = "新免签支付 XMQZFNotify"; 
        logger.info("新免签支付回调函数开始...............");
        Map<String,String> infoMap = new LinkedHashMap<String,String>();
        infoMap.putAll(ParamsUtils.getNotifyParams(request));
        logger.info("{} 开始回调........{}",clazz_name,infoMap);
        
        String order_no = infoMap.get("user_order_no");
        String trade_no = infoMap.get("orderno");
        String trade_status = "1";
        String t_trade_status = "1";
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_JFU)) {
                XMQZFPayServiceImpl xxb = new XMQZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret_success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
        
    }
    
    /**
     * iipays 支付
     * @param request
     * @param response
     * @return
     */
    @RequestMapping("/IIZFNotify.do")
    @ResponseBody
    public String IIZFNotify(HttpServletRequest request, HttpServletResponse response){
        String ret_success = "success";
        String clazz_name = "IIZF iipays支付回调开始";
        logger.info("{}............开始回调..............",clazz_name);
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        logger.info("{} 获取的参数:{}",clazz_name,infoMap);
        if(infoMap.isEmpty()){
            return ret_str_failed;
        }
        
        String order_no = infoMap.get("sdorderno");
        String trade_no = infoMap.get("sdpayno");
        String trade_status = infoMap.get("status");
        String t_trade_status = "1";//1:支付成功，非1为支付失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        
         //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_IIZF)) {//iipays 支付
                IIZFPayServiceImpl xxb = new IIZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret_success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
        
    }
    
    /**
     * 
     * @Description 极付支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/JFUNotify.do")
    @ResponseBody
    public String JFUNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";//返回字符串SUCCESS，就表示回调已收到。
        String clazz_name = "JFUNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("order_id");// 平台订单号
        String trade_no = StringUtils.isNullOrEmpty(infoMap.get("paysapi_id"))?System.currentTimeMillis()+"":infoMap.get("paysapi_id");// 平台订单号
        String trade_status = infoMap.get("code");//订单状态判断标准：0 未处理 1 交易成功 2 支付失败 3 关闭交易 4 支付超时
        String t_trade_status = "1";//1:支付成功，非1为支付失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_JFU)) {
                JFUPayServiceImpl xxb = new JFUPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 富乐支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/FLZFNotify.do")
    @ResponseBody
    public String FLZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//返回字符串success，就表示回调已收到。
        String clazz_name = "FLZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("order_id");// 平台订单号
        String trade_no = infoMap.get("txnTime");//支付成功时间，作为流水号,
        String trade_status = "0000";
        String t_trade_status = "0000";//1:支付成功，非1为支付失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_FLZF)) {
                FLZFPayServiceImpl xxb = new FLZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description A9支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/ANZFNotify.do")
    @ResponseBody
    public String ANZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "yes";//返回字符串yes，就表示回调已收到。
        String clazz_name = "ANZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = infoMap.get("trade_no");//支付成功时间，作为流水号,
        String trade_status = infoMap.get("trade_status");//FAILED:失败 SUCCESS:成功
        String t_trade_status = "SUCCESS";//FAILED:失败 SUCCESS:成功
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_ANZF)) {
                ANZFPayServiceImpl xxb = new ANZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 顺利聚合支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SLJHNotify.do")
    @ResponseBody
    public String SLJHNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";//返回字符串OK，就表示回调已收到。
        String clazz_name = "SLJHNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid");// 平台订单号
        String trade_no = infoMap.get("transaction_id");//支付成功时间，作为流水号,
        String trade_status = infoMap.get("returncode");//“00” 为成功
        String t_trade_status = "00";//“00” 为成功
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SLJH)) {
                SLJHPayServiceImpl xxb = new SLJHPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 站蓝支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/ZLNotify.do")
    @ResponseBody
    public String ZLNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";//返回字符串OK，就表示回调已收到。
        String clazz_name="ZLNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("order_no");// 平台订单号
        String trade_no = infoMap.get("payment_trx_no");//支付成功时间，作为流水号,
        String trade_status = infoMap.get("ord_status");//SUCCESS 交易成功FAILED 交易失败
        String t_trade_status = "SUCCESS";////SUCCESS 交易成功FAILED 交易失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_ZL)) {
                ZLPayServiceImpl xxb = new ZLPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 钱快支付
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/QKNotify.do")
    @ResponseBody
    public String QKNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//返回字符串OK，就表示回调已收到。
        String clazz_name="QKNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("r6_Order");// 平台订单号
        String trade_no = infoMap.get("r2_TrxId");//支付成功时间，作为流水号,
        String trade_status = infoMap.get("r1_Code");//1：成功，4：失败
        String t_trade_status = "1";//1：成功，4：失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_QK)) {
                QKPayServiceImpl xxb = new QKPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 速通支付
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/STZFNotify.do")
    @ResponseBody
    public String STZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//返回字符串OK，就表示回调已收到。
        String clazz_name = "STZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = infoMap.get("sys_order_no");//支付成功时间，作为流水号,
        String trade_status = infoMap.get("status");//true 成功 false 失败
        if(trade_status.equalsIgnoreCase("true")){
            trade_status = "0000";
        }
        String t_trade_status = "0000";//true 成功 false 失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_STZF)) {
                STZFPayServiceImpl xxb = new STZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 马上付支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/MSFNotify.do")
    @ResponseBody
    public String MSFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//返回字符串OK，就表示回调已收到。
        String clazz_name = "MSFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = infoMap.get("ddh");//支付成功时间，作为流水号,
        String trade_status = "0000";//0000 成功  其他 失败
        String t_trade_status = "0000";//0000 成功 false 失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_MSF)) {
                MSFPayServiceImpl xxb = new MSFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 中亿支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/ZYNotify.do")
    @ResponseBody
    public String ZYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//返回字符串OK，就表示回调已收到。
        String clazz_name = "ZYNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = infoMap.get("ddh");//支付成功时间，作为流水号,
        String trade_status = "0000";//0000 成功  其他 失败
        String t_trade_status = "0000";//0000 成功 false 失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_ZY)) {
                ZYPayServiceImpl xxb = new ZYPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 聚合支付
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/JHZFNotify.do")
    @ResponseBody
    public String JHZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";//返回字符串OK，就表示回调已收到。
        String clazz_name = "JHZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("prdOrdNo");// 平台订单号
        String trade_no = infoMap.get("payId");//支付成功时间，作为流水号,
        String trade_status = infoMap.get("orderStatus");//01 支付成功 00 未支付 02 支付处理中
        String t_trade_status = "01";//01 支付成功 00 未支付 02 支付处理中
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_JHZF)) {
                JHZFPayServiceImpl xxb = new JHZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 乐美支付
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/LMZFNotify.do")
    @ResponseBody
    public String LMZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";//返回字符串OK，就表示回调已收到。
        String clazz_name = "LMZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("OrderID");// 平台订单号
        String trade_no = infoMap.get("OrderIDP");//流水号
        String trade_status = infoMap.get("PayState");//1为充值成功 0为失败
        String t_trade_status = "1";//1为充值成功 0为失败
        String order_amount = infoMap.get("FaceValue");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_LMZF)) {
                LMZFPayServiceImpl xxb = new LMZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    
    /**
     * 
     * @Description 新免签支付通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XMQPNotify.do")
    @ResponseBody
    public String XMQPNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "XMQPNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("user_order_no");// 平台订单号
        String trade_no = infoMap.get("tradeno");//流水号
        String trade_status = "1";//infoMap.get("status");//1:成功，其他失败
        String t_trade_status = "1";//1:成功，其他失败
        String order_amount = infoMap.get("realprice");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));//实际支付金额
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XMQP)) {
                XMQPPayServiceImpl xxb = new XMQPPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 天盾支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/TDZFNotify.do")
    @ResponseBody
    public String TDZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "TDZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("sdorderno");// 平台订单号
        String trade_no = infoMap.get("sdpayno");//流水号
        String trade_status = infoMap.get("status");//1:成功，其他失败
        String t_trade_status = "1";//1:成功，其他失败
        String order_amount = infoMap.get("total_fee");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TDZF)) {
                TDZFPayServiceImpl xxb = new TDZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 万福支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/WANFNotify.do")
    @ResponseBody
    public String WANFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "WANFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("order_no");// 平台订单号
        String trade_no = infoMap.get("order_id");//流水号
        String trade_status = "1";//infoMap.get("status");//1:成功，其他失败
        String t_trade_status = "1";//1:成功，其他失败
        String order_amount = infoMap.get("realprice");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));//实际支付金额
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_WANF)) {
                WANFPayServiceImpl xxb = new WANFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 顺优支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SYOUNotify.do")
    @ResponseBody
    public String SYOUNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "SYOUNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("merOdNo");// 平台订单号
        String trade_no = infoMap.get("orderNo");//流水号
        String trade_status = infoMap.get("tradeResult");//1:成功，其他失败
        String t_trade_status = "1";//1:成功，其他失败
        String order_amount = infoMap.get("amount");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));//实际支付金额
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SYOU)) {
                SYOUPayServiceImpl xxb = new SYOUPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 火火支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/FIRENotify.do")
    @ResponseBody
    public String FIRENotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";//收到通知后请回复  OK
        String clazz_name = "FIRENotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid");// 平台订单号
        String trade_no = infoMap.get("platform_trade_no");//流水号
        String trade_status = infoMap.get("result_code");//SUCCESS或FAIL，注意大写
        String t_trade_status = "SUCCESS";//1:成功，其他失败
        String order_amount = infoMap.get("realprice");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));//实际支付金额
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_FIRE)) {
                FIREPayServiceImpl xxb = new FIREPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 溢发支付2回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YFFSNotify.do")
    @ResponseBody
    public String YFFSNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String clazz_name = "YFFSNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String, String> infoMap = new HashMap<String, String>();
        try {
            for (Entry<String, String[]> entry : request.getParameterMap().entrySet()) {
                if (entry.getValue() != null && entry.getValue().length > 0) {
                    infoMap = JSONUtils.toHashMap(entry.getKey());
                }
            }
            logger.info(clazz_name+"支付回调请求参数:{}" + infoMap.toString());
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("解析json参数异常");
            return ret__success;
        }
        
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderNo");// 平台订单号
        String trade_no = infoMap.get("orderNo");// 支付商订单号
        String trade_status = infoMap.get("resultStatus");// 处理结果
        String t_trade_status = "SUCCESS";// 表示成功状态
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YFFS)) {
                YFFSPayServiceImpl xxb = new YFFSPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description BP支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/BPZFNotify.do")
    @ResponseBody
    public String BPZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "BPZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = StringUtils.isNullOrEmpty(infoMap.get("out_transaction_id"))?String.valueOf(System.currentTimeMillis()):infoMap.get("out_transaction_id");//流水号
        String trade_status = infoMap.get("result");//0 成功
        String t_trade_status = "0";//1:成功，其他失败
        String order_amount = infoMap.get("real_fee");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount)/100);//实际支付金额
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_BPZF)) {
                BPZFPayServiceImpl xxb = new BPZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }


    /**
     * 老马支付回调
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/LAOMNotify.do")
    @ResponseBody
    public String LAOMNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回
        String clazz_name = "LAOMNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        //获取订单号
        String order_no = infoMap.get("out_trade_no");//订单号
        //流水号，第三方支付订单号
        String trade_no = infoMap.get("trade_no");
        String trade_status = infoMap.get("status");
        String t_trade_status = "success";// 1:成功，其他失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_LAOM)) {
                LAOMPayServiceImpl laoma = new LAOMPayServiceImpl(pmapsconfig);
                String rmsg = laoma.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    rechargeOrderVO.setDescription("支付回调验签失败");
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 闪付
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SHANNotify.do")
    @ResponseBody
    public String SHANNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "SHANNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = StringUtils.isNullOrEmpty(infoMap.get("trade_no"))?String.valueOf(System.currentTimeMillis()):infoMap.get("trade_no");//流水号
        String trade_status = "0000";//0 成功
        String t_trade_status = "0000";//1:成功，其他失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SHAN)) {
                SHANPayServiceImpl xxb = new SHANPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 易宝支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YEENotify.do")
    @ResponseBody
    public String YEENotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";//收到通知后请回复  SUCCESS
        String clazz_name = "YEENotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = new HashMap<>();
        try {
            String data = request.getParameter("data");
            byte[] bytes = YEEUtils.decryptByPrivateKey(new BASE64Decoder().decodeBuffer(data), YEEUtils.PRIVATE_KEY);
            String resultData = new String(bytes, YEEUtils.CHARSET);// 解密数据
            infoMap = JSONObject.fromObject(resultData);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name + "解析回调请求参数异常:{}",e.getMessage());
            return ret_str_failed;
        }
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
          }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderId");// 平台订单号
        String trade_no = "YEE"+infoMap.get("time");//流水号
        String trade_status = infoMap.get("result");//0 成功
        String t_trade_status = "00";//1:成功，其他失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YEE)) {
                YEEPayServiceImpl xxb = new YEEPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 通支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/TONGNotify.do")
    @ResponseBody
    public String TONGNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  SUCCESS
        String clazz_name = "TONGNotify";
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = infoMap.get("trade_no");//流水号
        String trade_status = infoMap.get("status");//支付状态：'1'为支付成功，'error:错误信息'为未支付成功
        String t_trade_status = "1";//1:成功，其他失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TONG)) {
                TONGPayServiceImpl xxb = new TONGPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
       /**
     *
     * @Description 信付通回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XFTNotify.do")
    @ResponseBody
    public String XFTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  SUCCESS
        String clazz_name = "XFTNotify";
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");

        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("order_no");// 平台订单号
        String trade_no = infoMap.get("trade_no");//流水号
        String trade_status = infoMap.get("trade_status");//支付状态：'1'为支付成功，'error:错误信息'为未支付成功
        String t_trade_status = "TRADE_FINISHED";//成功状态：TRADE_FINISHED
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XFT)) {
                XFTPayServiceImpl xft = new XFTPayServiceImpl(pmapsconfig);
                String rmsg = xft.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
      /**
     *
     * @Description 易付宝支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YIFBNotify.do")
    @ResponseBody
    public String YIFBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";//收到通知后请回复  OK
        String clazz_name = "YIFBNotify";
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");

        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid");// 平台订单号
        String trade_no = infoMap.get("transaction_id");//流水号
        String trade_status = infoMap.get("returncode");//支付状态：'1'为支付成功，'error:错误信息'为未支付成功
        String t_trade_status = "00";//“00” 为成功
        String order_amount = infoMap.get("amount");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息

            logger.info(clazz_name+"支付回调验签开始=======================START====================");

            if (paymentName.equals(PayConstant.CONSTANT_YIFB)) {
                YIFBPayServiceImpl yifb = new YIFBPayServiceImpl(pmapsconfig);
                String rmsg = yifb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description 特捷付支付
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/TEJFNotify.do")
    @ResponseBody
    public String TEJFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "TEJFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("merOdNo");// 平台订单号
        String trade_no = infoMap.get("orderNo");//流水号
        String trade_status = infoMap.get("tradeResult");//1:成功，其他失败
        String t_trade_status = "1";//1:成功，其他失败
        String order_amount = infoMap.get("amount");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));//实际支付金额
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TEJF)) {
                TEJFPayServiceImpl xxb = new TEJFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    @RequestMapping("/TEYENotify.do")
    @ResponseBody
    public String TEYENotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "TEYENotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("ordernumber");// 平台订单号
        String trade_no = StringUtils.isNullOrEmpty(infoMap.get("sysnumber"))?"TEYE"+System.currentTimeMillis():infoMap.get("sysnumber");//流水号
        String trade_status = infoMap.get("orderstatus");//1:成功，其他失败
        String t_trade_status = "1";//1:成功，其他失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_TEYE)) {
                TEYEPayServiceImpl xxb = new TEYEPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description  顺付支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SHUNNotify.do")
    @ResponseBody
    public String SHUNNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "SHUNNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("userRemark");// 平台订单号
        String trade_no = StringUtils.isNullOrEmpty(infoMap.get("depositNumber"))?"shunf"+System.currentTimeMillis():infoMap.get("depositNumber");//流水号
        String trade_status = "0000";//0000:成功，其他失败
        String t_trade_status = "0000";//1:成功，其他失败
        String order_amount = infoMap.get("amount");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_SHUN)) {
                SHUNPayServiceImpl xxb = new SHUNPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     *
     * @Description  华信支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/HUAXNotify.do")
    @ResponseBody
    public String HUAXNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";//收到通知后请回复  success
        String clazz_name = "HUAXNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("outOrderNo");// 平台订单号
        String trade_no = infoMap.get("orderNo");//流水号
        String trade_status = "0000";//0000:成功，其他失败
        String t_trade_status = "0000";//1:成功，其他失败
        String order_amount = infoMap.get("amount");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount)/100);
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_HUAX)) {
                HUAXPayServiceImpl xxb = new HUAXPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 盈付支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YINFNotify.do")
    @ResponseBody
    public String YINFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";//收到通知后请回复  success
        String clazz_name = "YINFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = infoMap.get("transaction_id");//流水号
        String trade_status = infoMap.get("result_code");//0 表示成功非 0 表示失败
        String t_trade_status = "0";//0 表示成功非 0 表示失败
        String order_amount = infoMap.get("total_fee");//
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount)/100);
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YINF)) {
                YINFPayServiceImpl xxb = new YINFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 易付通支付回到通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YFTPNotify.do")
    @ResponseBody
    public String YFTPNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "“success”";//收到通知后请回复  success
        String clazz_name = "YFTPNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("mercOrderId");// 平台订单号
        String trade_no = infoMap.get("orderId");//流水号
        String trade_status = infoMap.get("orderStatus");//0 表示成功非 0 表示失败
        String t_trade_status = "0";//0 表示成功非 0 表示失败
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YFTP)) {
                YFTPPayServiceImpl xxb = new YFTPPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     *
     * @Description  龙宝支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/LBAONotify.do")
    @ResponseBody
    public String LBAONotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "LBAONotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("r6_Order");// 平台订单号
        String trade_no = infoMap.get("r2_TrxId");//流水号
        String trade_status = infoMap.get("r1_Code");//1:成功，其他失败
        String t_trade_status = "1";//1:成功，其他失败
        String order_amount = infoMap.get("r3_Amt");
        if (StringUtils.isNullOrEmpty(order_amount)) {
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_LBAO)) {
                LBAOPayServiceImpl xxb = new LBAOPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 彩富宝支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/CFBPNotify.do")
    @ResponseBody
    public String CFBPNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "CFBPNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_trade_no");// 平台订单号
        String trade_no = infoMap.get("transaction_no");//流水号
        String trade_status = infoMap.get("trade_state");//0 表示成功非 0 表示失败
        String t_trade_status = "SUCCESS";//SUCCESS—支付成功
        String order_amount = infoMap.get("real_total_fee");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount)/100);
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_CFBP)) {
                CFBPPayServiceImpl xxb = new CFBPPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 如意支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/RUYINotify.do")
    @ResponseBody
    public String RUYINotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "stopnotify";//收到通知后请回复  success
        String clazz_name = "RUYINotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("merOrdId");// 平台订单号
        String trade_no = infoMap.get("sysOrdId");//流水号
        String trade_status = infoMap.get("tradeStatus");//交易状态，success002 表示成功
        String t_trade_status = "success002";//交易状态，success002 表示成功
        String order_amount = infoMap.get("merOrdAmt");//单位为分
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_RUYI)) {
                RUYIPayServiceImpl xxb = new RUYIPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description YunSu支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YUNSUNotify.do")
    @ResponseBody
    public String YUNSUNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "YUNSUNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderId");// 平台订单号
        String trade_no = infoMap.get("tradeId");//流水号
        String trade_status = infoMap.get("code");//状态：0 成功.
        String t_trade_status = "0";//交易状态，0 表示成功
        String order_amount = infoMap.get("money");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount)/100);//单位为分
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_YUNSU)) {
                YUNSUPayServiceImpl xxb = new YUNSUPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 鑫财富支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XCFPNotify.do")
    @ResponseBody
    public String XCFPNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";//收到通知后请回复  success
        String clazz_name = "XCFPNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderid");// 平台订单号
        String trade_no = infoMap.get("transaction_id");//流水号
        String trade_status = infoMap.get("returncode");//“00” 为成功
        String t_trade_status = "00";//“00” 为成功
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_XCFP)) {
                XCFPPayServiceImpl xxb = new XCFPPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 竣付通支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/JFTPNotify.do")
    @ResponseBody
    public String JFTPNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "JFTPNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getJFTPNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("p2_ordernumber");// 平台订单号
        String trade_no = infoMap.get("p5_orderid");//流水号
        String trade_status = infoMap.get("p4_zfstate");//支付返回结果 1 代表成功，其他为失败
        String t_trade_status = "1";//支付返回结果 1 代表成功，其他为失败
        String order_amount = infoMap.get("p13_zfmoney");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_JFTP)) {
                JFTPPayServiceImpl xxb = new JFTPPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     *
     * @Description GPAY支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/GPAYNotify.do")
    @ResponseBody
    public String GPAYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "GPAYNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getGPAYNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("bizCode");// 平台订单号
        String trade_no = infoMap.get("orderId");//流水号
        String trade_status = infoMap.get("status");//支付返回结果 END
        String t_trade_status = "END";//支付返回结果 END 代表成功，其他为失败
        String order_amount = infoMap.get("actualMoney");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount)/100);
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_GPAY)) {
                GPAYPayServiceImpl xxb = new GPAYPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 即达支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/JIDANotify.do")
    @ResponseBody
    public String JIDANotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  OK
        String clazz_name = "JIDANotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("sdorderno");// 平台订单号
        String trade_no = infoMap.get("sdpayno");//流水号
        String trade_status = infoMap.get("status");//状态：0|1 支付失败、2支付成功。未支付不会对异步通知做任何推送
        String t_trade_status = "1";//状态：0|1 支付失败、2支付成功。未支付不会对异步通知做任何推送
        String order_amount = infoMap.get("total_fee");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_JIDA)) {
                JIDAPayServiceImpl xxb = new JIDAPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理失败=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
     * 
     * @Description 优银支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/UYZFNotify.do")
    @ResponseBody
    public String UYZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "UYZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("sdorderno");// 平台订单号
        String trade_no = infoMap.get("sdpayno");//流水号
        String trade_status = infoMap.get("status");//状态：1:成功，其他失败
        String t_trade_status = "1";//状态：1:成功，其他失败
        String order_amount = infoMap.get("total_fee");//单位为分
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_UYZF)) {
                UYZFPayServiceImpl xxb = new UYZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    
    /**
     * 
     * @Description 威力付支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/WLFNotify.do")
    @ResponseBody
    public String WLFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "200";//收到通知后请回复  200
        String clazz_name = "WLFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderId");// 平台订单号
        String trade_no = infoMap.get("txnId");//流水号
        String trade_status = infoMap.get("txnStatus");//10---交易成功
        String t_trade_status = "10";//状态：1:成功，其他失败
        String order_amount = infoMap.get("txnAmt");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount) / 100);
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_WLF)) {
                WLFPayServiceImpl xxb = new WLFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    
    /**
    *
    * @Description 云端支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
   @RequestMapping("/YDNotify.do")
   @ResponseBody
   public String YDNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "success";//收到通知后请回复  SUCCESS
       String clazz_name = "YDNotify";
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
         logger.info(clazz_name+"支付回调获取请求参数为空!");
         return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");

       //=================================获取回调基本参数结果--START===========================//
       String order_amount = infoMap.get("amount");
       if(StringUtils.isNullOrEmpty(order_amount)){
           logger.info(clazz_name+"获取实际支付金额为空!");
           return ret_str_failed;
       }
       String order_no = infoMap.get("orderid");// 平台订单号
       String trade_no = infoMap.get("transaction_id");//流水号
       String trade_status = infoMap.get("returncode");//支付状态：'1'为支付成功，'error:错误信息'为未支付成功
       String t_trade_status = "00";//成功状态：00
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_YD)) {
               YDPayServiceImpl yd = new YDPayServiceImpl(pmapsconfig);
               String rmsg = yd.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");

                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           } 
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
   }
    
    /**
    *
    * @Description 新汇支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
   @RequestMapping("/XHFNotify.do")
   @ResponseBody
   public String XHFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "success";//收到通知后请回复  SUCCESS
       String clazz_name = "XHFNotify";
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
           logger.info(clazz_name+"支付回调获取请求参数为空!");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");

       //=================================获取回调基本参数结果--START===========================//
       String order_amount = infoMap.get("amount");//
       if(StringUtils.isNullOrEmpty(order_amount)){
           logger.info(clazz_name+"获取实际支付金额为空!");
           return ret_str_failed;
       }
       String order_no = infoMap.get("orderid");// 平台订单号
       String trade_no = infoMap.get("transaction_id");//流水号
       String trade_status = infoMap.get("returncode");//支付状态：'1'为支付成功，'error:错误信息'为未支付成功
       String t_trade_status = "00";//成功状态：00
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_XHF)) {
               XHFPayServiceImpl xhf = new XHFPayServiceImpl(pmapsconfig);
               String rmsg = xhf.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");
                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           } 
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
   }
   /**
    *
    * @Description 简单支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
  /* @RequestMapping("/JDFNotify.do")
   @ResponseBody
   public String JDFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "success";//收到通知后请回复  SUCCESS
       String clazz_name = "JDFNotify";
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
           logger.info(clazz_name+"支付回调获取请求参数为空!");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");

       //=================================获取回调基本参数结果--START===========================//
       String order_no = infoMap.get("orderid");// 平台订单号
       String trade_no = infoMap.get("transaction_id");//流水号
       String trade_status = infoMap.get("returncode");//支付状态：'1'为支付成功，'error:错误信息'为未支付成功
       String t_trade_status = "SUCCESS";//成功状态：SUCCESS
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_JD)) {
               JDFPayServiceImpl jdf = new JDFPayServiceImpl(pmapsconfig);
               String rmsg = jdf.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");
                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           } 
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
   }*/
   
   
   /**
    *
    * @Description  以合支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
   @RequestMapping("/YHNotify.do")
   @ResponseBody
   public String YHNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "success";//收到通知后请回复  success
       String clazz_name = "YHNotify";
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
           logger.info(clazz_name+"支付回调获取请求参数为空!");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       //=================================获取回调基本参数结果--START===========================//
       String order_amount = infoMap.get("r3_Amt");//
       if(StringUtils.isNullOrEmpty(order_amount)){
           logger.info(clazz_name+"获取实际支付金额为空!");
           return ret_str_failed;
       }
       String order_no = infoMap.get("r6_Order");// 平台订单号
       String trade_no = infoMap.get("r2_TrxId");//流水号
       String trade_status = infoMap.get("r1_Code");//1:成功，其他失败
       String t_trade_status = "1";//1:成功，其他失败
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_YH)) {
               YHPayServiceImpl xxb = new YHPayServiceImpl(pmapsconfig);
               String rmsg = xxb.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");

                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           }
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
   }
   /**
   *
   * @Description  WOW支付回调通知
   * @param request
   * @param response
   * @param session
   * @return
   */
  @RequestMapping("/WOWNotify.do")
  @ResponseBody
  public String WOWNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
      String ret__success = "SUCCESS";//收到通知后请回复  success
      String clazz_name = "WOWNotify";
      logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
      Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
      if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
      }
      logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
      //=================================获取回调基本参数结果--START===========================//
      String order_amount = infoMap.get("amount");//
      if(StringUtils.isNullOrEmpty(order_amount)){
          logger.info(clazz_name+"获取实际支付金额为空!");
          return ret_str_failed;
      }
      String order_no = infoMap.get("merchant_order_id");// 平台订单号
      String trade_no = "WOW"+System.currentTimeMillis();//流水号
      String trade_status = infoMap.get("success");//success:成功，其他失败
      String t_trade_status = "true";//true:成功，false失败
      if(!trade_status.equals(t_trade_status)){
          return ret__success;
      }
      String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
      //=================================获取回调基本参数结果--END===========================//
      if (payMap.containsKey(order_no)) {
          logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
          return ret_str_failed;
      }
      payMap.put(order_no, "1");
      try {
          logger.info(clazz_name+"执行回调业务开始=========================START===========================");
          // 保存文件记录
          savePayFile(clazz_name, infoMap, IPTools.getIp(request));
          //通过订单号查询订单信息
          RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
          if(rechargeOrderVO == null){
              logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
              return ret__success;
          }
          rechargeOrderVO.setTradeNo(trade_no);
          rechargeOrderVO.setTradeStatus(trade_status);
          rechargeOrderVO.setSuccessStatus(t_trade_status);
          rechargeOrderVO.setNotifyIp(ip);
          rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
          rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
          Integer payId = rechargeOrderVO.getPayId();//支付商ID
          //查询支付商信息
          CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
          if(cagentYespayVO == null){
              logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
              return ret_str_failed;
          }
          String paymentName = cagentYespayVO.getPaymentName();//支付商编码
          Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
          logger.info(clazz_name+"支付回调验签开始=======================START====================");
          if (paymentName.equals(PayConstant.CONSTANT_WOW)) {
              WOWPayServiceImpl xxb = new WOWPayServiceImpl(pmapsconfig);
              String rmsg = xxb.callback(infoMap);
              if (!"success".equalsIgnoreCase(rmsg)) {
                  logger.info(clazz_name+"支付回调验签失败!");

                  notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                  return ret_str_failed;
              }
              logger.info(clazz_name+"支付回调验签成功!");
          } else {
              // 异常请求
              logger.error(clazz_name+"支付回调异常请求");
              return ret_str_failed;
          }
          logger.info(clazz_name+"支付回调验签结束=======================END====================");

          logger.info("==========================处理订单回调业务并修改订单状态==========================");
          String result = notifyService.processNotifyOrder(rechargeOrderVO);
          if(ResultResponse.SUCCESS_CODE.equals(result)){
              logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
              return ret__success;
          }
          logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
          return ret_str_failed;
      } catch (Exception e) {
          e.printStackTrace();
          logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
          return ret_str_failed;
      }finally {
          if (payMap.containsKey(order_no)) {
              logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
              payMap.remove(order_no);
          }
      }
  }


    /**
     * 小强支付回调，线上有在用
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XQNotify.do")
    @ResponseBody
    public String XQNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        logger.info("XQNotify 开始调用------------");
        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName)+"");
        }
        logger.info("请求参数:" + JSONObject.fromObject(infoMap).toString());

        ret_str_success = "success";// 成功返回success
        String order_no = request.getParameter("orderID");// (String)
        String trade_no = request.getParameter("orderNo");
        String trade_status = request.getParameter("stateCode");

        String[] strVerify = new String[] {order_no, trade_no, trade_status };
        for (String str : strVerify) {
            if (StringUtils.isNullOrEmpty(str)) {
                return ret_str_success;
            }
        }
        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret_str_success;
        }
        payMap.put(order_no, "1");
        try {
            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request));
            fileMap.put("requestParams", JSONUtils.toJSONString(infoMap));
            f.setLog("XQNotify", fileMap);

            // 验证参数
            if ("".equals(order_no) || null == order_no || "".equals(trade_no) || null == trade_no) {
                logger.info("验证参数错误");
                return ret_str_success;
            }
            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("单据不存在,直接返回");
                return ret_str_success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret_str_success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId,uid);
            if (plist.size() > 0) {
            } else {
                logger.info("单据不存在,直接返回");
                return ret_str_success;
            }

            // // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // // 支付商
            String paymentName = hsConfigMap.get("payment_name").toString();
            logger.info("用户支付商为:" + paymentName);

            if (null == paymentName || "".equals(paymentName)) {
                logger.info("用户支付商不存在:" + paymentName);
                return ret_str_success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);
            //
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_XQ) || paymentName.equals("XQ1")) {
                // 初始化数据
                t_trade_status = "2";
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                XQPayServiceImpl xq = new XQPayServiceImpl(pmapsconfig);
                String rtStr = xq.XqCallback(request);
                if (!"200".equals(rtStr)) {
                    return ret_str_success;
                }
                logger.info("小强支付验签成功！");

            } else {
                // 异常请求
                logger.error("异常请求");
                return ret_str_success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            Map<String, String[]> errorMap = new HashMap<String, String[]>();
            cmap.put("params", JSONObject.fromObject(infoMap).toString());
            cmap.put("ip", IPTools.getIp(request));
            cmap.put("status", ret_str_success);
            userService.InsertCallbacklog(cmap);
            logger.info("回调记录保存成功!");

            try {
                logger.info("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret_str_success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);
                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");
                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            logger.info("执行存储过程失败!");
                            return ret_str_success;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret_str_success;
                    }
                    logger.info("UID : " + uid);
                    logger.info("Username : " + jmap.getString("username"));
                    logger.info("order : " + jo);
                    logger.info("amt : " + amt);
                    logger.info("dml : " + dml);
                    logger.info("cj : " + cj);
                    logger.info("------------------订单完成----------------------");
                } else {
                    logger.info("回调成功，修改记录");
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("数据处理异常");
                return ret_str_success;

            }
            logger.info("回调成功！");
            return ret_str_success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }
    
  
  
  /**
   * 
   * @Description 完美支付回调通知
   * @param request
   * @param response
   * @param session
   * @return
   */
  @RequestMapping("/WMPNotify.do")
  @ResponseBody
  public String WMPNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
      String ret__success = "success";//收到通知后请回复  success
      String clazz_name = "WMPNotify";
      logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
      Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
      if(infoMap == null || infoMap.isEmpty()){
        logger.info(clazz_name+"支付回调获取请求参数为空!");
        return ret_str_failed;
      }
      logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
      //=================================获取回调基本参数结果--START===========================//
      String order_no = infoMap.get("orderNum");// 平台订单号
      String trade_no = "WMP"+System.currentTimeMillis();//流水号
      String trade_status = infoMap.get("state");//状态：success:成功，其他失败
      String t_trade_status = "success";//状态：success:成功，其他失败
      String order_amount = infoMap.get("amount");//单位为分
      if(StringUtils.isNullOrEmpty(order_amount)){
          logger.info(clazz_name+"获取实际支付金额为空!");
          return ret_str_failed;
      }
      String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
      //=================================获取回调基本参数结果--END===========================//
      if (payMap.containsKey(order_no)) {
          logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
          return ret_str_failed;
      }
      payMap.put(order_no, "1");
      try {
          logger.info(clazz_name+"执行回调业务开始=========================START===========================");
          // 保存文件记录
          savePayFile(clazz_name, infoMap, IPTools.getIp(request));
          //通过订单号查询订单信息
          RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
          if(rechargeOrderVO == null){
              logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
              return ret__success;
          }
          rechargeOrderVO.setTradeNo(trade_no);
          rechargeOrderVO.setTradeStatus(trade_status);
          rechargeOrderVO.setSuccessStatus(t_trade_status);
          rechargeOrderVO.setNotifyIp(ip);
          rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
          rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount)/100);
          Integer payId = rechargeOrderVO.getPayId();//支付商ID
          //查询支付商信息
          CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
          if(cagentYespayVO == null){
              logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
              return ret_str_failed;
          }
          String paymentName = cagentYespayVO.getPaymentName();//支付商编码
          Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
          logger.info(clazz_name+"支付回调验签开始=======================START====================");
          if (paymentName.equals(PayConstant.CONSTANT_WMP)) {
              WMPPayServiceImpl xxb = new WMPPayServiceImpl(pmapsconfig);
              String rmsg = xxb.callback(infoMap);
              if (!"success".equalsIgnoreCase(rmsg)) {
                  logger.info(clazz_name+"支付回调验签失败!");
                  
                  notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                  return ret_str_failed;
              }
              logger.info(clazz_name+"支付回调验签成功!");
          } else {
              // 异常请求
              logger.error(clazz_name+"支付回调异常请求");
              return ret_str_failed;
          }
          logger.info(clazz_name+"支付回调验签结束=======================END====================");
          
          logger.info("==========================处理订单回调业务并修改订单状态==========================");
          String result = notifyService.processNotifyOrder(rechargeOrderVO);
          if(ResultResponse.SUCCESS_CODE.equals(result)){
              logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
              return ret__success;
          }
          logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
          return ret_str_failed;
      } catch (Exception e) {
          e.printStackTrace();
          logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
          return ret_str_failed;
      }finally {
          if (payMap.containsKey(order_no)) {
              logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
              payMap.remove(order_no);
          }
      }
  }
  
  
  
  
  
  
  
    /**
     * 乐百支付回调通知
     */
    @RequestMapping("/LBZFNotify.do")
    @ResponseBody
    public String LBZFNotify(HttpServletRequest request){
        logger.info("乐百支付LBZFNotify .........................");
        String ret_success = "ok";//返回回调成功
        String clazz_name = "乐百支付LBZFNotify";
        Map<String,String> infoMap = new HashMap<String,String>();
        try{
            infoMap = ParamsUtils.getNotifyParams(request);
            logger.info("{}获取参数完成", clazz_name);
        }catch(Exception e){
            e.printStackTrace();
            logger.error("{}出现错误...",clazz_name, e.getMessage());
        }
        logger.info("{} 参数:{}", clazz_name, infoMap);
        
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info("{} 支付回调请求参数:{}",clazz_name ,infoMap);
        
        String order_no = infoMap.get("orderid");// 平台订单号
        String trade_no = infoMap.get("transaction_id");
        String trade_status = infoMap.get("returncode");//00:成功，其他失败
        String t_trade_status = "00";//00:成功
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        
        if (payMap.containsKey(order_no)) {
            logger.info("{}支付回调订单号:{}重复调用",clazz_name,order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        
        try {
            logger.info("{}执行回调业务开始=========================START===========================",clazz_name);
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info("{}支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",clazz_name, order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info("{} 非法支付商ID,查询支付商信息失败,支付商ID:{}",clazz_name, payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info("支付回调验签开始=======================START====================", clazz_name);
            if (paymentName.equals(PayConstant.CONSTANT_LBZF)) {
                LBZFPayServiceImpl xxb = new LBZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info("{}支付回调验签成功!",clazz_name);
            } else {
                // 异常请求
                logger.error("{}支付回调异常请求",clazz_name);
                return ret_str_failed;
            }
            logger.info("{}支付回调验签结束=======================END====================",clazz_name);

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info("{}支付回调业务处理成功=======================SUCCESS====================", clazz_name);
                return ret_success;
            }
            logger.info("{} 支付回调业务处理成功=======================FAILD====================",clazz_name);
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("{}支付回调业务处理异常:{}",clazz_name, e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info("支付回调业务处理成功,删除缓存中的订单KEY:{}",clazz_name, order_no);
                payMap.remove(order_no);
            }
        }
        
    }
    /**
    *
    * @Description  APAY支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
   @RequestMapping("/APAYNotify.do")
   @ResponseBody
   public String APAYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "SUCCESS";//收到通知后请回复  SUCCESS
       String clazz_name = "APAYNotify";
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
           logger.info(clazz_name+"支付回调获取请求参数为空!");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       //=================================获取回调基本参数结果--START===========================//
       String order_amount = infoMap.get("totalAmount");
       if(StringUtils.isNullOrEmpty(order_amount)){
           logger.info(clazz_name+"获取实际支付金额为空!");
           return ret_str_failed;
       }
       String order_no = infoMap.get("merchantTradeNo");// 平台订单号
       String trade_no = infoMap.get("SystemTradeNo");//流水号
       String trade_status = infoMap.get("orderStatus");//0交易成功，1交易失败，2未交易
       String t_trade_status = "0";//0:成功
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_APAY)) {
              APAYPayServiceImpl xxb = new APAYPayServiceImpl(pmapsconfig);
               String rmsg = xxb.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");

                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           }
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
   }   
   /**
   *
   * @Description  HY黄岩支付回调通知
   * @param request
   * @param response
   * @param session
   * @return
   */
  @RequestMapping("/HYNotify.do")
  @ResponseBody
  public String HYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
      String ret__success = "success";//收到通知后请回复  success
      String clazz_name = "HYNotify";
      logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
      Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
      if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
      }
      logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
      //=================================获取回调基本参数结果--START===========================//
      String order_amount = infoMap.get("total_fee");//分为单位
      if(StringUtils.isNullOrEmpty(order_amount)){
          logger.info(clazz_name+"获取实际支付金额为空!");
          return ret_str_failed;
      }
      String order_no = infoMap.get("order_id");// 平台订单号
      String trade_no = infoMap.get("out_transaction_id");//流水号
      String trade_status = infoMap.get("pay_result");//0:成功，其他失败
      String t_trade_status = "0";//0:成功
      String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
      //=================================获取回调基本参数结果--END===========================//
      if (payMap.containsKey(order_no)) {
          logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
          return ret_str_failed;
      }
      payMap.put(order_no, "1");
      try {
          logger.info(clazz_name+"执行回调业务开始=========================START===========================");
          // 保存文件记录
          savePayFile(clazz_name, infoMap, IPTools.getIp(request));
          //通过订单号查询订单信息
          RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
          if(rechargeOrderVO == null){
              logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
              return ret__success;
          }
          rechargeOrderVO.setTradeNo(trade_no);
          rechargeOrderVO.setTradeStatus(trade_status);
          rechargeOrderVO.setSuccessStatus(t_trade_status);
          rechargeOrderVO.setNotifyIp(ip);
          rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount)/100);
          rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
          Integer payId = rechargeOrderVO.getPayId();//支付商ID
          //查询支付商信息
          CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
          if(cagentYespayVO == null){
              logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
              return ret_str_failed;
          }
          String paymentName = cagentYespayVO.getPaymentName();//支付商编码
          Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
          logger.info(clazz_name+"支付回调验签开始=======================START====================");
          if (paymentName.equals(PayConstant.CONSTANT_HY)) {
              HYPayServiceImpl xxb = new HYPayServiceImpl(pmapsconfig);
              String rmsg = xxb.callback(infoMap);
              if (!"success".equalsIgnoreCase(rmsg)) {
                  logger.info(clazz_name+"支付回调验签失败!");

                  notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                  return ret_str_failed;
              }
              logger.info(clazz_name+"支付回调验签成功!");
          } else {
              // 异常请求
              logger.error(clazz_name+"支付回调异常请求");
              return ret_str_failed;
          }
          logger.info(clazz_name+"支付回调验签结束=======================END====================");

          logger.info("==========================处理订单回调业务并修改订单状态==========================");
          String result = notifyService.processNotifyOrder(rechargeOrderVO);
          if(ResultResponse.SUCCESS_CODE.equals(result)){
              logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
              return ret__success;
          }
          logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
          return ret_str_failed;
      } catch (Exception e) {
          e.printStackTrace();
          logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
          return ret_str_failed;
      }finally {
          if (payMap.containsKey(order_no)) {
              logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
              payMap.remove(order_no);
          }
      }
  }   
  /**
  *
  * @Description  XYZF新艺支付回调通知
  * @param request
  * @param response
  * @param session
  * @return
  */
 @RequestMapping("/XYZFNotify.do")
 @ResponseBody
 public String XYZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
     String ret__success = "success";//收到通知后请回复  success
     String clazz_name = "XYZFNotify";
     logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
     Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
     if(infoMap == null || infoMap.isEmpty()){
         logger.info(clazz_name+"支付回调获取请求参数为空!");
         return ret_str_failed;
     }
     logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
     //=================================获取回调基本参数结果--START===========================//
     String order_amount = infoMap.get("je");
     if(StringUtils.isNullOrEmpty(order_amount)){
         logger.info(clazz_name+"获取实际支付金额为空!");
         return ret_str_failed;
     }
     String order_no = infoMap.get("ddh");// 平台订单号
     String trade_no = "XYZF"+System.currentTimeMillis();//流水号
     String trade_status = infoMap.get("status");//success:成功，其他失败
     String t_trade_status = "success";//0:成功
     String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
     //=================================获取回调基本参数结果--END===========================//
     if (payMap.containsKey(order_no)) {
         logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
         return ret_str_failed;
     }
     payMap.put(order_no, "1");
     try {
         logger.info(clazz_name+"执行回调业务开始=========================START===========================");
         // 保存文件记录
         savePayFile(clazz_name, infoMap, IPTools.getIp(request));
         //通过订单号查询订单信息
         RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
         if(rechargeOrderVO == null){
             logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
             return ret__success;
         }
         rechargeOrderVO.setTradeNo(trade_no);
         rechargeOrderVO.setTradeStatus(trade_status);
         rechargeOrderVO.setSuccessStatus(t_trade_status);
         rechargeOrderVO.setNotifyIp(ip);
         rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
         rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
         Integer payId = rechargeOrderVO.getPayId();//支付商ID
         //查询支付商信息
         CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
         if(cagentYespayVO == null){
             logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
             return ret_str_failed;
         }
         String paymentName = cagentYespayVO.getPaymentName();//支付商编码
         Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
         logger.info(clazz_name+"支付回调验签开始=======================START====================");
         if (paymentName.equals(PayConstant.CONSTANT_XYZF)) {
          XYZFPayServiceImpl xxb = new XYZFPayServiceImpl(pmapsconfig);
             String rmsg = xxb.callback(infoMap);
             if (!"success".equalsIgnoreCase(rmsg)) {
                 logger.info(clazz_name+"支付回调验签失败!");

                 notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                 return ret_str_failed;
             }
             logger.info(clazz_name+"支付回调验签成功!");
         } else {
             // 异常请求
             logger.error(clazz_name+"支付回调异常请求");
             return ret_str_failed;
         }
         logger.info(clazz_name+"支付回调验签结束=======================END====================");

         logger.info("==========================处理订单回调业务并修改订单状态==========================");
         String result = notifyService.processNotifyOrder(rechargeOrderVO);
         if(ResultResponse.SUCCESS_CODE.equals(result)){
             logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
             return ret__success;
         }
         logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
         return ret_str_failed;
     } catch (Exception e) {
         e.printStackTrace();
         logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
         return ret_str_failed;
     }finally {
         if (payMap.containsKey(order_no)) {
             logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
             payMap.remove(order_no);
         }
     }
 }   
 /**
 *
 * @Description  HANY瀚银支付回调通知
 * @param request
 * @param response
 * @param session
 * @return
 */
@RequestMapping("/HANYNotify.do")
@ResponseBody
public String HANYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
    String ret__success = "success";//收到通知后请回复  success
    String clazz_name = "HANYNotify";
    logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
    Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
    if(infoMap == null || infoMap.isEmpty()){
        logger.info(clazz_name+"支付回调获取请求参数为空!");
        return ret_str_failed;
    }
    logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
    //=================================获取回调基本参数结果--START===========================//
    String order_amount = infoMap.get("orderAmount");//订单金额 单位：分
    if(StringUtils.isNullOrEmpty(order_amount)){
        logger.info(clazz_name+"获取实际支付金额为空!");
        return ret_str_failed;
    }
    String order_no = infoMap.get("orderNo");// 平台订单号
    String trade_no = infoMap.get("transSeq");//流水号
    String trade_status = infoMap.get("statusCode");//00:成功，其他失败
    String t_trade_status = "00";//00:成功
    String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
    //=================================获取回调基本参数结果--END===========================//
    if (payMap.containsKey(order_no)) {
        logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
        return ret_str_failed;
    }
    payMap.put(order_no, "1");
    try {
        logger.info(clazz_name+"执行回调业务开始=========================START===========================");
        // 保存文件记录
        savePayFile(clazz_name, infoMap, IPTools.getIp(request));
        //通过订单号查询订单信息
        RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
        if(rechargeOrderVO == null){
            logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
            return ret__success;
        }
        rechargeOrderVO.setTradeNo(trade_no);
        rechargeOrderVO.setTradeStatus(trade_status);
        rechargeOrderVO.setSuccessStatus(t_trade_status);
        rechargeOrderVO.setNotifyIp(ip);
        rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount)/100);
        rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
        Integer payId = rechargeOrderVO.getPayId();//支付商ID
        //查询支付商信息
        CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
        if(cagentYespayVO == null){
            logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
            return ret_str_failed;
        }
        String paymentName = cagentYespayVO.getPaymentName();//支付商编码
        Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
        logger.info(clazz_name+"支付回调验签开始=======================START====================");
        if (paymentName.equals(PayConstant.CONSTANT_HANY)) {
        	//订单支付渠道
            String payType = String.valueOf(rechargeOrderVO.getPayType());
            if(PayConstant.CHANEL_ALI.equals(payType)){
                payType = PayConstant.CONSTANT_ALI;//支付宝
            }else if(PayConstant.CHANEL_WX.equals(payType)){
                payType = PayConstant.CONSTANT_WX;//微信
            }else if(PayConstant.CHANEL_YL.equals(payType)){
                payType = PayConstant.CONSTANT_YL;//银联支付
            }else if(PayConstant.CHANEL_CFT.equals(payType)){
                payType = PayConstant.CONSTANT_CFT;//财付通
            }else if(PayConstant.CHANEL_JD.equals(payType)){
                payType = PayConstant.CONSTANT_JD;//京东
            }else if(PayConstant.CHANEL_KJ.equals(payType)){
                payType = PayConstant.CONSTANT_WXTM;//微信条码
            }else if(PayConstant.CHANEL_ALITM.equals(payType)){
                payType = PayConstant.CONSTANT_ALITM;//支付宝条码
            }else if("1".equals(payType)){
                payType = "bank"; 
            }else{
                logger.error(clazz_name+"支付回调验签类型匹配异常");
                return ret_str_success;
            }
            HANYPayServiceImpl xxb = new HANYPayServiceImpl(pmapsconfig,payType);
            infoMap.put("payType", payType);
            String rmsg = xxb.callback(infoMap);
            if (!"success".equalsIgnoreCase(rmsg)) {
                logger.info(clazz_name+"支付回调验签失败!");

                notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签成功!");
        } else {
            // 异常请求
            logger.error(clazz_name+"支付回调异常请求");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调验签结束=======================END====================");

        logger.info("==========================处理订单回调业务并修改订单状态==========================");
        String result = notifyService.processNotifyOrder(rechargeOrderVO);
        if(ResultResponse.SUCCESS_CODE.equals(result)){
            logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
            return ret__success;
        }
        logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
        return ret_str_failed;
    } catch (Exception e) {
        e.printStackTrace();
        logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
        return ret_str_failed;
    }finally {
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
            payMap.remove(order_no);
        }
    }
}   
/**
*
* @Description  QGZF钱柜支付回调通知
* @param request
* @param response
* @param session
* @return
*/
@RequestMapping("/QGZFNotify.do")
@ResponseBody
public String QGZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
   String ret__success = "SUCCESS";//收到通知后请回复  success
   String clazz_name = "QGZFNotify";
   logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
   Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
   if(infoMap == null || infoMap.isEmpty()){
       logger.info(clazz_name+"支付回调获取请求参数为空!");
       return ret_str_failed;
   }
   logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
   //=================================获取回调基本参数结果--START===========================//
   String order_amount = infoMap.get("pay_money");
   if(StringUtils.isNullOrEmpty(order_amount)){
       logger.info(clazz_name+"获取实际支付金额为空!");
       return ret_str_failed;
   }
   String order_no = infoMap.get("out_trade_no");// 平台订单号
   String trade_no = infoMap.get("system_order_sn");//支付商订单号
   String trade_status = infoMap.get("status");//0 是接收订单  1 付款中 2 已支付 3 支付失败 4 已退款
   String t_trade_status = "2";//2:成功
   String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
   //=================================获取回调基本参数结果--END===========================//
   if (payMap.containsKey(order_no)) {
       logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
       return ret_str_failed;
   }
   payMap.put(order_no, "1");
   try {
       logger.info(clazz_name+"执行回调业务开始=========================START===========================");
       // 保存文件记录
       savePayFile(clazz_name, infoMap, IPTools.getIp(request));
       //通过订单号查询订单信息
       RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
       if(rechargeOrderVO == null){
           logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
           return ret__success;
       }
       rechargeOrderVO.setTradeNo(trade_no);
       rechargeOrderVO.setTradeStatus(trade_status);
       rechargeOrderVO.setSuccessStatus(t_trade_status);
       rechargeOrderVO.setNotifyIp(ip);
       rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
       rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
       Integer payId = rechargeOrderVO.getPayId();//支付商ID
       //查询支付商信息
       CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
       if(cagentYespayVO == null){
           logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
           return ret_str_failed;
       }
       String paymentName = cagentYespayVO.getPaymentName();//支付商编码
       Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
       logger.info(clazz_name+"支付回调验签开始=======================START====================");
       if (paymentName.equals(PayConstant.CONSTANT_QGZF)) {
          QGZFPayServiceImpl xxb = new QGZFPayServiceImpl(pmapsconfig);
           String rmsg = xxb.callback(infoMap);
           if (!"success".equalsIgnoreCase(rmsg)) {
               logger.info(clazz_name+"支付回调验签失败!");

               notifyService.updateNotifyOrderDescription(rechargeOrderVO);
               return ret_str_failed;
           }
           logger.info(clazz_name+"支付回调验签成功!");
       } else {
           // 异常请求
           logger.error(clazz_name+"支付回调异常请求");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调验签结束=======================END====================");

       logger.info("==========================处理订单回调业务并修改订单状态==========================");
       String result = notifyService.processNotifyOrder(rechargeOrderVO);
       if(ResultResponse.SUCCESS_CODE.equals(result)){
           logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
           return ret__success;
       }
       logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
       return ret_str_failed;
   } catch (Exception e) {
       e.printStackTrace();
       logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
       return ret_str_failed;
   }finally {
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
           payMap.remove(order_no);
       }
   }
}   
    /**
   *
   * @Description  宜橙支付回调通知
   * @param request
   * @param response
   * @param session
   * @return
   */
  @RequestMapping("/YICZFNotify.do")
  @ResponseBody
  public String YICZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
      String ret__success = "SUCCESS";//收到通知后请回复  success
      String clazz_name = "YICZFNotify";
      logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
      Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
      if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
      }
      logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
      //=================================获取回调基本参数结果--START===========================//
      String order_no = infoMap.get("orderid");// 平台订单号
      String trade_no = infoMap.get("sysorderid");//流水号
      String trade_status = infoMap.get("opstate");//0:成功，其他失败
      String t_trade_status = "0";//0:成功
      String order_amount = infoMap.get("ovalue");
      if (StringUtils.isNullOrEmpty(order_amount)) {
          logger.info(clazz_name+"获取实际支付金额为空!");
          return ret_str_failed;
      }
      String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
      //=================================获取回调基本参数结果--END===========================//
      if (payMap.containsKey(order_no)) {
          logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
          return ret_str_failed;
      }
      payMap.put(order_no, "1");
      try {
          logger.info(clazz_name+"执行回调业务开始=========================START===========================");
          // 保存文件记录
          savePayFile(clazz_name, infoMap, IPTools.getIp(request));
          //通过订单号查询订单信息
          RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
          if(rechargeOrderVO == null){
              logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
              return ret__success;
          }
          rechargeOrderVO.setTradeNo(trade_no);
          rechargeOrderVO.setTradeStatus(trade_status);
          rechargeOrderVO.setSuccessStatus(t_trade_status);
          rechargeOrderVO.setNotifyIp(ip);
          rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
          rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
          Integer payId = rechargeOrderVO.getPayId();//支付商ID
          //查询支付商信息
          CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
          if(cagentYespayVO == null){
              logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
              return ret_str_failed;
          }
          String paymentName = cagentYespayVO.getPaymentName();//支付商编码
          Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
          logger.info(clazz_name+"支付回调验签开始=======================START====================");
          if (paymentName.equals(PayConstant.CONSTANT_YICZF)) {
              YICZFPayServiceImpl yic = new YICZFPayServiceImpl(pmapsconfig);
              String rmsg = yic.callback(infoMap);
              if (!"success".equalsIgnoreCase(rmsg)) {
                  logger.info(clazz_name+"支付回调验签失败!");

                  notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                  return ret_str_failed;
              }
              logger.info(clazz_name+"支付回调验签成功!");
          } else {
              // 异常请求
              logger.error(clazz_name+"支付回调异常请求");
              return ret_str_failed;
          }
          logger.info(clazz_name+"支付回调验签结束=======================END====================");

          logger.info("==========================处理订单回调业务并修改订单状态==========================");
          String result = notifyService.processNotifyOrder(rechargeOrderVO);
          if(ResultResponse.SUCCESS_CODE.equals(result)){
              logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
              return ret__success;
          }
          logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
          return ret_str_failed;
      } catch (Exception e) {
          e.printStackTrace();
          logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
          return ret_str_failed;
      }finally {
          if (payMap.containsKey(order_no)) {
              logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
              payMap.remove(order_no);
          }
      }
  }
  /**
   *
   * @Description  易收支付回调通知
   * @param request
   * @param response
   * @param session
   * @return
   */
  @RequestMapping("/YISZFNotify.do")
  @ResponseBody
  public String YISZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
      String ret__success = "success";//收到通知后请回复  success
      String clazz_name = "YISZFNotify";
      logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
      Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
      if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
      }
      logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
      //=================================获取回调基本参数结果--START===========================//
      String order_no = infoMap.get("sdorderno");// 平台订单号
      String trade_no = infoMap.get("sdpayno");//流水号
      String trade_status = infoMap.get("status");//0:成功，其他失败
      String t_trade_status = "1";//0:成功
      String order_amount = infoMap.get("total_fee");
      if(StringUtils.isNullOrEmpty(order_amount)){
          logger.info(clazz_name+"获取实际支付金额为空!");
          return ret_str_failed;
      }
      String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
      //=================================获取回调基本参数结果--END===========================//
      if (payMap.containsKey(order_no)) {
          logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
          return ret_str_failed;
      }
      payMap.put(order_no, "1");
      try {
          logger.info(clazz_name+"执行回调业务开始=========================START===========================");
          // 保存文件记录
          savePayFile(clazz_name, infoMap, IPTools.getIp(request));
          //通过订单号查询订单信息
          RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
          if(rechargeOrderVO == null){
              logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
              return ret__success;
          }
          rechargeOrderVO.setTradeNo(trade_no);
          rechargeOrderVO.setTradeStatus(trade_status);
          rechargeOrderVO.setSuccessStatus(t_trade_status);
          rechargeOrderVO.setNotifyIp(ip);
          rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
          rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
          Integer payId = rechargeOrderVO.getPayId();//支付商ID
          //查询支付商信息
          CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
          if(cagentYespayVO == null){
              logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
              return ret_str_failed;
          }
          String paymentName = cagentYespayVO.getPaymentName();//支付商编码
          Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
          logger.info(clazz_name+"支付回调验签开始=======================START====================");
          if (paymentName.equals(PayConstant.CONSTANT_YISZF)) {
              YISZFPayServiceImpl yis = new YISZFPayServiceImpl(pmapsconfig);
              String rmsg = yis.callback(infoMap);
              if (!"success".equalsIgnoreCase(rmsg)) {
                  logger.info(clazz_name+"支付回调验签失败!");

                  notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                  return ret_str_failed;
              }
              logger.info(clazz_name+"支付回调验签成功!");
          } else {
              // 异常请求
              logger.error(clazz_name+"支付回调异常请求");
              return ret_str_failed;
          }
          logger.info(clazz_name+"支付回调验签结束=======================END====================");

          logger.info("==========================处理订单回调业务并修改订单状态==========================");
          String result = notifyService.processNotifyOrder(rechargeOrderVO);
          if(ResultResponse.SUCCESS_CODE.equals(result)){
              logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
              return ret__success;
          }
          logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
          return ret_str_failed;
      } catch (Exception e) {
          e.printStackTrace();
          logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
          return ret_str_failed;
      }finally {
          if (payMap.containsKey(order_no)) {
              logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
              payMap.remove(order_no);
          }
      }
  }
    /**
   *
   * @Description  宝富支付回调通知
   * @param request
   * @param response
   * @param session
   * @return
   */
  @RequestMapping("/BFZFNotify.do")
  @ResponseBody
  public String BFZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
      String ret__success = "OK";//收到通知后请回复  success
      String clazz_name = "BFZFNotify";
      logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
      Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
      if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
      }
      logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
      //=================================获取回调基本参数结果--START===========================//
      String order_no = infoMap.get("orderid");// 平台订单号
      String trade_no = infoMap.get("transaction_id");//流水号
      String trade_status = infoMap.get("returncode");//0:成功，其他失败
      String t_trade_status = "00";//00:成功
      String order_amount = infoMap.get("amount");
      if(StringUtils.isNullOrEmpty(order_amount)){
          logger.info(clazz_name+"获取实际支付金额为空!");
          return ret_str_failed;
      }
      String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
      //=================================获取回调基本参数结果--END===========================//
      if (payMap.containsKey(order_no)) {
          logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
          return ret_str_failed;
      }
      payMap.put(order_no, "1");
      try {
          logger.info(clazz_name+"执行回调业务开始=========================START===========================");
          // 保存文件记录
          savePayFile(clazz_name, infoMap, IPTools.getIp(request));
          //通过订单号查询订单信息
          RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
          if(rechargeOrderVO == null){
              logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
              return ret__success;
          }
          rechargeOrderVO.setTradeNo(trade_no);
          rechargeOrderVO.setTradeStatus(trade_status);
          rechargeOrderVO.setSuccessStatus(t_trade_status);
          rechargeOrderVO.setNotifyIp(ip);
          rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
          rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
          Integer payId = rechargeOrderVO.getPayId();//支付商ID
          //查询支付商信息
          CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
          if(cagentYespayVO == null){
              logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
              return ret_str_failed;
          }
          String paymentName = cagentYespayVO.getPaymentName();//支付商编码
          Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
          logger.info(clazz_name+"支付回调验签开始=======================START====================");
          if (paymentName.equals(PayConstant.CONSTANT_BFZF)) {
              BFZFPayServiceImpl bf = new BFZFPayServiceImpl(pmapsconfig);
              String rmsg = bf.callback(infoMap);
              if (!"success".equalsIgnoreCase(rmsg)) {
                  logger.info(clazz_name+"支付回调验签失败!");

                  notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                  return ret_str_failed;
              }
              logger.info(clazz_name+"支付回调验签成功!");
          } else {
              // 异常请求
              logger.error(clazz_name+"支付回调异常请求");
              return ret_str_failed;
          }
          logger.info(clazz_name+"支付回调验签结束=======================END====================");

          logger.info("==========================处理订单回调业务并修改订单状态==========================");
          String result = notifyService.processNotifyOrder(rechargeOrderVO);
          if(ResultResponse.SUCCESS_CODE.equals(result)){
              logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
              return ret__success;
          }
          logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
          return ret_str_failed;
      } catch (Exception e) {
          e.printStackTrace();
          logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
          return ret_str_failed;
      }finally {
          if (payMap.containsKey(order_no)) {
              logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
              payMap.remove(order_no);
          }
      }
  }

	  /**
	   * 新YZF 支付
	   */
	  @RequestMapping("/YZFZFNotify.do")
	  @ResponseBody
	  public String YZFZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session){
	  	logger.info("YZFZFNotify 新YZF支付开始回调调用------------");
	  	String clazz_name = "新YZF支付回调";
	  	String ret_success = "success";
	  	Map<String,String> infoMap = new TreeMap<String,String>();
	  	try{
	  		String str = HttpUtil.getRequestBody(request);
	        logger.info("回调函数获取的参数: {}",str);
	        infoMap.putAll(XMLUtils.formatXMlToMap(str));
	  		logger.info("{}获取参数完成,参数值:{}", clazz_name, infoMap);

	  	}catch(Exception e){
	  		e.printStackTrace();
	  		logger.error("{}出现错误...",clazz_name, e.getMessage());
	  	}
	  	logger.info("{} 参数:{}", clazz_name, infoMap);

	  	if(infoMap == null || infoMap.isEmpty()){
	          logger.info("{}支付回调获取请求参数为空!", clazz_name);
	          return ret_str_failed;
	    }
	  	logger.info("{} 支付回调请求参数:{}",clazz_name ,infoMap);

	  	  String order_no = infoMap.get("out_trade_no");// 平台订单号
	      String trade_no = System.currentTimeMillis()+"";
	      String trade_status = infoMap.get("status");
	      String t_trade_status = "0";//订单状态：0支付成功
	      String price = infoMap.get("total_fee");
	      if(StringUtils.isNullOrEmpty(price)){
	      	logger.info("{}实际支付金额为null",price);
	      	return ret_str_failed;
	      }
	      double money = Double.valueOf(price)/100;//回调，以 分为单位,需要除以 100
	      String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);

	      logger.info("{} 会员实际支付金额:{}",clazz_name, money);

	      if (payMap.containsKey(order_no)) {
	          logger.info("{}支付回调订单号:{}重复调用",clazz_name,order_no);
	          return ret_str_failed;
	      }
	      payMap.put(order_no, "1");

	      try {
	          logger.info("{}执行回调业务开始=========================START===========================",clazz_name);
	          //通过订单号查询订单信息
	          RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
	          if(rechargeOrderVO == null){
	              logger.info("{}支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",clazz_name, order_no);
	              return ret_success;
	          }
	          rechargeOrderVO.setTradeNo(trade_no);
	          rechargeOrderVO.setTradeStatus(trade_status);
	          rechargeOrderVO.setSuccessStatus(t_trade_status);
	          rechargeOrderVO.setNotifyIp(ip);
	          rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
	          rechargeOrderVO.setOrderAmount(money);
	          Integer payId = rechargeOrderVO.getPayId();//支付商ID
	          //查询支付商信息
	          CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
	          if(cagentYespayVO == null){
	              logger.info("{} 非法支付商ID,查询支付商信息失败,支付商ID:{}",clazz_name, payId);
	              return ret_str_failed;
	          }
	          String paymentName = cagentYespayVO.getPaymentName();//支付商编码
	          Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
	          logger.info("支付回调验签开始=======================START====================", clazz_name);
	          if (paymentName.equals(PayConstant.CONSTANT_YZFZF)) {
	          	YZFZFPayServiceImpl xxb = new YZFZFPayServiceImpl(pmapsconfig);
	              String rmsg = xxb.callback(infoMap);
	              if (!"success".equalsIgnoreCase(rmsg)) {
	                  logger.info("{}支付回调验签失败!", clazz_name);

	                  notifyService.updateNotifyOrderDescription(rechargeOrderVO);
	                  return ret_str_failed;
	              }
	              logger.info("{}支付回调验签成功!",clazz_name);
	          } else {
	              // 异常请求
	              logger.error("{}支付回调异常请求",clazz_name);
	              return ret_str_failed;
	          }
	          logger.info("{}支付回调验签结束=======================END====================",clazz_name);

	          logger.info("==========================处理订单回调业务并修改订单状态==========================");
	          String result = notifyService.processNotifyOrder(rechargeOrderVO);
	          if(ResultResponse.SUCCESS_CODE.equals(result)){
	              logger.info("{}支付回调业务处理成功=======================SUCCESS====================", clazz_name);
	              return ret_success;
	          }
	          logger.info("{} 支付回调业务处理成功=======================FAILD====================",clazz_name);
	          return ret_str_failed;
	      } catch (Exception e) {
	          e.printStackTrace();
	          logger.info("{}支付回调业务处理异常:{}",clazz_name, e.getMessage());
	          return ret_str_failed;
	      }finally {
	          if (payMap.containsKey(order_no)) {
	              logger.info("支付回调业务处理成功,删除缓存中的订单KEY:{}",clazz_name, order_no);
	              payMap.remove(order_no);
	          }
	      }
	  }

     /**
   *
   * @Description  简付支付回调通知
   * @param request
   * @param response
   * @param session
   * @return
   */
  @RequestMapping("/JIANNotify.do")
  @ResponseBody
  public String JIANNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
      String ret__success = "success";//收到通知后请回复  success
      String clazz_name = "JIANNotify";
      logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
      Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
      if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
      }
      logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
      //=================================获取回调基本参数结果--START===========================//
      String order_no = infoMap.get("user_order");// 平台订单号
      String trade_no = "jian"+System.currentTimeMillis();//流水号
      String trade_status = infoMap.get("user_status");//0:成功，其他失败
      String t_trade_status = "1";//1支付成功     0支付失败
      String order_amount = infoMap.get("user_money");
      if(StringUtils.isNullOrEmpty(order_amount)){
          logger.info(clazz_name+"获取实际支付金额为空!");
          return ret_str_failed;
      }
      String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
      //=================================获取回调基本参数结果--END===========================//
      if (payMap.containsKey(order_no)) {
          logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
          return ret_str_failed;
      }
      payMap.put(order_no, "1");
      try {
          logger.info(clazz_name+"执行回调业务开始=========================START===========================");
          // 保存文件记录
          savePayFile(clazz_name, infoMap, IPTools.getIp(request));
          //通过订单号查询订单信息
          RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
          if(rechargeOrderVO == null){
              logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
              return ret__success;
          }
          rechargeOrderVO.setTradeNo(trade_no);
          rechargeOrderVO.setTradeStatus(trade_status);
          rechargeOrderVO.setSuccessStatus(t_trade_status);
          rechargeOrderVO.setNotifyIp(ip);
          rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
          rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
          Integer payId = rechargeOrderVO.getPayId();//支付商ID
          //查询支付商信息
          CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
          if(cagentYespayVO == null){
              logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
              return ret_str_failed;
          }
          String paymentName = cagentYespayVO.getPaymentName();//支付商编码
          Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
          logger.info(clazz_name+"支付回调验签开始=======================START====================");
          if (paymentName.equals(PayConstant.CONSTANT_JIAN)) {
        	  JIANPayServiceImpl jian = new JIANPayServiceImpl(pmapsconfig);
              String rmsg = jian.callback(infoMap);
              if (!"success".equalsIgnoreCase(rmsg)) {
                  logger.info(clazz_name+"支付回调验签失败!");

                  notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                  return ret_str_failed;
              }
              logger.info(clazz_name+"支付回调验签成功!");
          } else {
              // 异常请求
              logger.error(clazz_name+"支付回调异常请求");
              return ret_str_failed;
          }
          logger.info(clazz_name+"支付回调验签结束=======================END====================");

          logger.info("==========================处理订单回调业务并修改订单状态==========================");
          String result = notifyService.processNotifyOrder(rechargeOrderVO);
          if(ResultResponse.SUCCESS_CODE.equals(result)){
              logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
              return ret__success;
          }
          logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
          return ret_str_failed;
      } catch (Exception e) {
          e.printStackTrace();
          logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
          return ret_str_failed;
      }finally {
          if (payMap.containsKey(order_no)) {
              logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
              payMap.remove(order_no);
          }
      }
  }
     /**
   *
   * @Description  蝙蝠侠支付回调通知
   * @param request
   * @param response
   * @param session
   * @return
   */
  @RequestMapping("/BATNotify.do")
  @ResponseBody
  public String BATNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
      String ret__success = "success";//收到通知后请回复  success
      String clazz_name = "BATNotify";
      logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
      Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
      if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
      }
      logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
      //=================================获取回调基本参数结果--START===========================//
      String order_no = infoMap.get("ddh");// 平台订单号
      String trade_no = "bat"+System.currentTimeMillis();//流水号
      String trade_status = infoMap.get("status");//0:成功，其他失败
      String t_trade_status = "success";//success:成功，fail失败
      String order_amount = infoMap.get("je");
      if(StringUtils.isNullOrEmpty(order_amount)){
          logger.info(clazz_name+"获取实际支付金额为空!");
          return ret_str_failed;
      }
      String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
      //=================================获取回调基本参数结果--END===========================//
      if (payMap.containsKey(order_no)) {
          logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
          return ret_str_failed;
      }
      payMap.put(order_no, "1");
      try {
          logger.info(clazz_name+"执行回调业务开始=========================START===========================");
          // 保存文件记录
          savePayFile(clazz_name, infoMap, IPTools.getIp(request));
          //通过订单号查询订单信息
          RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
          if(rechargeOrderVO == null){
              logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
              return ret__success;
          }
          rechargeOrderVO.setTradeNo(trade_no);
          rechargeOrderVO.setTradeStatus(trade_status);
          rechargeOrderVO.setSuccessStatus(t_trade_status);
          rechargeOrderVO.setNotifyIp(ip);
          rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
          rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
          Integer payId = rechargeOrderVO.getPayId();//支付商ID
          //查询支付商信息
          CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
          if(cagentYespayVO == null){
              logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
              return ret_str_failed;
          }
          String paymentName = cagentYespayVO.getPaymentName();//支付商编码
          Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
          logger.info(clazz_name+"支付回调验签开始=======================START====================");
          if (paymentName.equals(PayConstant.CONSTANT_BAT)) {
        	  BATPayServiceImpl bat = new BATPayServiceImpl(pmapsconfig);
              String rmsg = bat.callback(infoMap);
              if (!"success".equalsIgnoreCase(rmsg)) {
                  logger.info(clazz_name+"支付回调验签失败!");

                  notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                  return ret_str_failed;
              }
              logger.info(clazz_name+"支付回调验签成功!");
          } else {
              // 异常请求
              logger.error(clazz_name+"支付回调异常请求");
              return ret_str_failed;
          }
          logger.info(clazz_name+"支付回调验签结束=======================END====================");

          logger.info("==========================处理订单回调业务并修改订单状态==========================");
          String result = notifyService.processNotifyOrder(rechargeOrderVO);
          if(ResultResponse.SUCCESS_CODE.equals(result)){
              logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
              return ret__success;
          }
          logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
          return ret_str_failed;
      } catch (Exception e) {
          e.printStackTrace();
          logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
          return ret_str_failed;
      }finally {
          if (payMap.containsKey(order_no)) {
              logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
              payMap.remove(order_no);
          }
      }
  }
  /**
   *
   * @Description  全付通支付回调通知
   * @param request
   * @param response
   * @param session
   * @return
   */
  @RequestMapping("/QFTZFNotify.do")
  @ResponseBody
  public String QFTZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
      String ret__success = "success";//收到通知后请回复  success
      String clazz_name = "QFTZFNotify";
      logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
      Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
      if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
      }
      logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
      //=================================获取回调基本参数结果--START===========================//
      String order_no = infoMap.get("r6_Order");// 平台订单号
      String trade_no = infoMap.get("r2_TrxId");//流水号
      String trade_status = infoMap.get("r1_Code");//0:成功，其他失败
      String t_trade_status = "1";//success:成功，fail失败
      String order_amount = infoMap.get("r3_Amt");
      if(StringUtils.isNullOrEmpty(order_amount)){
          logger.info(clazz_name+"获取实际支付金额为空!");
          return ret_str_failed;
      }
      String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
      //=================================获取回调基本参数结果--END===========================//
      if (payMap.containsKey(order_no)) {
          logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
          return ret_str_failed;
      }
      payMap.put(order_no, "1");
      try {
          logger.info(clazz_name+"执行回调业务开始=========================START===========================");
          // 保存文件记录
          savePayFile(clazz_name, infoMap, IPTools.getIp(request));
          //通过订单号查询订单信息
          RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
          if(rechargeOrderVO == null){
              logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
              return ret__success;
          }
          rechargeOrderVO.setTradeNo(trade_no);
          rechargeOrderVO.setTradeStatus(trade_status);
          rechargeOrderVO.setSuccessStatus(t_trade_status);
          rechargeOrderVO.setNotifyIp(ip);
          rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
          rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
          Integer payId = rechargeOrderVO.getPayId();//支付商ID
          //查询支付商信息
          CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
          if(cagentYespayVO == null){
              logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
              return ret_str_failed;
          }
          String paymentName = cagentYespayVO.getPaymentName();//支付商编码
          Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
          logger.info(clazz_name+"支付回调验签开始=======================START====================");
          if (paymentName.equals(PayConstant.CONSTANT_QFTZF)) {
        	  QFTZFPayServiceImpl qft = new QFTZFPayServiceImpl(pmapsconfig);
              String rmsg = qft.callback(infoMap);
              if (!"success".equalsIgnoreCase(rmsg)) {
                  logger.info(clazz_name+"支付回调验签失败!");

                  notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                  return ret_str_failed;
              }
              logger.info(clazz_name+"支付回调验签成功!");
          } else {
              // 异常请求
              logger.error(clazz_name+"支付回调异常请求");
              return ret_str_failed;
          }
          logger.info(clazz_name+"支付回调验签结束=======================END====================");

          logger.info("==========================处理订单回调业务并修改订单状态==========================");
          String result = notifyService.processNotifyOrder(rechargeOrderVO);
          if(ResultResponse.SUCCESS_CODE.equals(result)){
              logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
              return ret__success;
          }
          logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
          return ret_str_failed;
      } catch (Exception e) {
          e.printStackTrace();
          logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
          return ret_str_failed;
      }finally {
          if (payMap.containsKey(order_no)) {
              logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
              payMap.remove(order_no);
          }
      }
  }
  /**
  *
  * @Description  PAYS支付回调通知
  * @param request
  * @param response
  * @param session
  * @return
  */
  @RequestMapping("/PAYSNotify.do")
  @ResponseBody
  public JSONObject PAYSNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
	 JSONObject ret__success = new JSONObject();
	 ret__success.put("ret_code", "0000");
	 ret__success.put("ret_msg", "ok");
	 JSONObject ret_str_failed = new JSONObject();
	 ret_str_failed.put("ret_code", "0001");
	 ret_str_failed.put("ret_msg", "fail");
     String clazz_name = "PAYSNotify";
     logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
     Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
     if(infoMap == null || infoMap.isEmpty()){
         logger.info(clazz_name+"支付回调获取请求参数为空!");
         return ret_str_failed;
     }
     logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
     //=================================获取回调基本参数结果--START===========================//
     String order_amount = infoMap.get("confirm_money");
     if(StringUtils.isNullOrEmpty(order_amount)){
         logger.info(clazz_name+"获取实际支付金额为空!");
         return ret_str_failed;
     }
     String order_no = infoMap.get("no_order");// 平台订单号
     String trade_no = "PAYS"+System.currentTimeMillis();//支付商订单号
     String trade_status = infoMap.get("pay_state");//0 支付中 1支付成功 3支付超时 4支付失败
     String t_trade_status = "1";//1:成功
     String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
     //=================================获取回调基本参数结果--END===========================//
     if (payMap.containsKey(order_no)) {
         logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
         return ret_str_failed;
     }
     payMap.put(order_no, "1");
     try {
         logger.info(clazz_name+"执行回调业务开始=========================START===========================");
         // 保存文件记录
         savePayFile(clazz_name, infoMap, IPTools.getIp(request));
         //通过订单号查询订单信息
         RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
         if(rechargeOrderVO == null){
             logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
             return ret__success;
         }
         rechargeOrderVO.setTradeNo(trade_no);
         rechargeOrderVO.setTradeStatus(trade_status);
         rechargeOrderVO.setSuccessStatus(t_trade_status);
         rechargeOrderVO.setNotifyIp(ip);
         rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
         rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
         Integer payId = rechargeOrderVO.getPayId();//支付商ID
         //查询支付商信息
         CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
         if(cagentYespayVO == null){
             logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
             return ret_str_failed;
         }
         String paymentName = cagentYespayVO.getPaymentName();//支付商编码
         Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
         logger.info(clazz_name+"支付回调验签开始=======================START====================");
         if (paymentName.equals(PayConstant.CONSTANT_PAYS)) {
       	  PAYSPayServiceImpl xxb = new PAYSPayServiceImpl(pmapsconfig);
             String rmsg = xxb.callback(infoMap);
             if (!"success".equalsIgnoreCase(rmsg)) {
                 logger.info(clazz_name+"支付回调验签失败!");

                 notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                 return ret_str_failed;
             }
             logger.info(clazz_name+"支付回调验签成功!");
         } else {
             // 异常请求
             logger.error(clazz_name+"支付回调异常请求");
             return ret_str_failed;
         }
         logger.info(clazz_name+"支付回调验签结束=======================END====================");

         logger.info("==========================处理订单回调业务并修改订单状态==========================");
         String result = notifyService.processNotifyOrder(rechargeOrderVO);
         if(ResultResponse.SUCCESS_CODE.equals(result)){
             logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
             return ret__success;
         }
         logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
         return ret_str_failed;
     } catch (Exception e) {
         e.printStackTrace();
         logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
         return ret_str_failed;
     }finally {
         if (payMap.containsKey(order_no)) {
             logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
             payMap.remove(order_no);
         }
     }
  }
  /**
  *
  * @Description  GBZF国宝支付回调通知
  * @param request
  * @param response
  * @param session
  * @return
  */
  @RequestMapping("/GBZFNotify.do")
  @ResponseBody
  public String GBZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
     String ret__success = "success";//收到通知后请回复  success
     String clazz_name = "GBZFNotify";
     logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
     Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
     if(infoMap == null || infoMap.isEmpty()){
         logger.info(clazz_name+"支付回调获取请求参数为空!");
         return ret_str_failed;
     }
     logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
     //=================================获取回调基本参数结果--START===========================//
     String order_amount = infoMap.get("tradeAmount");
     if(StringUtils.isNullOrEmpty(order_amount)){
         logger.info(clazz_name+"获取实际支付金额为空!");
         return ret_str_failed;
     }
     String order_no = infoMap.get("merchOrderNo");// 平台订单号
     String trade_no = infoMap.get("platformOrderNo");//支付商订单号
     String trade_status = infoMap.get("status");//1代表支付成功
     String t_trade_status = "1";//1:成功
     String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
     //=================================获取回调基本参数结果--END===========================//
     if (payMap.containsKey(order_no)) {
         logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
         return ret_str_failed;
     }
     payMap.put(order_no, "1");
     try {
         logger.info(clazz_name+"执行回调业务开始=========================START===========================");
         // 保存文件记录
         savePayFile(clazz_name, infoMap, IPTools.getIp(request));
         //通过订单号查询订单信息
         RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
         if(rechargeOrderVO == null){
             logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
             return ret__success;
         }
         rechargeOrderVO.setTradeNo(trade_no);
         rechargeOrderVO.setTradeStatus(trade_status);
         rechargeOrderVO.setSuccessStatus(t_trade_status);
         rechargeOrderVO.setNotifyIp(ip);
         rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
         rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
         Integer payId = rechargeOrderVO.getPayId();//支付商ID
         //查询支付商信息
         CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
         if(cagentYespayVO == null){
             logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
             return ret_str_failed;
         }
         String paymentName = cagentYespayVO.getPaymentName();//支付商编码
         Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
         logger.info(clazz_name+"支付回调验签开始=======================START====================");
         if (paymentName.equals(PayConstant.CONSTANT_GBZF)) {
       	  GBZFPayServiceImpl xxb = new GBZFPayServiceImpl(pmapsconfig);
             String rmsg = xxb.callback(infoMap);
             if (!"success".equalsIgnoreCase(rmsg)) {
                 logger.info(clazz_name+"支付回调验签失败!");

                 notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                 return ret_str_failed;
             }
             logger.info(clazz_name+"支付回调验签成功!");
         } else {
             // 异常请求
             logger.error(clazz_name+"支付回调异常请求");
             return ret_str_failed;
         }
         logger.info(clazz_name+"支付回调验签结束=======================END====================");

         logger.info("==========================处理订单回调业务并修改订单状态==========================");
         String result = notifyService.processNotifyOrder(rechargeOrderVO);
         if(ResultResponse.SUCCESS_CODE.equals(result)){
             logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
             return ret__success;
         }
         logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
         return ret_str_failed;
     } catch (Exception e) {
         e.printStackTrace();
         logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
         return ret_str_failed;
     }finally {
         if (payMap.containsKey(order_no)) {
             logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
             payMap.remove(order_no);
         }
     }
  }

  /**
   *
   * @Description 迅驰支付回调通知
   * @param request
   * @param response
   * @param session
   * @return
   */
  @RequestMapping("/XUNCNotify.do")
  @ResponseBody
  public String XUNCNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
     String ret__success = "success";//收到通知后请回复  success
     String clazz_name = "XUNCNotify";
     logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
     Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
     if(infoMap == null || infoMap.isEmpty()){
         logger.info(clazz_name+"支付回调获取请求参数为空!");
         return ret_str_failed;
     }
     String returnData = JSONObject.fromObject(infoMap).getString("return_type");
     infoMap = JSONObject.fromObject(returnData);
     logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
     //=================================获取回调基本参数结果--START===========================//
     String order_amount = infoMap.get("price");
     if(StringUtils.isNullOrEmpty(order_amount)){
         logger.info(clazz_name+"获取实际支付金额为空!");
         return ret_str_failed;
     }
     String order_no = infoMap.get("order_id");// 平台订单号
     String trade_no = "XUNC"+System.currentTimeMillis();//支付商订单号
     String trade_status = "000";//0 支付中 1支付成功 3支付超时 4支付失败
     String t_trade_status = "000";//1:成功
     String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
     //=================================获取回调基本参数结果--END===========================//
     if (payMap.containsKey(order_no)) {
         logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
         return ret_str_failed;
     }
     payMap.put(order_no, "1");
     try {
         logger.info(clazz_name+"执行回调业务开始=========================START===========================");
         // 保存文件记录
         savePayFile(clazz_name, infoMap, IPTools.getIp(request));
         //通过订单号查询订单信息
         RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
         if(rechargeOrderVO == null){
             logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
             return ret__success;
         }
         rechargeOrderVO.setTradeNo(trade_no);
         rechargeOrderVO.setTradeStatus(trade_status);
         rechargeOrderVO.setSuccessStatus(t_trade_status);
         rechargeOrderVO.setNotifyIp(ip);
         rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
         rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
         Integer payId = rechargeOrderVO.getPayId();//支付商ID
         //查询支付商信息
         CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
         if(cagentYespayVO == null){
             logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
             return ret_str_failed;
         }
         String paymentName = cagentYespayVO.getPaymentName();//支付商编码
         Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
         logger.info(clazz_name+"支付回调验签开始=======================START====================");
         if (paymentName.equals(PayConstant.CONSTANT_XUNC)) {
             XUNCPayServiceImpl xxb = new XUNCPayServiceImpl(pmapsconfig);
             String rmsg = xxb.callback(infoMap);
             if (!"success".equalsIgnoreCase(rmsg)) {
                 logger.info(clazz_name+"支付回调验签失败!");

                 notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                 return ret_str_failed;
             }
             logger.info(clazz_name+"支付回调验签成功!");
         } else {
             // 异常请求
             logger.error(clazz_name+"支付回调异常请求");
             return ret_str_failed;
         }
         logger.info(clazz_name+"支付回调验签结束=======================END====================");

         logger.info("==========================处理订单回调业务并修改订单状态==========================");
         String result = notifyService.processNotifyOrder(rechargeOrderVO);
         if(ResultResponse.SUCCESS_CODE.equals(result)){
             logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
             return ret__success;
         }
         logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
         return ret_str_failed;
     } catch (Exception e) {
         e.printStackTrace();
         logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
         return ret_str_failed;
     }finally {
         if (payMap.containsKey(order_no)) {
             logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
             payMap.remove(order_no);
         }
     }
  }





    /**
     *
     * @Description  宏达支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/HDZFNotify.do")
    @ResponseBody
    public String HDZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "HDZFNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getHDZFNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
            logger.info(clazz_name+"支付回调获取请求参数为空!");
            return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("out_order_id");// 平台订单号
        String trade_no = "HD"+System.currentTimeMillis();//流水号
        String trade_status = "1";//0:成功，其他失败
        String t_trade_status = "1";//success:成功，fail失败
        String order_amount = infoMap.get("money");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_HDZF)) {
                HDZFPayServiceImpl qft = new HDZFPayServiceImpl(pmapsconfig);
                String rmsg = qft.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }
    /**
    *
    * @Description  HONGY鸿运支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
    @RequestMapping("/HONGYNotify.do")
    @ResponseBody
    public String HONGYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "OK";//收到通知后请回复  OK
       String clazz_name = "HONGYNotify";
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
           logger.info(clazz_name+"支付回调获取请求参数为空!");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       //=================================获取回调基本参数结果--START===========================//
       String order_amount = infoMap.get("amount");
       if(StringUtils.isNullOrEmpty(order_amount)){
           logger.info(clazz_name+"获取实际支付金额为空!");
           return ret_str_failed;
       }
       String order_no = infoMap.get("orderid");// 平台订单号
       String trade_no = infoMap.get("transaction_id");//交易流水号
       String trade_status = infoMap.get("returncode");//00代表支付成功
       String t_trade_status = "00";//00:成功
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_HONGY)) {
         	  HONGYPayServiceImpl xxb = new HONGYPayServiceImpl(pmapsconfig);
               String rmsg = xxb.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");

                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           }
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
    }
    /**
    *
    * @Description  WZZF五洲支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
    @RequestMapping("/WZZFNotify.do")
    @ResponseBody
    public String WZZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "OK";//收到通知后请回复  OK
       String clazz_name = "WZZFNotify";
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
           logger.info(clazz_name+"支付回调获取请求参数为空!");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       //=================================获取回调基本参数结果--START===========================//
       String order_amount = infoMap.get("amount");
       if(StringUtils.isNullOrEmpty(order_amount)){
           logger.info(clazz_name+"获取实际支付金额为空!");
           return ret_str_failed;
       }
       String order_no = infoMap.get("orderid");// 平台订单号
       String trade_no = infoMap.get("transaction_id");//交易流水号
       String trade_status = infoMap.get("returncode");//00代表支付成功
       String t_trade_status = "00";//00:成功
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_WZZF)) {
        	   WZZFPayServiceImpl xxb = new WZZFPayServiceImpl(pmapsconfig);
               String rmsg = xxb.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");

                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           }
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
    }
    /**
    *
    * @Description  YXZF云悉支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
   /* @RequestMapping("/YXZFNotify.do")
    @ResponseBody
    public String YXZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "success";//收到通知后请回复  success
       String clazz_name = "YXZFNotify";
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
           logger.info(clazz_name+"支付回调获取请求参数为空!");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       //=================================获取回调基本参数结果--START===========================//
       String order_amount = infoMap.get("total_fee");
       if(StringUtils.isNullOrEmpty(order_amount)){
           logger.info(clazz_name+"获取实际支付金额为空!");
           return ret_str_failed;
       }
       String order_no = infoMap.get("out_trade_no");// 平台订单号
       String trade_no = infoMap.get("u_out_trade_no");//交易流水号
       String trade_status = infoMap.get("status");//0未支付/待支付 1支付成功 2退款成功
       String t_trade_status = "1";//1:成功
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount)/100);
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_YXZF)) {
        	   YXZFPayServiceImpl xxb = new YXZFPayServiceImpl(pmapsconfig);
               String rmsg = xxb.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");

                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           }
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
    }*/
    /**
    *
    * @Description  YHB亿汇宝支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
    @RequestMapping("/YHBNotify.do")
    @ResponseBody
    public String YHBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "OK";//收到通知后请回复  OK
       String clazz_name = "YHBNotify";
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
           logger.info(clazz_name+"支付回调获取请求参数为空!");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       //=================================获取回调基本参数结果--START===========================//
       String order_amount = infoMap.get("amount");
       if(StringUtils.isNullOrEmpty(order_amount)){
           logger.info(clazz_name+"获取实际支付金额为空!");
           return ret_str_failed;
       }
       String order_no = infoMap.get("orderid");// 平台订单号
       String trade_no = infoMap.get("transaction_id");//交易流水号
       String trade_status = infoMap.get("returncode");//00代表支付成功
       String t_trade_status = "00";//00:成功
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_YHB)) {
        	   YHBPayServiceImpl xxb = new YHBPayServiceImpl(pmapsconfig);
               String rmsg = xxb.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");

                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           }
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
    }
    /**
    *
    * @Description  XBF新宝付支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
    @RequestMapping("/XBFNotify.do")
    @ResponseBody
    public String XBFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "success";//收到通知后请回复  success
       String clazz_name = "XBFNotify";
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
           logger.info(clazz_name+"支付回调获取请求参数为空!");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       //=================================获取回调基本参数结果--START===========================//
       String order_amount = infoMap.get("Moneys");
       if(StringUtils.isNullOrEmpty(order_amount)){
           logger.info(clazz_name+"获取实际支付金额为空!");
           return ret_str_failed;
       }
       String order_no = infoMap.get("LinkID");// 平台订单号
       String trade_no = "XBF"+System.currentTimeMillis();//交易流水号
       String trade_status = infoMap.get("sErrorCode");//1代表支付成功
       String t_trade_status = "1";//1:成功
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_XBF)) {
        	   XBFPayServiceImpl xxb = new XBFPayServiceImpl(pmapsconfig);
               String rmsg = xxb.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");

                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           }
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
    }
    /**
    *
    * @Description  YMZF易码支付回调通知
    * @param request
    * @param response
    * @param session
    * @return
    */
    @RequestMapping("/YMZFNotify.do")
    @ResponseBody
    public String YMZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
       String ret__success = "success";//收到通知后请回复  success
       String clazz_name = "YMZFNotify";
       logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
       Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
       if(infoMap == null || infoMap.isEmpty()){
           logger.info(clazz_name+"支付回调获取请求参数为空!");
           return ret_str_failed;
       }
       logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
       //=================================获取回调基本参数结果--START===========================//
       String order_amount = infoMap.get("needAmount");//实际支付金额
       if(StringUtils.isNullOrEmpty(order_amount)){
           logger.info(clazz_name+"获取实际支付金额为空!");
           return ret_str_failed;
       }
       String order_no = infoMap.get("out_trade_no");// 平台订单号
       String trade_no = infoMap.get("ordersn");//交易流水号
       String trade_status = "1";//1代表支付成功
       String t_trade_status = "1";//1:成功
       String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
       //=================================获取回调基本参数结果--END===========================//
       if (payMap.containsKey(order_no)) {
           logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
           return ret_str_failed;
       }
       payMap.put(order_no, "1");
       try {
           logger.info(clazz_name+"执行回调业务开始=========================START===========================");
           // 保存文件记录
           savePayFile(clazz_name, infoMap, IPTools.getIp(request));
           //通过订单号查询订单信息
           RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
           if(rechargeOrderVO == null){
               logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
               return ret__success;
           }
           rechargeOrderVO.setTradeNo(trade_no);
           rechargeOrderVO.setTradeStatus(trade_status);
           rechargeOrderVO.setSuccessStatus(t_trade_status);
           rechargeOrderVO.setNotifyIp(ip);
           rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount));
           rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
           Integer payId = rechargeOrderVO.getPayId();//支付商ID
           //查询支付商信息
           CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
           if(cagentYespayVO == null){
               logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
               return ret_str_failed;
           }
           String paymentName = cagentYespayVO.getPaymentName();//支付商编码
           Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
           logger.info(clazz_name+"支付回调验签开始=======================START====================");
           if (paymentName.equals(PayConstant.CONSTANT_YMZF)) {
        	   YMZFPayServiceImpl xxb = new YMZFPayServiceImpl(pmapsconfig);
               String rmsg = xxb.callback(infoMap);
               if (!"success".equalsIgnoreCase(rmsg)) {
                   logger.info(clazz_name+"支付回调验签失败!");

                   notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                   return ret_str_failed;
               }
               logger.info(clazz_name+"支付回调验签成功!");
           } else {
               // 异常请求
               logger.error(clazz_name+"支付回调异常请求");
               return ret_str_failed;
           }
           logger.info(clazz_name+"支付回调验签结束=======================END====================");

           logger.info("==========================处理订单回调业务并修改订单状态==========================");
           String result = notifyService.processNotifyOrder(rechargeOrderVO);
           if(ResultResponse.SUCCESS_CODE.equals(result)){
               logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
               return ret__success;
           }
           logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
           return ret_str_failed;
       } catch (Exception e) {
           e.printStackTrace();
           logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
           return ret_str_failed;
       }finally {
           if (payMap.containsKey(order_no)) {
               logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
               payMap.remove(order_no);
           }
       }
    }
    /**
     * 
     * @Description 测试回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
//    @RequestMapping("/TESTNotify.do")
    @ResponseBody
    public String TESTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session,String orderNo) {
        String ret__success = "success";//返回字符串OK，就表示回调已收到。
//        String clazz_name = "TESTNoify";
//        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
//        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
//        if(infoMap == null || infoMap.isEmpty()){
//          logger.info(clazz_name+"支付回调获取请求参数为空!");
//          return ret_str_failed;
//        }
//        logger.info(clazz_name+"支付回调请求参数",JSONObject.fromObject(infoMap).toString());
//        //=================================获取回调基本参数结果--START===========================//
//        String order_no = infoMap.get("orderNo");// 平台订单号
//        String trade_no = infoMap.get("tradeNo");// 平台订单号
//        String trade_status = infoMap.get("tradeStatus");//0:支付成功，其他支付失败
//        String t_trade_status = "00";//0000 成功 false 失败
//        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
//        //=================================获取回调基本参数结果--END===========================//
//        if (payMap.containsKey(order_no)) {
//            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
//            return ret_str_failed;
//        }
//        payMap.put(order_no, "1");
//        try {
//            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
//            // 保存文件记录
//            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
//            //通过订单号查询订单信息
//            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
//            if(rechargeOrderVO == null){
//                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
//                return ret_str_failed;
//            }
//            rechargeOrderVO.setTradeNo(trade_no);
//            rechargeOrderVO.setTradeStatus(trade_status);
//            rechargeOrderVO.setSuccessStatus(t_trade_status);
//            rechargeOrderVO.setNotifyIp(ip);
//            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
//            Integer payId = rechargeOrderVO.getPayId();//支付商ID
//            //查询支付商信息
//            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
//            if(cagentYespayVO == null){
//                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
//                return ret_str_failed;
//            }
//            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
//            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
//            logger.info(clazz_name+"支付回调验签开始=======================START====================");
//            if (paymentName.equals(PayConstant.CONSTANT_YIFA)) {
//                YIFAPayServiceImpl xxb = new YIFAPayServiceImpl(pmapsconfig);
//                String rmsg = xxb.callback(infoMap);
//                if (!"success".equalsIgnoreCase(rmsg)) {
//                    logger.info(clazz_name+"支付回调验签失败!");
//                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
//                    return ret_str_failed;
//                }
//                logger.info(clazz_name+"支付回调验签成功!");
//            } else {
//                // 异常请求
//                logger.error(clazz_name+"支付回调异常请求");
//                return ret_str_failed;
//            }
//            logger.info(clazz_name+"支付回调验签结束=======================END====================");
//            
//            logger.info("==========================处理订单回调业务并修改订单状态==========================");
//            String result = notifyService.processNotifyOrder(rechargeOrderVO);
//            if(ResultResponse.SUCCESS_CODE.equals(result)){
//                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
//                return ret__success;
//            }
//            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
//            return ret_str_failed;
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
//            return ret_str_failed;
//        }finally {
//            if (payMap.containsKey(order_no)) {
//                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
//                payMap.remove(order_no);
//            }
//        }
        return ret__success;
    }

    @RequestMapping("/JFKNotify.do")
    @ResponseBody
    public String JFKNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {

        String encParam = request.getParameter("encParam");
        String merId = request.getParameter("merId");
        String version = request.getParameter("version");
        String sign = request.getParameter("sign");
        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName));
        }
        logger.info("请求参数:" + JSONUtils.toJSONString(infoMap));

        ret_str_success = "SUCCESS";
        String[] requesParams = new String[] {"encParam", "merId", "version", "sign" };
        for (int i = 0; i < requesParams.length; i++) {
            if (StringUtils.isNullOrEmpty(requesParams[i])) {
                logger.info("请求参数不能为空");
                return ret_str_success;
            }
        }
        Properties pro = new Properties();
        InputStream in;
        String serverPublicKey = "";
        String privateKey = "";
        boolean flag = false;
        try {
            JSONObject obj = getPublicKey(merId);
            serverPublicKey = obj.getString("serverPublicKey");
            privateKey = obj.getString("privateKey");
            // 验签
            flag = SecurityRSAPay.verify(Base64Local.decode(encParam), Base64Local.decode(serverPublicKey),
                    Base64Local.decode(sign));
        } catch (Exception e) {
            logger.info("读取属性文件错误");
        }

        if (!flag) {
            // 验签失败
            logger.info("验签失败");
            return ret_str_success;
        }
        // 解密参数
        String respData = new String(
                SecurityRSAPay.decryptByPrivateKey(Base64Local.decode(encParam), Base64Local.decode(privateKey)));

        try {
            respData = new String(respData.getBytes("gbk"), "utf-8");
        } catch (UnsupportedEncodingException e1) {
            logger.info("编码错误:" + respData);
            e1.printStackTrace();
        }
        logger.info("解密请求参数:" + respData);

        Map<String, String> map1 = new HashMap<String, String>();
        map1 = GsonUtil.fromJson(respData, Map.class);

        String respCode = map1.get("respCode"); // 返回码返回1000表示成功。当dq_code为1000时，订单状态才有效。
        String order_no = map1.get("orderId"); // 商户订单号 字符串 商户订单号
        String trade_no = map1.get("payOrderId"); // 支付订单号 字符串 支付订单号
        String trade_status = map1.get("order_state"); // 订单状态
        String money = map1.get("money"); // 交易金额
        String payReturnTime = map1.get("payReturnTime"); // 付款时间
        String selfParam = map1.get("selfParam"); // 自定义参数
        String payType = map1.get("payType");// 支付方式
        String payTypeDesc = map1.get("payTypeDesc"); // 支付方式描述
        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret_str_success;
        }
        payMap.put(order_no, "1");
        try {
            logger.info("解密业务参数:" + map1.toString());

            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request));
            fileMap.put("requestParams", JSONUtils.toJSONString(map1));
            f.setLog("JFK_Notify", fileMap);

            // 验证参数
            if ("".equals(order_no) || null == order_no || "".equals(trade_no) || null == trade_no) {
                logger.info("验证参数错误");
                return ret_str_success;
            }
            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("单据不存在,直接返回");
                return ret_str_success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret_str_success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId,uid);
            if (plist.size() > 0) {
            } else {
                logger.info("单据不存在,直接返回");
                return ret_str_success;
            }

            // // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // // 支付商
            String paymentName = hsConfigMap.get("payment_name");
            logger.info("用户支付商为:" + paymentName);

            if (null == paymentName || "".equals(paymentName)) {
                logger.info("用户支付商不存在:" + paymentName);
                return ret_str_success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);
            //
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_JFK)) {
                // 初始化数据
                t_trade_status = "1003";
                ret_str_success = "SUCCESS";
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status + "  t_trade_status" + ret_str_success);
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret_str_success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            Map<String, String[]> errorMap = new HashMap<String, String[]>();
            cmap.put("params", JSONObject.fromObject(map1).toString());
            cmap.put("ip", IPTools.getIp(request));
            cmap.put("status", ret_str_success);
            userService.InsertCallbacklog(cmap);
            logger.info("回调记录保存成功!");

            try {
                logger.info("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret_str_success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);
                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");
                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            logger.info("执行存储过程失败!");
                            return ret_str_success;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret_str_success;
                    }
                    logger.info("UID : " + uid);
                    logger.info("Username : " + jmap.getString("username"));
                    logger.info("order : " + jo);
                    logger.info("amt : " + amt);
                    logger.info("dml : " + dml);
                    logger.info("cj : " + cj);
                    logger.info("------------------订单完成----------------------");
                } else {
                    logger.info("回调成功，修改记录");
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("数据处理异常");
                return ret_str_success;

            }
            logger.info("回调成功！");
            return ret_str_success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 得成支付回调方法 post请求 格式application/json
     *
     * @param request
     * @param session
     * @return
     */
    @RequestMapping("/DCNotify.do")
    @ResponseBody
    public String DCNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session,
                           @RequestBody Map<String, String> dcRequest) {
        logger.info("DCNotify 开始调用------------");
        ret_str_success = "000000";// 成功返回000000
        String order_no = dcRequest.get("requestId");// (String)
        // request.getParameter("order_no");
        String trade_no = dcRequest.get("payNo");
        String trade_status = dcRequest.get("ordersts");
        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret_str_success;
        }
        payMap.put(order_no, "1");
        try {
            String[] strVerify = new String[] {order_no, trade_no, trade_status };
            for (String str : strVerify) {
                if (StringUtils.isNullOrEmpty(str)) {
                    return ret_str_success;
                }
            }

            logger.info("DCNotify:" + dcRequest.toString());
            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request));
            fileMap.put("requestParams", dcRequest.toString());
            f.setLog("DCNotify", fileMap);

            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("订单不存在");
                return ret_str_success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret_str_success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId,uid);
            if (plist.size() > 0) {
            } else {
                return ret_str_success;
            }

            // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // 支付商
            String paymentName = hsConfigMap.get("payment_name").toString();
            if (null == paymentName || "".equals(paymentName)) {
                return ret_str_success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);

            // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_DC)) {
                ret_str_failed = "fail";
                t_trade_status = "S";// 成功：S失败：F 处理中：W
                String returnCode = dcRequest.get("returnCode").toString();// 返回码
                String ordersts = dcRequest.get("ordersts").toString();// 订单状态
                if (StringUtils.isNullOrEmpty(returnCode) || StringUtils.isNullOrEmpty(ordersts)) {
                    logger.error("returnCode || ordersts 为空");
                    return ret_str_success;
                }

                net.sf.json.JSONObject jo = new net.sf.json.JSONObject().fromObject(pmapsconfig);
                String hmac = dcRequest.get("hmac").toString();
                dcRequest.remove("hmac");// 剔除hmac
                String hmac1 = MerchSdkSign.getSign(dcRequest, jo.get("signKey").toString());
                logger.info("得成支付回调请求签名验证 " + hmac.equals(hmac1) + " 本地 hmac:" + hmac + "  请求hmac1:" + hmac1);
                if (!hmac.equals(hmac1)) {
                    return ret_str_success;
                }

            } else {
                // 异常请求
                logger.error("异常请求");
                return ret_str_success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            cmap.put("params", dcRequest.toString());
            cmap.put("ip", IPTools.getIp(request));
            cmap.put("status", ret_str_failed);
            userService.InsertCallbacklog(cmap);

            try {
                System.out.println("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret_str_success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);
                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");
                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            return ret_str_failed;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret_str_failed;
                    }
                    System.out.println("UID : " + uid);
                    System.out.println("Username : " + jmap.getString("username"));
                    System.out.println("order : " + jo);
                    System.out.println("amt : " + amt);
                    System.out.println("dml : " + dml);
                    System.out.println("cj : " + cj);
                    System.out.println("------------------订单完成----------------------");
                } else {
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                return ret_str_failed;
            }
            return ret_str_success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description   棕熊支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/ZXNotify.do")
    @ResponseBody
    public String ZXNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        logger.info("ZXNotify 开始调用------------");
        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration<String> enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数:" + JSONObject.fromObject(infoMap).toString());

        ret_str_success = "SUCCESS";// 成功返回success
        String order_no = request.getParameter("number");// 平台订单号
        String trade_no = request.getParameter("paysn");// 流水号
        String trade_status = request.getParameter("status");

        String[] strVerify = new String[] {order_no, trade_no, trade_status };
        for (String str : strVerify) {
            if (StringUtils.isNullOrEmpty(str)) {
                return ret_str_success;
            }
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret_str_success;
        }
        payMap.put(order_no, "1");

        try {
            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request));
            fileMap.put("requestParams", JSONUtils.toJSONString(infoMap));
            f.setLog("ZXNotify", fileMap);

            // 验证参数
            if ("".equals(order_no) || null == order_no || "".equals(trade_no) || null == trade_no) {
                logger.info("验证参数错误");
                return ret_str_success;
            }
            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("单据不存在,直接返回");
                return ret_str_success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret_str_success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId,uid);
            if (plist.size() > 0) {
            } else {
                logger.info("单据不存在,直接返回");
                return ret_str_success;
            }
            // // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // // 支付商
            String paymentName = hsConfigMap.get("payment_name").toString();
            logger.info("用户支付商为:" + paymentName);

            if (null == paymentName || "".equals(paymentName)) {
                logger.info("用户支付商不存在:" + paymentName);
                return ret_str_success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);
            //
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_ZX)) {

                String pay_type = order.get("pay_type").toString();
                String type = "";
                if ("微信".equals(pay_type)) {
                    type = "6";
                } else if ("支付宝".equals(pay_type)) {
                    type = "2";
                } else if ("网银".equals(pay_type)) {
                    type = "3";
                }
                logger.info("棕熊回调类型 6微信，2支付宝，3网银:" + pay_type);
                // 初始化数据
                t_trade_status = "1";// 表示成功状态
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                ZXPayServiceImpl zx = new ZXPayServiceImpl(pmapsconfig);
                if (!zx.callback(request, type)) {
                    return ret_str_success;
                }
                logger.info("棕熊支付验签成功！");

            } else {
                // 异常请求
                logger.error("异常请求");
                return ret_str_success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            Map<String, String[]> errorMap = new HashMap<String, String[]>();
            cmap.put("params", JSONObject.fromObject(infoMap).toString());
            cmap.put("ip", IPTools.getIp(request));
            cmap.put("status", ret_str_success);
            userService.InsertCallbacklog(cmap);
            logger.info("回调记录保存成功!");

            try {
                logger.info("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret_str_success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);
                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");

                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            logger.info("执行存储过程失败!");
                            return ret_str_success;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret_str_success;
                    }
                    logger.info("UID : " + uid);
                    logger.info("Username : " + jmap.getString("username"));
                    logger.info("order : " + jo);
                    logger.info("amt : " + amt);
                    logger.info("dml : " + dml);
                    logger.info("cj : " + cj);
                    logger.info("------------------订单完成----------------------");
                } else {
                    logger.info("回调成功，修改记录");
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("数据处理异常");
                return ret_str_success;

            }
            logger.info("回调成功！");
            return ret_str_success;

        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    
    
    /**
     * 
     * @Description 开联通支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/KLTNotify.do")
    @ResponseBody
    public String KLTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";//收到通知后请回复  success
        String clazz_name = "KLTNotify";
        logger.info(clazz_name+"支付回调开始-----------------------------START------------------------------");
        Map<String,String> infoMap = ParamsUtils.getNotifyParams(request);
        if(infoMap == null || infoMap.isEmpty()){
          logger.info(clazz_name+"支付回调获取请求参数为空!");
          return ret_str_failed;
        }
        logger.info(clazz_name+"支付回调请求参数:{}",JSONObject.fromObject(infoMap).toString());
        //=================================获取回调基本参数结果--START===========================//
        String order_no = infoMap.get("orderNo");// 平台订单号
        String trade_no = infoMap.get("mchtOrderId");//流水号
        String trade_status = infoMap.get("payResult");//状态：0：处理中 1：支付成功 2：失败
        String t_trade_status = "1";//状态：0：处理中 1：支付成功 2：失败
        String order_amount = infoMap.get("orderAmount");//单位：分
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        //=================================获取回调基本参数结果--END===========================//
        if (payMap.containsKey(order_no)) {
            logger.info(clazz_name+"支付回调订单号:{}重复调用",order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        try {
            logger.info(clazz_name+"执行回调业务开始=========================START===========================");
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info(clazz_name+"支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",order_no);
                return ret__success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(Double.parseDouble(order_amount) / 100);//单位：分
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info(clazz_name+"非法支付商ID,查询支付商信息失败,支付商ID:{}",payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info(clazz_name+"支付回调验签开始=======================START====================");
            if (paymentName.equals(PayConstant.CONSTANT_KLT)) {
                KLTPayServiceImpl xxb = new KLTPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info(clazz_name+"支付回调验签失败!");
                    
                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info(clazz_name+"支付回调验签成功!");
            } else {
                // 异常请求
                logger.error(clazz_name+"支付回调异常请求");
                return ret_str_failed;
            }
            logger.info(clazz_name+"支付回调验签结束=======================END====================");
            
            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info(clazz_name+"支付回调业务处理成功=======================SUCCESS====================");
                return ret__success;
            }
            logger.info(clazz_name+"支付回调业务处理成功=======================FAILD====================");
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(clazz_name+"支付回调业务处理异常:{}",e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info(clazz_name+"支付回调业务处理成功,删除缓存中的订单KEY:{}",order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * @Description 优云宝支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/YYBNotify.do")
    @ResponseBody
    public String YYBNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        logger.info("YYBNotify 开始调用------------");
        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数:" + JSONObject.fromObject(infoMap).toString());

        ret_str_success = "success";// 成功返回success
        String order_no = request.getParameter("name");// 平台订单号
        String trade_no = request.getParameter("ddh");// 流水号
        String trade_status = "1";
        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret_str_success;
        }
        payMap.put(order_no, "1");
        try {
            String[] strVerify = new String[] {order_no, trade_no, trade_status };
            for (String str : strVerify) {
                if (StringUtils.isNullOrEmpty(str)) {
                    return ret_str_success;
                }
            }
            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request));
            fileMap.put("requestParams", JSONUtils.toJSONString(infoMap));
            f.setLog("YYBNotify", fileMap);

            // 验证参数
            if ("".equals(order_no) || null == order_no || "".equals(trade_no) || null == trade_no) {
                logger.info("验证参数错误");
                return ret_str_success;
            }
            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("单据不存在,直接返回");
                return ret_str_success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret_str_success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId,uid);
            // List<Map<String, String>> plist =
            // userService.getYsepayConfig(jmap.getString("username"));
            if (plist.size() > 0) {
                // session.setAttribute("HSPay", plist.get(0));
            } else {
                logger.info("单据不存在,直接返回");
                return ret_str_success;
            }

            // // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // // 支付商
            String paymentName = hsConfigMap.get("payment_name").toString();
            logger.info("用户支付商为:" + paymentName);

            if (null == paymentName || "".equals(paymentName)) {
                logger.info("用户支付商不存在:" + paymentName);
                return ret_str_success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);
            //
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_YYB)) {

                // 初始化数据
                t_trade_status = "1";// 表示成功状态
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                YYBPayServiceImpl klt = new YYBPayServiceImpl(pmapsconfig);
                if (!klt.callback(request)) {
                    return ret_str_success;
                }
                logger.info("优云宝支付验签成功！");

            } else {
                // 异常请求
                logger.error("异常请求");
                return ret_str_success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            Map<String, String[]> errorMap = new HashMap<String, String[]>();
            cmap.put("params", JSONObject.fromObject(infoMap).toString());
            cmap.put("ip", IPTools.getIp(request));
            cmap.put("status", ret_str_success);
            userService.InsertCallbacklog(cmap);
            logger.info("回调记录保存成功!");

            try {
                logger.info("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret_str_success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);
                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");
                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            logger.info("执行存储过程失败!");
                            return ret_str_success;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret_str_success;
                    }
                    logger.info("UID : " + uid);
                    logger.info("Username : " + jmap.getString("username"));
                    logger.info("order : " + jo);
                    logger.info("amt : " + amt);
                    logger.info("dml : " + dml);
                    logger.info("cj : " + cj);
                    logger.info("------------------订单完成----------------------");
                } else {
                    logger.info("回调成功，修改记录");
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("数据处理异常");
                return ret_str_success;

            }
            logger.info("回调成功！");
            return ret_str_success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description 轻易付支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/QYFNotify.do")
    @ResponseBody
    public Integer QYFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        logger.info("QYFNotify 开始调用------------");
        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数:" + JSONObject.fromObject(infoMap).toString());

        Integer ret_int_success = 0;// 成功返回0

        String order_no = request.getParameter("orderNum");// 平台订单号
        String trade_status = "00";
        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret_int_success;
        }
        payMap.put(order_no, "1");
        try {
            String[] strVerify = new String[] {order_no, trade_status };
            for (String str : strVerify) {
                if (StringUtils.isNullOrEmpty(str)) {
                    return ret_int_success;
                }
            }
            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request));
            fileMap.put("requestParams", JSONUtils.toJSONString(infoMap));
            f.setLog("QYFNotify", fileMap);

            // 验证参数
            if ("".equals(order_no) || null == order_no) {
                logger.info("验证参数错误");
                return ret_int_success;
            }
            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("单据不存在,直接返回");
                return ret_int_success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret_int_success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId,uid);
            // List<Map<String, String>> plist =
            // userService.getYsepayConfig(jmap.getString("username"));
            if (plist.size() > 0) {
                // session.setAttribute("HSPay", plist.get(0));
            } else {
                logger.info("单据不存在,直接返回");
                return ret_int_success;
            }

            // // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // // 支付商
            String paymentName = hsConfigMap.get("payment_name").toString();
            logger.info("用户支付商为:" + paymentName);

            if (null == paymentName || "".equals(paymentName)) {
                logger.info("用户支付商不存在:" + paymentName);
                return ret_int_success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);
            //
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_QYF)) {

                // 初始化数据
                t_trade_status = "00";// 表示成功状态
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                QYFPayServiceImpl qyf = new QYFPayServiceImpl(pmapsconfig);
                if (!qyf.callback(request, response)) {
                    return ret_int_success;
                }
                logger.info("轻易付支付验签成功！");

            } else {
                // 异常请求
                logger.error("异常请求");
                return ret_int_success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            Map<String, String[]> errorMap = new HashMap<String, String[]>();
            cmap.put("params", JSONObject.fromObject(infoMap).toString());
            cmap.put("ip", IPTools.getIp(request));
            cmap.put("status", ret_str_success);
            userService.InsertCallbacklog(cmap);
            logger.info("回调记录保存成功!");

            try {
                logger.info("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret_int_success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);
                String trade_no = "";
                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");
                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            logger.info("执行存储过程失败!");
                            return ret_int_success;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret_int_success;
                    }
                    logger.info("UID : " + uid);
                    logger.info("Username : " + jmap.getString("username"));
                    logger.info("order : " + jo);
                    logger.info("amt : " + amt);
                    logger.info("dml : " + dml);
                    logger.info("cj : " + cj);
                    logger.info("------------------订单完成----------------------");
                } else {
                    logger.info("回调成功，修改记录");
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("数据处理异常");
                return ret_int_success;

            }
            logger.info("回调成功！");
            return ret_int_success;
        } catch (Exception e) {
            return 1;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description 新棕熊支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XZXNotify.do")
    @ResponseBody
    public String XZXNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        logger.info("XZXNotify 开始调用------------");
        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数:" + JSONObject.fromObject(infoMap).toString());

        String ret__success = "<result>1</result>";// 成功返回0

        String order_no = request.getParameter("orderId");// 平台订单号
        String trade_no = request.getParameter("dealId");// 平台订单号
        String trade_status = request.getParameter("payResult");// 处理结果
        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret_str_success;
        }
        payMap.put(order_no, "1");
        try {
            String[] strVerify = new String[] {order_no, trade_status, trade_no };
            for (String str : strVerify) {
                if (StringUtils.isNullOrEmpty(str)) {
                    return ret__success;
                }
            }
            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request));
            fileMap.put("requestParams", JSONUtils.toJSONString(infoMap));
            f.setLog("XZXNotify", fileMap);

            // 验证参数
            if ("".equals(order_no) || null == order_no) {
                logger.info("验证参数错误");
                return ret__success;
            }
            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("单据不存在,直接返回");
                return ret__success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret__success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId,uid);
            // List<Map<String, String>> plist =
            // userService.getYsepayConfig(jmap.getString("username"));
            if (plist.size() > 0) {
                // session.setAttribute("HSPay", plist.get(0));
            } else {
                logger.info("单据不存在,直接返回");
                return ret__success;
            }

            // // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // // 支付商
            String paymentName = hsConfigMap.get("payment_name").toString();
            logger.info("用户支付商为:" + paymentName);

            if (null == paymentName || "".equals(paymentName)) {
                logger.info("用户支付商不存在:" + paymentName);
                return ret__success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);
            //
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_XZX)) {

                // 初始化数据
                t_trade_status = "10";// 表示成功状态
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                XZXPayServiceImpl xzx = new XZXPayServiceImpl(pmapsconfig);

                String msg = null;
                try {
                    msg = xzx.callback(request, response);
                } catch (ServletException | IOException e) {
                    e.printStackTrace();
                }
                if (!"success".equals(msg)) {
                    return ret__success;
                }
                logger.info("新棕熊支付验签成功！");

            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            Map<String, String[]> errorMap = new HashMap<String, String[]>();
            cmap.put("params", JSONObject.fromObject(infoMap).toString());
            cmap.put("ip", IPTools.getIp(request));
            cmap.put("status", ret_str_success);
            userService.InsertCallbacklog(cmap);
            logger.info("回调记录保存成功!");

            try {
                logger.info("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret__success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);

                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");
                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            logger.info("执行存储过程失败!");
                            return ret__success;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret__success;
                    }
                    logger.info("UID : " + uid);
                    logger.info("Username : " + jmap.getString("username"));
                    logger.info("order : " + jo);
                    logger.info("amt : " + amt);
                    logger.info("dml : " + dml);
                    logger.info("cj : " + cj);
                    logger.info("------------------订单完成----------------------");
                } else {
                    logger.info("回调成功，修改记录");
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("数据处理异常");
                return ret__success;

            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description 威富通支付回调通知
     * @param request1
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/WFTNotify.do")
    @ResponseBody
    public String WFTNotify(HttpServletRequest request1, HttpServletResponse response, HttpSession session) {
        logger.info("WFTNotify 开始调用------------");
        String ret__success = "success";// 成功返回success
        Map<String, String> reqmap = null;
        String resString = com.cn.tianxia.pay.wft.util.XmlUtils.parseRequst(request1);
        if (resString != null && !"".equals(resString)) {
            try {
                reqmap = com.cn.tianxia.pay.wft.util.XmlUtils.toMap(resString.getBytes(), "utf-8");
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("请求参数解析错误------------");
                return ret__success;
            }
        }

        String order_no = reqmap.get("out_trade_no");// 商户订单号
        String trade_no = reqmap.get("transaction_id");// 平台订单号
        String trade_status = reqmap.get("result_code");// 处理结果

        String[] strVerify = new String[] {order_no, trade_status, trade_no };
        for (String str : strVerify) {
            if (StringUtils.isNullOrEmpty(str)) {
                return ret__success;
            }
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            logger.info("请求参数:" + JSONObject.fromObject(reqmap).toString());

            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request1));
            fileMap.put("requestParams", JSONUtils.toJSONString(reqmap));
            f.setLog("WFTNotify", fileMap);

            // 验证参数
            if ("".equals(order_no) || null == order_no) {
                logger.info("验证参数错误");
                return ret__success;
            }
            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("单据不存在,直接返回");
                return ret__success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret__success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId,uid);
            if (plist.size() > 0) {
                // session.setAttribute("HSPay", plist.get(0));
            } else {
                logger.info("单据不存在,直接返回");
                return ret__success;
            }

            // // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // // 支付商
            String paymentName = hsConfigMap.get("payment_name").toString();
            logger.info("用户支付商为:" + paymentName);

            if (null == paymentName || "".equals(paymentName)) {
                logger.info("用户支付商不存在:" + paymentName);
                return ret__success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);
            //
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_WFT)) {

                // 初始化数据
                t_trade_status = "0";// 表示成功状态
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                WFTPayServiceImpl wft = new WFTPayServiceImpl(pmapsconfig);

                String msg = null;
                try {
                    msg = wft.callback(resString);
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.info("威富通支付异常callback！");
                    return ret__success;
                }
                if (!"success".equals(msg)) {
                    return ret__success;
                }
                logger.info("威富通支付验签成功！");

            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            Map<String, String[]> errorMap = new HashMap<String, String[]>();
            cmap.put("params", JSONObject.fromObject(reqmap).toString());
            cmap.put("ip", IPTools.getIp(request1));
            cmap.put("status", ret_str_success);
            userService.InsertCallbacklog(cmap);
            logger.info("回调记录保存成功!");

            try {
                logger.info("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret__success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);

                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");
                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            logger.info("执行存储过程失败!");
                            return ret__success;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret__success;
                    }
                    logger.info("UID : " + uid);
                    logger.info("Username : " + jmap.getString("username"));
                    logger.info("order : " + jo);
                    logger.info("amt : " + amt);
                    logger.info("dml : " + dml);
                    logger.info("cj : " + cj);
                    logger.info("------------------订单完成----------------------");
                } else {
                    logger.info("回调成功，修改记录");
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("数据处理异常");
                return ret__success;

            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description 金海哲支付回调通知
     * @param request1
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/JHZNotify.do")
    @ResponseBody
    public String JHZNotify(HttpServletRequest request1, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success
        String jsonStr;
        String msg = request1.getParameter("msg");
        String ret = request1.getParameter("ret");
        String sign = request1.getParameter("sign");
        logger.info(msg + ret + sign);
        // try {
        // jsonStr = GetRequestJsonUtils.getRequestJsonString(request1);
        // } catch (IOException e1) {
        // e1.printStackTrace();
        // return ret__success;
        // }
        // JSONObject jhzRequest = JSONUtils.toJSONObject(jsonStr);

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request1.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request1.getParameter(paraName).toString());
        }
        logger.info("JHZNotify 开始调用------------");

        String order_no = null;
        try {
            if (StringUtils.isNullOrEmpty(msg) || StringUtils.isNullOrEmpty(ret) || StringUtils.isNullOrEmpty(sign)) {
                logger.info("请求参数空");
                return ret__success;
            }
            JSONObject msgJson = JSONUtils.toJSONObject(msg);
            JSONObject retJson = JSONUtils.toJSONObject(ret);

            // JSONObject retJson = JSONObject.fromObject(ret);
            // JSONObject msgJson = JSONObject.fromObject(msg);
            order_no = msgJson.getString("no");// 商户订单号
            String trade_no = msgJson.getString("payNo");
            ;// 平台订单号
            String trade_status = retJson.getString("msg");// 处理结果
            String[] strVerify = new String[] {order_no, trade_status, trade_no };
            for (String str : strVerify) {
                if (StringUtils.isNullOrEmpty(str)) {
                    return ret__success;
                }
            }
            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request1));
            fileMap.put("requestParams", JSONUtils.toJSONString(infoMap));
            f.setLog("WFTNotify", fileMap);

            // 验证参数
            if ("".equals(order_no) || null == order_no) {
                logger.info("验证参数错误");
                return ret__success;
            }

            if (payMap.containsKey(order_no)) {
                logger.info("order_no:" + order_no + "重复调用!");
                return ret__success;
            }
            payMap.put(order_no, "1");
            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("单据不存在,直接返回");
                return ret__success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret__success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId,uid);
            if (plist.size() > 0) {
            } else {
                logger.info("单据不存在,直接返回");
                return ret__success;
            }
            // // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // // 支付商
            String paymentName = hsConfigMap.get("payment_name").toString();
            logger.info("用户支付商为:" + paymentName);

            if (null == paymentName || "".equals(paymentName)) {
                logger.info("用户支付商不存在:" + paymentName);
                return ret__success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);
            //
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_JHZ)) {

                // 初始化数据
                t_trade_status = "SUCCESS";// 表示成功状态
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                JHZPayServiceImpl jhz = new JHZPayServiceImpl(pmapsconfig);

                String rmsg = null;
                try {
                    rmsg = jhz.callback(request1);
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.info("金海哲支付异常callback！");
                    return ret__success;
                }
                if (!"SUCCESS".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("金海哲支付验签成功！");

            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            Map<String, String[]> errorMap = new HashMap<String, String[]>();
            cmap.put("params", JSONObject.fromObject(infoMap).toString());
            cmap.put("ip", IPTools.getIp(request1));
            cmap.put("status", ret_str_success);
            userService.InsertCallbacklog(cmap);
            logger.info("回调记录保存成功!");

            try {
                logger.info("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret__success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);

                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");
                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            logger.info("执行存储过程失败!");
                            return ret__success;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret__success;
                    }
                    logger.info("UID : " + uid);
                    logger.info("Username : " + jmap.getString("username"));
                    logger.info("order : " + jo);
                    logger.info("amt : " + amt);
                    logger.info("dml : " + dml);
                    logger.info("cj : " + cj);
                    logger.info("------------------订单完成----------------------");
                } else {
                    logger.info("回调成功，修改记录");
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("数据处理异常");
                return ret__success;

            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (StringUtils.isNullOrEmpty(order_no)) {
                return "SUCCESS";
            } else {
                payMap.remove(order_no);
            }
        }

    }

    /**
     * 
     * @Description 新众利支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/JHNotify.do")
    @ResponseBody
    public String JHNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        logger.info("JHNotify 开始调用------------");
        String ret_str_success = "SUCCESS";
        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数:" + JSONObject.fromObject(infoMap).toString());

        String ret__success = "SUCCESS";// 成功返回

        String order_no = request.getParameter("outTradeNo");// 平台订单号
        String trade_no = request.getParameter("trxNo");// 平台订单号
        String trade_status = request.getParameter("tradeStatus");// 处理结果
        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret_str_success;
        }
        payMap.put(order_no, "1");
        try {
            String[] strVerify = new String[] {order_no, trade_status, trade_no };
            for (String str : strVerify) {
                if (StringUtils.isNullOrEmpty(str)) {
                    return ret__success;
                }
            }
            // 文件记录
            FileLog f = new FileLog();
            Map<String, String> fileMap = new HashMap<String, String>();
            fileMap.put("requestIp", IPTools.getIp(request));
            fileMap.put("requestParams", JSONUtils.toJSONString(infoMap));
            f.setLog("XZXNotify", fileMap);

            // 验证参数
            if ("".equals(order_no) || null == order_no) {
                logger.info("验证参数错误");
                return ret__success;
            }
            // 验证单据号
            Map<String, Object> map = new HashMap<>();
            map.put("orderno", order_no);
            List<Map<String, String>> lm = userService.selectChickReCharge(map);
            // 单据不存在,直接返回

            if (lm.size() <= 0) {
                logger.info("单据不存在,直接返回");
                return ret__success;
            }
            Map<String, String> order = lm.get(0);
            // 获取用户信息
            Object ouid = order.get("uid");
            String uid = ouid.toString();
            Map<String, Object> param = new HashMap<>();
            param.put("uid", uid);
            map = userService.selectUserById(param);
            JSONObject jmap = new JSONObject().fromObject(map);

            String payId = String.valueOf(order.get("pay_id"));
            if (StringUtils.isNullOrEmpty(payId)) {
                logger.info("支付商id不存在！");
                return ret__success;
            }
            List<Map<String, String>> plist = userService.selectYsepaybyId(payId,uid);
            // List<Map<String, String>> plist =
            // userService.getYsepayConfig(jmap.getString("username"));
            if (plist.size() > 0) {
                // session.setAttribute("HSPay", plist.get(0));
            } else {
                logger.info("单据不存在,直接返回");
                return ret__success;
            }

            // // 获取配置信息
            Map<String, String> hsConfigMap = plist.get(0);
            // // 支付商
            String paymentName = hsConfigMap.get("payment_name").toString();
            logger.info("用户支付商为:" + paymentName);

            if (null == paymentName || "".equals(paymentName)) {
                logger.info("用户支付商不存在:" + paymentName);
                return ret__success;
            }
            String PaymentConfig = hsConfigMap.get("payment_config").toString();
            // // 配置信息
            Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);
            //
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_JH)) {

                // 初始化数据
                t_trade_status = "SUCCESS";// 表示成功状态
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                JHPayServiceImpl jh = new JHPayServiceImpl(pmapsconfig);

                String msg = null;
                try {
                    msg = jh.callback(infoMap, request, response);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (!"success".equals(msg)) {
                    return ret__success;
                }
                logger.info("聚合支付验签成功！");

            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }

            // 回调日志
            Map<String, Object> cmap = new HashMap<>();
            Map<String, String[]> errorMap = new HashMap<String, String[]>();
            cmap.put("params", JSONObject.fromObject(infoMap).toString());
            cmap.put("ip", IPTools.getIp(request));
            cmap.put("status", ret_str_success);
            userService.InsertCallbacklog(cmap);
            logger.info("回调记录保存成功!");

            try {
                logger.info("-------------------------网银支付--------------------------");

                JSONObject jo = new JSONObject().fromObject(order);
                String oamount = jo.getString("order_amount");

                String status = order.get("trade_status");
                // 如果单据状态不是交易中则跳过后续步骤
                if (!"处理中".equals(status)) {
                    return ret__success;
                }
                Map<String, Object> params = new HashMap<>();
                params.put("uid", uid);
                Map<String, Object> user = userService.selectUserById(params);

                double wallet = Double.parseDouble(jmap.getString("wallet"));
                double amt = Double.parseDouble(oamount);

                String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
                List<String> list = new ArrayList<>();
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                Map<String, Object> paramsMap = new HashMap<String, Object>();

                if (t_trade_status.equals(trade_status)) {
                    JSONObject json = JSONObject.fromObject(plist.get(0));
                    Double cj = amt * json.getDouble("dividend_rate");
                    Double dml = (amt + cj) * json.getInt("coding_rate");
                    // System.out.println("单据成功");
                    DecimalFormat df = new DecimalFormat("######0.00");
                    cj = Double.parseDouble(df.format(cj));
                    try {
                        paramsMap.put("amt", amt);
                        paramsMap.put("uid", uid);
                        paramsMap.put("wallet", wallet);
                        paramsMap.put("cj", cj);
                        paramsMap.put("tradeNo", trade_no);
                        paramsMap.put("outTradeNo", order_no);
                        paramsMap.put("cagent", user.get("cagent"));
                        paramsMap.put("dml", dml);
                        paramsMap.put("number", "CJ" + System.currentTimeMillis());
                        paramsMap.put("number2", "CK" + System.currentTimeMillis());
                        paramsMap.put("_err", "0");
                        userService.ysePayCallBack(paramsMap);
                        if ("1".equals(paramsMap.get("_err"))) {
                            logger.info("执行存储过程失败!");
                            return ret__success;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return ret__success;
                    }
                    logger.info("UID : " + uid);
                    logger.info("Username : " + jmap.getString("username"));
                    logger.info("order : " + jo);
                    logger.info("amt : " + amt);
                    logger.info("dml : " + dml);
                    logger.info("cj : " + cj);
                    logger.info("------------------订单完成----------------------");
                } else {
                    logger.info("回调成功，修改记录");
                    // 更新转账信息
                    connection = JDBCTools.getConnection();
                    connection.setAutoCommit(false);

                    list.clear();
                    list.add("faild");
                    list.add(trade_no);
                    list.add(order_no);

                    preparedStatement = connection.prepareStatement(sql2);
                    for (int i = 0; i < list.size(); i++) {
                        preparedStatement.setObject(i + 1, list.get(i));
                    }
                    preparedStatement.executeUpdate();
                    connection.commit();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("数据处理异常");
                return ret__success;

            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description OK支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/OKNotify.do")
    @ResponseBody
    public String OKNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数" + infoMap.toString());

        String order_no = request.getParameter("orderid");
        String trade_no = request.getParameter("orderno");
        String trade_status = request.getParameter("opstate");
        logger.info("OKNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_no)
                || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("OKNotify", infoMap, IPTools.getIp(request));
        // 验证参数
        if ("".equals(order_no) || null == order_no) {
            logger.info("验证参数错误");
            return ret__success;
        }
        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");
            String t_trade_status = "2";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_OK)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                OKPayServiceImpl ok = new OKPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = ok.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("ok支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret__success;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * @Description 新马支付回调通知
     * @param request
     * @param response
     * @param session
     * @param JsonMap
     * @return
     */
    @RequestMapping("/XMNotify.do")
    @ResponseBody
    public String XMNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session,
                           @RequestBody Map<String, String> JsonMap) {
        Map<String, String> infoMap = new HashMap<String, String>();
        // 获取map集合中的所有键的Set集合
        Set<String> keySet = JsonMap.keySet();
        // 有了Set集合就可以获取其迭代器，取值
        Iterator<String> it = keySet.iterator();
        while (it.hasNext()) {
            String i = it.next();
            String s = JsonMap.get(i);
            infoMap.put(i, s);
        }
        String ret__success = "success";// 成功返回success
        logger.info("请求参数:" + JSONObject.fromObject(infoMap).toString());
        String order_no = infoMap.get("outTradeNo");
        String trade_no = infoMap.get("orderNo");
        String trade_status = infoMap.get("status");
        logger.info("order_no=" + order_no + "trade_no=" + trade_no + "trade_status=" + trade_status);
        logger.info("XMNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_no)
                || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("XMNotify", infoMap, IPTools.getIp(request));
        // 验证参数
        if ("".equals(order_no) || null == order_no) {
            logger.info("验证参数错误");
            return ret__success;
        }
        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");
            String t_trade_status = "02";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_XM)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                XMPayServiceImpl ok = new XMPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = ok.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("xm支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret__success;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description 高通支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/GTNotify.do")
    @ResponseBody
    public String GTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "ok";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数:" + JSONObject.fromObject(infoMap).toString());
        String order_no = request.getParameter("ordernumber");
        String trade_no = request.getParameter("sysnumber");
        String trade_status = request.getParameter("orderstatus");
        logger.info("GTNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_no)
                || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("GTNotify", infoMap, IPTools.getIp(request));
        // 验证参数
        if ("".equals(order_no) || null == order_no) {
            logger.info("验证参数错误");
            return ret__success;
        }
        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");
            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_GT)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                GTPayServiceImpl ok = new GTPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = ok.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("GT支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret__success;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description 利鑫支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/LXNotify.do")
    @ResponseBody
    public String LXNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap = JSONUtils.toHashMap(paraName);
        }
        logger.info("请求参数:" + infoMap.toString());

        String order_no = infoMap.get("mchOrderNo");
        String trade_no = infoMap.get("cpOrderNo");
        String trade_status = String.valueOf(infoMap.get("resultCode"));

        logger.info(order_no + "   " + trade_no + "   " + trade_status + "   ");
        logger.info("LXNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_no)
                || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("LXNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "0";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_LX)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                LXPayServiceImpl lx = new LXPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = lx.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("LX支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret_str_failed;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * @Description 迅捷支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XJNotify.do")
    @ResponseBody
    public String XJNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数" + infoMap.toString());

        String order_no = request.getParameter("traceno");
        String trade_no = request.getParameter("orderno");
        String trade_status = request.getParameter("status");

        logger.info("XJNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_no)
                || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("XJNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_XJ)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                XJPayServiceImpl lx = new XJPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = lx.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("XJ支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret__success;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * @Description AK47支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/AK47Notify.do")
    @ResponseBody
    public String AK47Notify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCEED";// 成功返回success
        String t_trade_status = "";// 表示成功状态

        String requestStr = "";
        JSONObject jsonObject = null;
        Map<String, String> infoMap = new HashMap<String, String>();
        try {
            requestStr = RequestUtil.readRequest(request);
            jsonObject = JSONUtils.toJSONObject(requestStr);
        } catch (IOException e1) {
            logger.info("json转换异常！");
            return ret__success;
        }
        Iterator it = jsonObject.keys();
        while (it.hasNext()) {
            String key = String.valueOf(it.next());
            String value = jsonObject.getString(key);
            infoMap.put(key, value);
        }
        logger.info("请求参数" + infoMap.toString());

        String order_no = infoMap.get("outTradeNo");
        String trade_no = infoMap.get("tradeNo");
        String trade_status = infoMap.get("status");

        logger.info("AK47Notify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_no)
                || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }

        if (!("PAYED".equals(trade_status) || "WAITING_SETTLE".equals(trade_status) || "SETTLEING".equals(trade_status)
                || "SETTLED".equals(trade_status) || "SETTLED_FAILED".equals(trade_status))) {
            logger.info("订单状态异常！");
            return ret__success;
        } else {
            trade_status = "PAYED";// 表示成功状态
        }

        // 保存文件记录
        savePayFile("AK47Notify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_AK)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                AKPayServiceImpl lx = new AKPayServiceImpl(pmapsconfig);
                String rmsg = null;
                JSONObject queryJson = lx.orderQuery(order_no);
                if (!"success".equals(queryJson.get("ak47"))) {
                    return ret__success;
                }
                String payStatus = queryJson.getString("status");
                // PAYED，WAITING_SETTLE，SETTLEING，SETTLED，SETTLED_FAILED
                // 都是交易支付成功
                // 交易支付成功后，会进行相应的结算
                if (!("PAYED".equals(trade_status) || "WAITING_SETTLE".equals(trade_status)
                        || "SETTLEING".equals(trade_status) || "SETTLED".equals(trade_status)
                        || "SETTLED_FAILED".equals(trade_status))) {
                    return ret__success;
                } else {
                    t_trade_status = "PAYED";// 表示成功状态
                }
                logger.info("AK支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret__success;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * @Description 利盈支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/LYNotify.do")
    @ResponseBody
    public String LYNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回SUCCESS
        String t_trade_status = "SUCCESS";// 表示成功状态

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数" + infoMap.toString());

        String order_no = request.getParameter("out_trade_no");
        String trade_no = request.getParameter("trade_no");
        String trade_status = request.getParameter("trade_state");
        logger.info("LYNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_no)
                || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("LXNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_LY)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                LYPayServiceImpl ly = new LYPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = ly.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("LY支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret__success;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description 港创支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/GCNotify.do")
    @ResponseBody
    public String GCNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }

        String order_no = request.getParameter("orderNo");
        String trade_no = request.getParameter("flowNo");
        String trade_status = request.getParameter("status");
        logger.info("GCNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_no)
                || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("GCNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_GC)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                GCPayServiceImpl gc = new GCPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = gc.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("GC支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret__success;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    
    /**
     * 
     * @Description 掌付支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XZFNotify.do")
    @ResponseBody
    public String XZFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "OK";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }

        String order_no = request.getParameter("orderid");
        String trade_no = request.getParameter("orderid");
        String trade_status = request.getParameter("result");
        logger.info("XZFNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("XZFNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_XZF)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                XZFPayServiceImpl xzf = new XZFPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = xzf.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("XZF支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret_str_failed;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * @Description SMART支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/SMARTNotify.do")
    @ResponseBody
    public String SMARTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }

        String order_no = request.getParameter("sdorderno");
        String trade_no = request.getParameter("sdpayno");
        String trade_status = request.getParameter("status");
        logger.info("SMARTNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info(infoMap.toString());
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("SMARTNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_SMART)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                SMARTPayServiceImpl smart = new SMARTPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = smart.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("SMART支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------修改订单:" + order_no + ",金额为:" + infoMap.get("total_fee")
                    + "--------------------");
            // 这里以回调信息中的支付金额为准,修改订单金额;
            int count = userService.UpdateRechangeMoney(order_no, infoMap.get("total_fee"));
            /*
             * if (count == 0) { logger.info("订单已处理，回调无效"); return ret_str_failed; }
             */
            order.put("order_amount", infoMap.get("total_fee"));
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret_str_failed;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            e.printStackTrace();
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * @Description 润京支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/RJNotify.do")
    @ResponseBody
    public String RJNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "success";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数" + infoMap.toString());
        String order_no = request.getParameter("merordernum");
        String trade_no = request.getParameter("ordernum");
        String trade_status = request.getParameter("respcode");
        logger.info("RJNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("RJNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_RJ)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                RJPayServiceImpl rj = new RJPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = rj.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("RJ支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret_str_failed;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 
     * @Description 信汇支付回调通知
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/XHNotify.do")
    @ResponseBody
    public String XHNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "ok";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数" + infoMap.toString());
        String order_no = request.getParameter("ordernumber");
        String trade_no = request.getParameter("sysnumber");
        String trade_status = request.getParameter("orderstatus");
        logger.info("XHNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("XHNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_XH)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                XHPayServiceImpl xh = new XHPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = xh.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("XH支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret_str_failed;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    @RequestMapping("/GCPNotify.do")
    @ResponseBody
    public JSONObject GCPNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        JSONObject ret__success = new JSONObject();// 成功返回success
        ret__success.put("code", "SUCCESS");
        ret__success.put("msg", "ok");

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }

        String order_no = request.getParameter("orderNo");
        String trade_no = request.getParameter("flowNo");
        String trade_status = request.getParameter("status");
        logger.info("GCPNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("GCPNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_GCP)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                GCPPayServiceImpl gcp = new GCPPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = gcp.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("GCP支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret__success;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            logger.info("系统异常！");
            return ret__success;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    @RequestMapping("/QFTNotify.do")
    @ResponseBody
    public String QFTNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }

        String order_no = request.getParameter("orderNo");
        String trade_no = request.getParameter("orderNo");
        String trade_status = request.getParameter("status");
        logger.info("QFTNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("QFTNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_QFT)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                QFTPayServiceImpl smart = new QFTPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = smart.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("QFT支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret_str_failed;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    @RequestMapping("/YXNotify.do")
    @ResponseBody
    public String YXNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        String ret__success = "SUCCESS";// 成功返回success

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }

        String order_no = request.getParameter("order_no");
        String trade_no = request.getParameter("trade_no");
        String trade_status = request.getParameter("trade_status");
        logger.info("YXNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("YXNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");
            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_YX)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                YXPayServiceImpl smart = new YXPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = smart.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("易信支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret_str_failed;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    @RequestMapping("/SYFNotify.do")
    @ResponseBody
    public String SYFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }

        String ret__success = "opstate=0";// 成功返回success
        String order_no = infoMap.get("orderid");
        String trade_no = infoMap.get("sysorderid") == null ? infoMap.get("orderid") : infoMap.get("sysorderid");
        String trade_status = infoMap.get("opstate");
        logger.info("SYFNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("SYFNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "0";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_SYF)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                SYFPayServiceImpl syf = new SYFPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = syf.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("SYF支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret_str_failed;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 天机付通知
     *
     * @param request
     * @param response
     * @param session
     * @return
     */
    @RequestMapping("/TJFNotify.do")
    @ResponseBody
    public String TJFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {

        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }

        String ret__success = "SUCCESS";// 成功返回success
        String order_no = infoMap.get("tradeNo");
        String trade_no = infoMap.get("opeNo");
        String trade_status = infoMap.get("status");
        logger.info("TJFNotify 开始调用------------");
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("TJFNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "1";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_TJF)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                TJFPayServiceImpl syf = new TJFPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = syf.callBack(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("TJF支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret_str_failed;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    @RequestMapping("/JCFNotify.do")
    @ResponseBody
    public String JCFNotify(HttpServletRequest request, HttpServletResponse response, HttpSession session) {

        logger.info("JCFNotify 开始调用------------");
        String ret_str_success = "SUCCESS";
        Map<String, String> infoMap = new HashMap<String, String>();
        Enumeration enu = request.getParameterNames();
        while (enu.hasMoreElements()) {
            String paraName = (String) enu.nextElement();
            infoMap.put(paraName, request.getParameter(paraName).toString());
        }
        logger.info("请求参数:" + JSONObject.fromObject(infoMap).toString());

        String ret__success = "SUCCESS";// 成功返回

        String order_no = request.getParameter("outTradeNo");// 平台订单号
        String trade_no = request.getParameter("trxNo");// 平台订单号
        String trade_status = request.getParameter("tradeStatus");// 处理结果
        if (StringUtils.isNullOrEmpty(order_no) || StringUtils.isNullOrEmpty(trade_status)) {
            logger.info("请求参数空");
            return ret__success;
        }
        // 保存文件记录
        savePayFile("JCFNotify", infoMap, IPTools.getIp(request));

        Map<String, Object> checkMap = check(order_no);
        if (!checkMap.get("status").equals("success")) {
            logger.info("单据异常获取支付商信息失败！");
            return ret__success;
        }

        if (payMap.containsKey(order_no)) {
            logger.info("order_no:" + order_no + "重复调用!");
            return ret__success;
        }
        payMap.put(order_no, "1");
        try {
            // 获取订单支付商配置
            Map<String, String> pmapsconfig = (Map<String, String>) checkMap.get("pmapsconfig");
            String paymentName = checkMap.get("paymentName").toString();
            Map<String, String> order = (Map<String, String>) checkMap.get("order");
            JSONObject jmap = (JSONObject) checkMap.get("jmap");
            List<Map<String, String>> plist = (List<Map<String, String>>) checkMap.get("plist");

            String t_trade_status = "SUCCESS";// 表示成功状态
            // // 判断支付商签名是否正确
            if (paymentName.equals(PayConstant.CONSTANT_JCF)) {
                // 初始化数据
                logger.info("初始化参数成功:" + " t_trade_status" + t_trade_status);
                JCFPayServiceImpl jcf = new JCFPayServiceImpl(pmapsconfig);
                String rmsg = null;
                rmsg = jcf.callback(infoMap);
                if (!"success".equals(rmsg)) {
                    return ret__success;
                }
                logger.info("JCF支付验签成功！");
            } else {
                // 异常请求
                logger.error("异常请求");
                return ret__success;
            }
            logger.info("-------------------------网银支付--------------------------");
            String rt = SaveProcess(IPTools.getIp(request), infoMap, order_no, trade_no, trade_status, order,
                    String.valueOf(order.get("uid")), jmap, plist, t_trade_status);
            if (rt.equals("error")) {
                logger.info("存储过程执行异常");
                return ret_str_failed;
            }
            logger.info("回调成功！");
            return ret__success;
        } catch (Exception e) {
            return ret_str_failed;
        } finally {
            if (payMap.containsKey(order_no)) {
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 万通XX 支付回调函数
     * @param request
     * @return
     */
    @RequestMapping("/WTXXNotify.do")
    @ResponseBody
    public String WTXXNotify(HttpServletRequest request){
        logger.info("WTXXNotify 万通XX支付开始回调调用------------");
        String clazz_name = "万通XX支付回调";
        String ret_success = "SUCCESS";
        Map<String,String> infoMap = new HashMap<String,String>();
        try{
            infoMap = ParamsUtils.getNotifyParams(request);
            logger.info("{}获取参数完成,参数值:{}", clazz_name, infoMap); 
        }catch(Exception e){
            e.printStackTrace();
            logger.error("{}出现错误...",clazz_name, e.getMessage());
        }
        logger.info("{} 参数:{}", clazz_name, infoMap);
        
        if(infoMap == null || infoMap.isEmpty()){
            logger.info("{}支付回调获取请求参数为空!", clazz_name);
            return ret_str_failed;
        }
        logger.info("{} 支付回调请求参数:{}",clazz_name ,infoMap);
        
        String order_no = infoMap.get("orderid");// 平台订单号
        String trade_no = infoMap.get("transid");
        String trade_status = infoMap.get("status");
        String t_trade_status = "1";//交易结果, 1:已支付
        String order_amount = infoMap.get("price");
        if(StringUtils.isNullOrEmpty(order_amount)){
            logger.info(clazz_name+"获取实际支付金额为空!");
            return ret_str_failed;
        }
        double money = Double.valueOf(order_amount)/100;//回调，以 分为单位,需要除以 100
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        
        logger.info("{} 会员实际支付金额:{}",clazz_name, money);
        
        if (payMap.containsKey(order_no)) {
            logger.info("{}支付回调订单号:{}重复调用",clazz_name,order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        
        try {
            logger.info("{}执行回调业务开始=========================START===========================",clazz_name);
            // 保存文件记录
            savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info("{}支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",clazz_name, order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(money);
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info("{} 非法支付商ID,查询支付商信息失败,支付商ID:{}",clazz_name, payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info("支付回调验签开始=======================START====================", clazz_name);
            if (paymentName.equals(PayConstant.CONSTANT_WTXX)) {
                WTXXPayServiceImpl xxb = new WTXXPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info("{}支付回调验签失败!", clazz_name);

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info("{}支付回调验签成功!",clazz_name);
            } else {
                // 异常请求
                logger.error("{}支付回调异常请求",clazz_name);
                return ret_str_failed;
            }
            logger.info("{}支付回调验签结束=======================END====================",clazz_name);

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info("{}支付回调业务处理成功=======================SUCCESS====================", clazz_name);
                return ret_success;
            }
            logger.info("{} 支付回调业务处理成功=======================FAILD====================",clazz_name);
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("{}支付回调业务处理异常:{}",clazz_name, e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info("支付回调业务处理成功,删除缓存中的订单KEY:{}",clazz_name, order_no);
                payMap.remove(order_no);
            }
        }
    }

    /**
     * 商盟支付
     * @param request
     * @return
     */
    @RequestMapping("/SMZFNotify.do")
    @ResponseBody
    public String SMZFNotify(HttpServletRequest request){
        logger.info("SMZFNotify 商盟支付开始回调调用------------");
        String clazz_name = "商盟支付回调";
        String ret_success = "success";
        Map<String,String> infoMap = new HashMap<String,String>();
        try{
            infoMap = ParamsUtils.getNotifyParams(request);
            logger.info("{}获取参数完成,参数值:{}", clazz_name, infoMap); 
        }catch(Exception e){
            e.printStackTrace();
            logger.error("{}出现错误...",clazz_name, e.getMessage());
        }
        logger.info("{} 参数:{}", clazz_name, infoMap);
        
        if(infoMap == null || infoMap.isEmpty()){
            logger.info("{}支付回调获取请求参数为空!", clazz_name);
            return ret_str_failed;
        }
        logger.info("{} 支付回调请求参数:{}",clazz_name ,infoMap);
        
        String order_no = infoMap.get("order_id");// 平台订单号
        String trade_no = infoMap.get("platform_order_id");
        String trade_status = infoMap.get("status");
        String t_trade_status = "2";//订单状态：1- 待支付；2- 支付成功；3- 支付失败；
        String order_amount = infoMap.get("money");
        if(StringUtils.isNullOrEmpty(order_amount)){
        	logger.info("{} {}实际支付金额为空", clazz_name, order_no);
        	return ret_str_failed;
        }
        double money = Double.valueOf(order_amount)/100;//回调，以 分为单位,需要除以 100
        logger.info("{}实际支付金额为 {}", order_no,money);
        String ip = StringUtils.isNullOrEmpty(IPTools.getIp(request))?"127.0.0.1":IPTools.getIp(request);
        
        logger.info("{} 会员实际支付金额:{}",clazz_name, money);
        
        if (payMap.containsKey(order_no)) {
            logger.info("{}支付回调订单号:{}重复调用",clazz_name,order_no);
            return ret_str_failed;
        }
        payMap.put(order_no, "1");
        
        try {
            logger.info("{}执行回调业务开始=========================START===========================",clazz_name);
            // 保存文件记录
            //savePayFile(clazz_name, infoMap, IPTools.getIp(request));
            //通过订单号查询订单信息
            RechargeOrderVO rechargeOrderVO = notifyService.findNotifyOrderByOrderNo(order_no);
            if(rechargeOrderVO == null){
                logger.info("{}支付回调通知订单号为非法订单号,查询订单信息失败,订单号:{}",clazz_name, order_no);
                return ret_success;
            }
            rechargeOrderVO.setTradeNo(trade_no);
            rechargeOrderVO.setTradeStatus(trade_status);
            rechargeOrderVO.setSuccessStatus(t_trade_status);
            rechargeOrderVO.setNotifyIp(ip);
            rechargeOrderVO.setNotifyParams(JSONObject.fromObject(infoMap).toString());
            rechargeOrderVO.setOrderAmount(money);
            Integer payId = rechargeOrderVO.getPayId();//支付商ID
            //查询支付商信息
            CagentYespayVO cagentYespayVO = notifyService.getCagentYespayByPayId(payId);
            if(cagentYespayVO == null){
                logger.info("{} 非法支付商ID,查询支付商信息失败,支付商ID:{}",clazz_name, payId);
                return ret_str_failed;
            }
            String paymentName = cagentYespayVO.getPaymentName();//支付商编码
            Map<String,String> pmapsconfig = JSONObject.fromObject(cagentYespayVO.getPaymentConfig());//支付商配置信息
            logger.info("支付回调验签开始=======================START====================", clazz_name);
            if (paymentName.equals(PayConstant.CONSTANT_SMZF)) {
                SMZFPayServiceImpl xxb = new SMZFPayServiceImpl(pmapsconfig);
                String rmsg = xxb.callback(infoMap);
                if (!"success".equalsIgnoreCase(rmsg)) {
                    logger.info("{}支付回调验签失败!", clazz_name);

                    notifyService.updateNotifyOrderDescription(rechargeOrderVO);
                    return ret_str_failed;
                }
                logger.info("{}支付回调验签成功!",clazz_name);
            } else {
                // 异常请求
                logger.error("{}支付回调异常请求",clazz_name);
                return ret_str_failed;
            }
            logger.info("{}支付回调验签结束=======================END====================",clazz_name);

            logger.info("==========================处理订单回调业务并修改订单状态==========================");
            String result = notifyService.processNotifyOrder(rechargeOrderVO);
            if(ResultResponse.SUCCESS_CODE.equals(result)){
                logger.info("{}支付回调业务处理成功=======================SUCCESS====================", clazz_name);
                return ret_success;
            }
            logger.info("{} 支付回调业务处理成功=======================FAILD====================",clazz_name);
            return ret_str_failed;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("{}支付回调业务处理异常:{}",clazz_name, e.getMessage());
            return ret_str_failed;
        }finally {
            if (payMap.containsKey(order_no)) {
                logger.info("支付回调业务处理成功,删除缓存中的订单KEY:{}",clazz_name, order_no);
                payMap.remove(order_no);
            }
        }
    }
          
    
    /**
     * 佰富支付获取md5_key
     * 
     * @param merId
     * @return
     */
    public JSONObject getPublicKey(String merId) {
        // 201709181816002
        List<Map<String, String>> ysepay = userService.selectTcagentYsepay("BF");
        String paymentConfig = "";
        JSONObject jsStr = new JSONObject();
        for (int i = 0; i < ysepay.size(); i++) {
            paymentConfig = ysepay.get(i).get("payment_config");
            jsStr = JSONObject.fromObject(paymentConfig);
            if (merId.equals(jsStr.get("merNo"))) {
                return jsStr;
            }
        }
        return jsStr;
    }

    /**
     * 银邦获取公钥
     * 
     * @param merId
     * @param payment
     * @return
     */
    public JSONObject getPublicKey(String merId, String payment) {
        // 201709181816002
        List<Map<String, String>> ysepay = userService.selectTcagentYsepay(payment);
        String paymentConfig = "";
        JSONObject jsStr = new JSONObject();
        for (int i = 0; i < ysepay.size(); i++) {
            paymentConfig = ysepay.get(i).get("payment_config");
            jsStr = JSONObject.fromObject(paymentConfig);
            if (merId.equals(jsStr.get("merId"))) {
                return jsStr;
            }
        }
        return jsStr;
    }

    /**
     * 验证支付订单
     * 
     * @param order_no
     * @return
     */
    private Map<String, Object> check(String order_no) {
        String ret__error = "error";
        String ret__success = "success";
        Map<String, Object> returnMap = new HashMap<>();

        Map<String, Object> map = new HashMap<>();
        map.put("orderno", order_no);
        List<Map<String, String>> lm = userService.selectChickReCharge(map);
        // 单据不存在,直接返回

        if (lm.size() <= 0) {
            logger.info("单据不存在,直接返回");
            returnMap.put("status", ret__error);
            return returnMap;
        }
        Map<String, String> order = lm.get(0);
        // 获取用户信息
        Object ouid = order.get("uid");
        String uid = ouid.toString();
        Map<String, Object> param = new HashMap<>();
        param.put("uid", uid);
        map = userService.selectUserById(param);
        JSONObject jmap = JSONObject.fromObject(map);

        String payId = String.valueOf(order.get("pay_id"));
        if (StringUtils.isNullOrEmpty(payId)) {
            logger.info("支付商id不存在！");
            returnMap.put("status", ret__error);
            return returnMap;
        }
        List<Map<String, String>> plist = userService.selectYsepaybyId(payId, uid);
        if (plist.size() > 0) {
        } else {
            logger.info("单据不存在,直接返回");
            returnMap.put("status", ret__error);
            return returnMap;
        }

        // // 获取配置信息
        Map<String, String> hsConfigMap = plist.get(0);
        // // 支付商
        String paymentName = hsConfigMap.get("payment_name").toString();
        logger.info("用户支付商为:" + paymentName);

        if (null == paymentName || "".equals(paymentName)) {
            logger.info("用户支付商不存在:" + paymentName);
            returnMap.put("status", ret__error);
            return returnMap;
        }
        String PaymentConfig = hsConfigMap.get("payment_config").toString();
        // // 配置信息
        Map<String, String> pmapsconfig = JSONUtils.toHashMap(PaymentConfig);

        returnMap.put("order", order);
        returnMap.put("jmap", jmap);
        returnMap.put("plist", plist);
        returnMap.put("paymentName", paymentName);
        returnMap.put("status", ret__success);
        returnMap.put("pmapsconfig", pmapsconfig);
        return returnMap;

    }

    /**
     * 保存文件
     * 
     * @param fileName
     * @param request1
     * @param ip
     */
    private void savePayFile(String fileName, Map<String, String> request1, String ip) {
        // 文件记录
        FileLog f = new FileLog();
        Map<String, String> fileMap = new HashMap<String, String>();
        fileMap.put("requestIp", ip);
        fileMap.put("requestParams", JSONUtils.toJSONString(request1));
        f.setLog(fileName, fileMap);
    }

    /**
     * 支付存储过程
     * 
     * @param ip
     * @param requestMap
     * @param order_no
     * @param trade_no
     * @param trade_status
     * @param order
     * @param uid
     * @param jmap
     * @param plist
     * @return
     * @throws Exception
     * @throws SQLException
     */
     private String SaveProcess(String ip, Map<String, String> requestMap, String order_no, String trade_no,
     String trade_status, Map<String, String> order, String uid, JSONObject jmap,
     List<Map<String, String>> plist, String t_trade_status) throws Exception, SQLException {
         String ret__success = "error";
         // 回调日志
         Map<String, Object> cmap = new HashMap<>();
         Map<String, String[]> errorMap = new HashMap<String, String[]>();
         cmap.put("params", JSONObject.fromObject(requestMap).toString());
         cmap.put("ip", ip);
         cmap.put("status", ret_str_success);
         userService.InsertCallbacklog(cmap);
         logger.info("回调记录保存成功!");
        
         JSONObject jo = JSONObject.fromObject(order);
         String oamount = jo.getString("order_amount");
        
         String status = order.get("trade_status");
         // 如果单据状态不是交易中则跳过后续步骤
         if (!"处理中".equals(status)) {
         logger.info("订单状态异常" + status);
         return "success";
         }
         Map<String, Object> params = new HashMap<>();
         params.put("uid", uid);
         Map<String, Object> user = userService.selectUserById(params);
        
         double wallet = Double.parseDouble(jmap.getString("wallet"));
         double amt = Double.parseDouble(oamount);
        
         String sql2 = "update t_recharge set trade_status = ?,trade_no=? where order_no=?";
         List<String> list = new ArrayList<>();
         Connection connection = null;
         PreparedStatement preparedStatement = null;
         Map<String, Object> paramsMap = new HashMap<String, Object>();
        
         if (t_trade_status.equals(trade_status)) {
         JSONObject json = JSONObject.fromObject(plist.get(0));
         Double cj = amt * json.getDouble("dividend_rate");
         Double dml = (amt + cj) * json.getInt("coding_rate");
         // logger.info("单据成功");
         DecimalFormat df = new DecimalFormat("######0.00");
         cj = Double.parseDouble(df.format(cj));
        
         try {
         paramsMap.put("amt", amt);
         paramsMap.put("uid", uid);
         paramsMap.put("wallet", wallet);
         paramsMap.put("cj", cj);
         paramsMap.put("tradeNo", trade_no);
         paramsMap.put("outTradeNo", order_no);
         paramsMap.put("cagent", user.get("cagent"));
         paramsMap.put("dml", dml);
         paramsMap.put("number", "CJ" + System.currentTimeMillis());
         paramsMap.put("number2", "CK" + System.currentTimeMillis());
         paramsMap.put("_err", "0");
         /** 进入存储过程前做一次验证 **/
         /*
         * int i = userService.selectOrderNoStatus(paramsMap); if(i >= 1) { return ret__success; }
         */
         // userService.ysePayCallBack(paramsMap);
        
         int res = notifyService.saveProcess(paramsMap);
        
         if (res == -1) {
         logger.info("执行回调失败!");
         return ret__success;
         }
         } catch (Exception e) {
         e.printStackTrace();
         return ret__success;
         }
         logger.info("UID : " + uid);
         logger.info("Username : " + jmap.getString("username"));
         logger.info("order : " + jo);
         logger.info("amt : " + amt);
         logger.info("dml : " + dml);
         logger.info("cj : " + cj);
         logger.info("------------------订单完成----------------------");
         } else {
         logger.info("回调成功，修改记录");
         // 更新转账信息
         connection = JDBCTools.getConnection();
         connection.setAutoCommit(false);
        
         list.clear();
         list.add("faild");
         list.add(trade_no);
         list.add(order_no);
        
         preparedStatement = connection.prepareStatement(sql2);
        
         for (int i = 0; i < list.size(); i++) {
         preparedStatement.setObject(i + 1, list.get(i));
         }
         preparedStatement.executeUpdate();
         connection.commit();
         }
         return "success";
     }

     
     
    private String SaveRechageProcess(String ip, Map<String, String> requestMap, String order_no, String trade_no,
            String trade_status, Map<String, String> order, String uid, JSONObject jmap,
            List<Map<String, String>> plist, String t_trade_status) throws Exception {
        logger.info("回调验签成功后,修改用户订单、打码量、余额等开始==================START==========================");
        try {
            //队列
            ConcurrentLinkedQueue<String> queue = new ConcurrentLinkedQueue<>();
            String params = JSONObject.fromObject(requestMap).toString();
            //入队列
            queue.offer(notifyService.saveRecharge(order_no, trade_status, trade_no, t_trade_status, ip, params));
            //出队列
            String response = queue.poll();
            if (response.equalsIgnoreCase("success")) {
                return "success";
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("回调验签成功后,修改用户订单、打码量、余额等异常:" + e.getMessage());
        }
        return "error";
    }

    
}
